import os
import re
import logging
import asyncio
from datetime import datetime, timedelta

from telethon.sessions import StringSession
from telethon import TelegramClient
from psycopg import connect

# >>> SAN: imports
from utils.sanitazer import (
    San, TourDraft, build_tour_key,
    safe_run, RetryPolicy
)
# <<< SAN: imports

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ============ ENV ============
API_ID = int(os.getenv("TG_API_ID"))
API_HASH = os.getenv("TG_API_HASH")
SESSION_B64 = os.getenv("TG_SESSION_B64")
CHANNELS = [c.strip() for c in os.getenv("CHANNELS", "").split(",") if c.strip()]  # –ø—Ä–∏–º–µ—Ä: @tour1,@tour2
DATABASE_URL = os.getenv("DATABASE_URL")

# >>> SAN: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ / –Ω–∞–≥—Ä—É–∑–∫–∏
FETCH_LIMIT = int(os.getenv("FETCH_LIMIT", "80"))                 # —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª –∑–∞ –ø—Ä–æ—Ö–æ–¥
MAX_POST_AGE_DAYS = int(os.getenv("MAX_POST_AGE_DAYS", "45"))     # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π
REQUIRE_PRICE = os.getenv("REQUIRE_PRICE", "1") == "1"            # –µ—Å–ª–∏ True ‚Äî –±–µ–∑ —Ü–µ–Ω—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
BATCH_SIZE = int(os.getenv("BATCH_SIZE", "30"))                   # —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è upsert
SLEEP_BASE = int(os.getenv("SLEEP_BASE_SEC", "900"))              # –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ—Ö–æ–¥–∞–º–∏
# <<< SAN: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

if not API_ID or not API_HASH or not SESSION_B64 or not CHANNELS:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å TG_API_ID, TG_API_HASH, TG_SESSION_B64 –∏ CHANNELS –≤ .env")

# ============ –ë–î ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True)

# >>> SAN: UPSERT (named params) + bulk
SQL_UPSERT_TOUR = """
INSERT INTO tours(
    country, city, hotel, price, currency, dates, description,
    source_url, posted_at, message_id, source_chat, stable_key
)
VALUES (%(country)s, %(city)s, %(hotel)s, %(price)s, %(currency)s, %(dates)s, %(description)s,
        %(source_url)s, %(posted_at)s, %(message_id)s, %(source_chat)s, %(stable_key)s)
ON CONFLICT (message_id, source_chat) DO UPDATE SET
    country     = EXCLUDED.country,
    city        = EXCLUDED.city,
    hotel       = EXCLUDED.hotel,
    price       = EXCLUDED.price,
    currency    = EXCLUDED.currency,
    dates       = EXCLUDED.dates,
    description = EXCLUDED.description,
    source_url  = EXCLUDED.source_url,
    posted_at   = EXCLUDED.posted_at,
    stable_key  = EXCLUDED.stable_key;
"""

def save_tours_bulk(rows: list[dict]):
    """–ë–∞—Ç—á-–∞–ø—Å–µ—Ä—Ç—ã: –±—ã—Å—Ç—Ä–µ–µ –∏ —É—Å—Ç–æ–π—á–∏–≤–µ–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π."""
    if not rows:
        return
    try:
        with get_conn() as conn, conn.cursor() as cur:
            cur.executemany(SQL_UPSERT_TOUR, rows)
        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª/–æ–±–Ω–æ–≤–∏–ª –±–∞—Ç—á: {len(rows)} —à—Ç.")
    except Exception as e:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π fallback –ø–æ –æ–¥–Ω–æ–º—É ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å—ë –∏–∑-–∑–∞ –æ–¥–Ω–æ–≥–æ –∫—Ä–∏–≤–æ–≥–æ –ø–æ—Å—Ç–∞
        logging.warning(f"‚ö†Ô∏è Bulk upsert failed, fallback to single. Reason: {e}")
        for r in rows:
            try:
                with get_conn() as conn, conn.cursor() as cur:
                    cur.execute(SQL_UPSERT_TOUR, r)
            except Exception as ee:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—É—Ä–∞ (msg={r.get('message_id')}): {ee}")
# <<< SAN: UPSERT


# ============ –ü–ê–†–°–ï–† (—É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã RU/UZ) ============
# RU: —Å–µ–Ω—Ç—è–±—Ä—å/—Å–µ–Ω—Ç., UZ (–∫–∏—Ä–∏–ª–ª): —Å–µ–Ω—Ç—è–±—Ä/—Å–µ–Ω—Ç, UZ (–ª–∞—Ç): sentabr/sent.
MONTHS_MAP = {
    # RU –∫—Ä–∞—Ç–∫–∏–µ
    "—è–Ω–≤": "01", "—Ñ–µ–≤": "02", "–º–∞—Ä": "03", "–∞–ø—Ä": "04", "–º–∞–π": "05", "–º–∞—è": "05",
    "–∏—é–Ω": "06", "–∏—é–ª": "07", "–∞–≤–≥": "08", "—Å–µ–Ω": "09", "—Å–µ–Ω—Ç": "09", "–æ–∫—Ç": "10", "–Ω–æ—è": "11", "–¥–µ–∫": "12",
    # RU –ø–æ–ª–Ω—ã–µ/–ø–∞–¥–µ–∂–∏
    "—è–Ω–≤–∞—Ä": "01", "—Ñ–µ–≤—Ä–∞–ª": "02", "–º–∞—Ä—Ç": "03", "–∞–ø—Ä–µ–ª": "04", "–∏—é–Ω—å": "06", "–∏—é–ª—å": "07",
    "–∞–≤–≥—É—Å—Ç": "08", "—Å–µ–Ω—Ç—è–±—Ä": "09", "–æ–∫—Ç—è–±—Ä": "10", "–Ω–æ—è–±—Ä": "11", "–¥–µ–∫–∞–±—Ä": "12",
    "—Å–µ–Ω—Ç—è–±—Ä—è": "09", "–æ–∫—Ç—è–±—Ä—è": "10", "–Ω–æ—è–±—Ä—è": "11", "–¥–µ–∫–∞–±—Ä—è": "12",
    # UZ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (–æ—Å–Ω–æ–≤—ã)
    "—è–Ω–≤–∞—Ä": "01", "—Ñ–µ–≤—Ä–∞–ª": "02", "–º–∞—Ä—Ç": "03", "–∞–ø—Ä–µ–ª": "04", "–º–∞–π": "05", "–∏—é–Ω": "06", "–∏—é–ª": "07",
    "–∞–≤–≥—É—Å—Ç": "08", "—Å–µ–Ω—Ç—è–±—Ä": "09", "–æ–∫—Ç—è–±—Ä": "10", "–Ω–æ—è–±—Ä": "11", "–¥–µ–∫–∞–±—Ä": "12",
    # UZ –ª–∞—Ç–∏–Ω–∏—Ü–∞
    "yanv": "01", "fevral": "02", "mart": "03", "aprel": "04", "may": "05",
    "iyun": "06", "iyul": "07", "avgust": "08", "sentabr": "09", "sent": "09",
    "oktabr": "10", "noyabr": "11", "dekabr": "12",
}

def _norm_year(y: str | None) -> int:
    if not y:
        return datetime.now().year
    y = int(y)
    if y < 100:
        y += 2000 if y < 70 else 1900
    return y

def _mk_date(d, m, y) -> str:
    return f"{int(d):02d}.{int(m):02d}.{_norm_year(y):04d}"

def _month_to_mm(token: str | None) -> str | None:
    if not token:
        return None
    t = token.strip().lower()
    # —Ä–µ–∂–µ–º –¥–æ –ø–µ—Ä–≤—ã—Ö 5 —Å–∏–º–≤–æ–ª–æ–≤ —á—Ç–æ–±—ã –º–∞—Ç—á–∏—Ç—å ¬´—Å–µ–Ω—Ç—è–±—Ä/—Å–µ–Ω—Ç—è–±—Ä—è/sentabr¬ª
    for k, mm in MONTHS_MAP.items():
        if t.startswith(k):
            return mm
    return None

def parse_dates_strict(text: str) -> str | None:
    """–ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ä–∞–∑–±–æ—Ä: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ RU/UZ (–∫–∏—Ä–∏–ª/–ª–∞—Ç), –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."""
    t = text.strip()

    # 1) dd.mm(.yy|yyyy)?‚Äìdd.mm(.yy|yyyy)?
    m = re.search(r"(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?\s?[‚Äì\-]\s?(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?", t)
    if m:
        d1, m1, y1, d2, m2, y2 = m.groups()
        return f"{_mk_date(d1, m1, y1)}‚Äì{_mk_date(d2, m2, y2 or y1)}"

    # 2) dd‚Äìdd mon (ru/uz)
    m = re.search(r"(\d{1,2})\s?[‚Äì\-]\s?(\d{1,2})\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë—û“ì“õ“≥]+)\w*", t, re.I)
    if m:
        d1, d2, mon = m.groups()
        mm = _month_to_mm(mon)
        if mm:
            y = datetime.now().year
            return f"{_mk_date(d1, mm, y)}‚Äì{_mk_date(d2, mm, y)}"

    # 3) —Å d –ø–æ d mon (ru/uz)
    m = re.search(r"(?:—Å|–±—É)\s?(\d{1,2})\s?(?:–ø–æ|—Ç–æ)\s?(\d{1,2})\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë—û“ì“õ“≥]+)\w*", t, re.I)
    if m:
        d1, d2, mon = m.groups()
        mm = _month_to_mm(mon)
        if mm:
            y = datetime.now().year
            return f"{_mk_date(d1, mm, y)}‚Äì{_mk_date(d2, mm, y)}"

    # 4) –æ–¥–∏–Ω–æ—á–Ω–∞—è –¥–∞—Ç–∞ dd.mm(.yy|yyyy)? –∏–ª–∏ dd mon
    m = re.search(r"\b(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?\b", t)
    if m:
        d, mth, y = m.groups()
        return _mk_date(d, mth, y)
    m = re.search(r"\b(\d{1,2})\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë—û“ì“õ“≥]+)\w*", t)
    if m:
        d, mon = m.groups()
        mm = _month_to_mm(mon)
        if mm:
            y = datetime.now().year
            return _mk_date(d, mm, y)

    return None


def strip_trailing_price_from_hotel(s: str | None) -> str | None:
    if not s:
        return s
    return re.sub(
        r'[\s‚Äì-]*(?:–æ—Ç\s*)?\d[\d\s.,]*\s*(?:USD|EUR|UZS|RUB|\$|‚Ç¨)\b.*$',
        '',
        s,
        flags=re.I
    ).strip()

def guess_country(city: str | None):
    if not city:
        return None
    mapping = {
        "–ù—è—á–∞–Ω–≥": "–í—å–µ—Ç–Ω–∞–º", "–ê–Ω—Ç–∞–ª—å—è": "–¢—É—Ä—Ü–∏—è", "–ü—Ö—É–∫–µ—Ç": "–¢–∞–∏–ª–∞–Ω–¥",
        "–ü–∞—Ç—Ç–∞–π—è": "–¢–∞–∏–ª–∞–Ω–¥", "–°–∞–º—É–∏": "–¢–∞–∏–ª–∞–Ω–¥", "–ö—Ä–∞–±–∏": "–¢–∞–∏–ª–∞–Ω–¥",
        "–ë–∞–Ω–≥–∫–æ–∫": "–¢–∞–∏–ª–∞–Ω–¥", "–î—É–±–∞–π": "–û–ê–≠", "–ë–∞–ª–∏": "–ò–Ω–¥–æ–Ω–µ–∑–∏—è",
        "–¢–±–∏–ª–∏—Å–∏": "–ì—Ä—É–∑–∏—è",
    }
    return mapping.get(city, None)

def _amount_to_float(s: str | None) -> float | None:
    if not s:
        return None
    s = s.replace(' ', '').replace('\xa0', '')
    if s.count(',') == 1 and s.count('.') == 0:
        s = s.replace(',', '.')
    else:
        s = s.replace(',', '')
    try:
        return float(s)
    except Exception:
        return None


# >>> SAN: –µ–¥–∏–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ San/TourDraft + —Å—Ç—Ä–æ–≥–∏–µ –¥–∞—Ç—ã + —Ñ–∏–ª—å—Ç—Ä—ã –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
def parse_post(text: str, link: str, msg_id: int, chat: str, posted_at: datetime):
    """–†–∞–∑–±–æ—Ä –ø–æ—Å—Ç–∞ (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫), —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –º—É—Å–æ—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç–∞–º."""
    raw = text or ""
    cleaned = San.clean_text(raw)

    draft = TourDraft.from_raw(cleaned)

    # –ì–æ—Ä–æ–¥/–æ—Ç–µ–ª—å ‚Äî —Ç–≤–æ–∏ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
    city_match = re.search(r"(–ë–∞–ª–∏|–î—É–±–∞–π|–ù—è—á–∞–Ω–≥|–ê–Ω—Ç–∞–ª—å—è|–ü—Ö—É–∫–µ—Ç|–¢–±–∏–ª–∏—Å–∏)", cleaned, re.I)
    city = city_match.group(1) if city_match else None
    if not city:
        m = re.search(r"\b([–ê-–Ø–Å][–∞-—è—ë]+)\b", cleaned)
        city = m.group(1) if m else None

    hotel_match = re.search(r"(Hotel|–û—Ç–µ–ª—å|Resort|Inn|Palace|Hilton|Marriott)\s?[^\n]*", cleaned)
    hotel = strip_trailing_price_from_hotel(hotel_match.group(0)) if hotel_match else None

    # –î–∞—Ç—ã: —Å—Ç—Ä–æ–≥–∏–π —Ä–∞–∑–±–æ—Ä RU/UZ
    dates = parse_dates_strict(cleaned) or draft.dates

    # –¶–µ–Ω–∞/–≤–∞–ª—é—Ç–∞: –ø–µ—Ä–≤–æ–µ ‚Äî –∏–∑ draft, –∏–Ω–∞—á–µ fallback
    price, currency = draft.price, draft.currency
    if price is None or currency is None:
        price_match = re.search(
            r'(?:(?:–æ—Ç\s*)?(\d[\d\s.,]{2,}))\s*(USD|EUR|UZS|RUB|–°–£–ú|—Å—É–º|—Ä—É–±|\$|‚Ç¨)\b|(?:(USD|EUR|\$|‚Ç¨)\s*(\d[\d\s.,]{2,}))',
            cleaned, re.I
        )
        if price_match:
            if price_match.group(1) and price_match.group(2):
                price, currency = _amount_to_float(price_match.group(1)), price_match.group(2)
            elif price_match.group(3) and price_match.group(4):
                currency, price = price_match.group(3), _amount_to_float(price_match.group(4))

    # –í–∞–ª—é—Ç–∞ ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    if currency:
        cu = str(currency).strip().upper()
        if cu in {"$", "US$", "USD$"}:
            currency = "USD"
        elif cu in {"‚Ç¨", "EUR‚Ç¨"}:
            currency = "EUR"
        elif cu in {"UZS", "–°–£–ú", "–°–£–ú–´", "–°–£–ú."}:
            currency = "UZS"
        elif cu in {"RUB", "–†–£–ë", "–†–£–ë."}:
            currency = "RUB"
        else:
            currency = cu
    else:
        low = cleaned.lower()
        if "—Å—É–º" in low or "uzs" in low:
            currency = "UZS"
        elif "eur" in low or "‚Ç¨" in low:
            currency = "EUR"
        elif "usd" in low or "$" in low:
            currency = "USD"

    stable_key = build_tour_key(
        source_chat=chat,
        message_id=msg_id,
        city=city or draft.city or "",
        hotel=hotel or draft.hotel or "",
        price=(price, currency) if price else None
    )

    payload = {
        "country": guess_country(city) if city else None,
        "city": city,
        "hotel": hotel or draft.hotel,
        "price": price,
        "currency": currency,
        "dates": dates,
        "description": cleaned[:500],
        "source_url": link,
        "posted_at": posted_at.replace(tzinfo=None),
        "message_id": msg_id,
        "source_chat": chat,
        "stable_key": stable_key,
    }
    return payload
# <<< SAN: –µ–¥–∏–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥


# ============ –ö–û–õ–õ–ï–ö–¢–û–† ============
async def collect_once(client: TelegramClient):
    """–û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º —Å –±–∞—Ç—á-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏."""
    now = datetime.utcnow()
    cutoff = now - timedelta(days=MAX_POST_AGE_DAYS)

    for channel in CHANNELS:
        logging.info(f"üì• –ß–∏—Ç–∞—é –∫–∞–Ω–∞–ª: {channel}")
        batch: list[dict] = []

        async for msg in client.iter_messages(channel, limit=FETCH_LIMIT):
            if not msg.text:
                continue

            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã
            if msg.date and msg.date.replace(tzinfo=None) < cutoff:
                continue

            def _make():
                data = parse_post(
                    msg.text,
                    f"https://t.me/{channel.strip('@')}/{msg.id}",
                    msg.id,
                    channel,
                    msg.date
                )
                # –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ü–µ–Ω–∞ ‚Äî –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –±–µ–∑ —Ü–µ–Ω—ã
                if REQUIRE_PRICE and (data.get("price") is None or data.get("currency") is None):
                    return None
                return data

            # –ø–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –ø–æ—Ç–æ–∫
            data = _make()
            if data:
                batch.append(data)

            # –±–∞—Ç—á-—Å–±—Ä–æ—Å
            if len(batch) >= BATCH_SIZE:
                await safe_run(lambda: asyncio.to_thread(save_tours_bulk, batch.copy()),
                               RetryPolicy(attempts=4, base_delay=0.25, max_delay=2.0))
                batch.clear()

        # –æ—Å—Ç–∞—Ç–∫–∏ –±–∞—Ç—á–∞ –ø–æ—Å–ª–µ –∫–∞–Ω–∞–ª–∞
        if batch:
            await safe_run(lambda: asyncio.to_thread(save_tours_bulk, batch.copy()),
                           RetryPolicy(attempts=4, base_delay=0.25, max_delay=2.0))
            batch.clear()

async def run_collector():
    client = TelegramClient(StringSession(SESSION_B64), API_ID, API_HASH)
    await client.start()
    logging.info("‚úÖ Collector –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            await collect_once(client)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ: {e}")
        # –ª—ë–≥–∫–∏–π –¥–∂–∏—Ç—Ç–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å –≤ —Ä–æ–≤–Ω—ã–µ –º–∏–Ω—É—Ç—ã –∏ —Ä–∞–∑–æ–π—Ç–∏—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
        await asyncio.sleep(SLEEP_BASE + int(10 * (os.getpid() % 3)))

if __name__ == "__main__":
    asyncio.run(run_collector())
