# -*- coding: utf-8 -*-
"""
collector.py ‚Äî –Ω–∞–¥—ë–∂–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤ —Ç—É—Ä-–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å
–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (MessageEdited).

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
- –ß–∏—Ç–∞–µ—Ç –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ Telethon (StringSession –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
- –ü–∞—Ä—Å–∏—Ç ¬´—Å–≤–∞–ª–æ—á–Ω—ã–π¬ª —Ç–µ–∫—Å—Ç: –æ—Ç–µ–ª–∏ (n-gram –ø–æ –∑–∞–≥–ª–∞–≤–Ω—ã–º), –¥–∞—Ç—ã (RU/UZ), —Ü–µ–Ω—É+–≤–∞–ª—é—Ç—É, –ø–∏—Ç–∞–Ω–∏–µ (board), "–≤–∫–ª—é—á–µ–Ω–æ" (includes).
- –§–∏–ª—å—Ç—Ä—É–µ—Ç ¬´–æ–ø–∞—Å–Ω—ã–µ¬ª –≥–µ–æ/—Ç–æ–ø–æ–Ω–∏–º—ã, –Ω–µ –ø—É—Ç–∞—è –∏—Ö —Å –æ—Ç–µ–ª—è–º–∏.
- –ü–∏—à–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É tours (upsert) + —Å–æ–∑–¥–∞—ë—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (board/includes), –∏–Ω–¥–µ–∫—Å—ã –∏ —á–µ–∫–ø–æ–∏–Ω—Ç—ã.
- –ß–µ–∫–ø–æ–∏–Ω—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º (collect_checkpoints) ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
- –ë–∞—Ç—á-–∞–ø—Å–µ—Ä—Ç—ã (executemany) + —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Ä–µ—Ç—Ä–∞–∏ (safe_run/RetryPolicy).
- ‚ö° –ù–æ–≤–æ–µ: –ª–æ–≤–∏—Ç edits (events.MessageEdited), –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–≤–∞–µ—Ç –∏ –±–µ—Ä–µ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å.

ENV (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ):
  DATABASE_URL
  TG_API_ID
  TG_API_HASH
  TG_SESSION_B64         # StringSession –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  CHANNELS=@ch1,@ch2     # —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–º–æ–∂–Ω–æ t.me/..., –º–æ–∂–Ω–æ @...)

ENV (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ):
  FETCH_LIMIT=200
  MAX_POST_AGE_DAYS=60
  REQUIRE_PRICE=1        # 0 ‚Äî —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –±–µ–∑ —Ü–µ–Ω—ã (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
  BATCH_SIZE=50
  SLEEP_BASE_SEC=900
"""

from __future__ import annotations

import os
import re
import logging
import asyncio
from datetime import datetime, timedelta, timezone
from typing import List, Optional, Tuple, Dict

from telethon.sessions import StringSession
from telethon import TelegramClient, events
from psycopg import connect
from psycopg.rows import dict_row

# –≤–Ω–µ—à–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from utils.sanitazer import (
    San, TourDraft, build_tour_key,
    safe_run, RetryPolicy
)

# ======================= –õ–û–ì–ò =======================
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ======================= ENV =======================
API_ID = int(os.getenv("TG_API_ID", "0") or 0)
API_HASH = os.getenv("TG_API_HASH") or ""
SESSION_B64 = os.getenv("TG_SESSION_B64") or ""
DATABASE_URL = os.getenv("DATABASE_URL") or ""
CHANNELS_RAW = os.getenv("CHANNELS", "")

FETCH_LIMIT = int(os.getenv("FETCH_LIMIT", "80"))
MAX_POST_AGE_DAYS = int(os.getenv("MAX_POST_AGE_DAYS", "45"))
REQUIRE_PRICE = os.getenv("REQUIRE_PRICE", "1") == "1"
BATCH_SIZE = int(os.getenv("BATCH_SIZE", "30"))
SLEEP_BASE = int(os.getenv("SLEEP_BASE_SEC", "900"))

if not (API_ID and API_HASH and SESSION_B64 and DATABASE_URL and CHANNELS_RAW.strip()):
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å TG_API_ID, TG_API_HASH, TG_SESSION_B64, DATABASE_URL –∏ CHANNELS –≤ .env")

def _normalize_channel(s: str) -> str:
    s = (s or "").strip()
    if not s:
        return s
    s = s.replace("https://t.me/", "@").replace("t.me/", "@")
    if not s.startswith("@") and s.isalnum():
        s = "@" + s
    return s

CHANNELS: List[str] = [_normalize_channel(c) for c in CHANNELS_RAW.split(",") if _normalize_channel(c)]

# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ edits –¥–µ—Ä–∂–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è chat_id <-> '@username'
CH_ID2NAME: Dict[int, str] = {}
CH_NAME2ID: Dict[str, int] = {}

# ======================= –ë–î =======================
def get_conn():
    return connect(DATABASE_URL, autocommit=True, row_factory=dict_row)

def ensure_schema_and_indexes():
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω—É–∂–Ω–æ–µ –≤ –ë–î –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    with get_conn() as conn, conn.cursor() as cur:
        # tours: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        cur.execute("ALTER TABLE IF EXISTS tours ADD COLUMN IF NOT EXISTS board TEXT;")
        cur.execute("ALTER TABLE IF EXISTS tours ADD COLUMN IF NOT EXISTS includes TEXT;")
        # —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É+—Å–æ–æ–±—â–µ–Ω–∏—é
        cur.execute("""
            CREATE UNIQUE INDEX IF NOT EXISTS tours_src_msg_uidx
            ON tours (source_chat, message_id);
        """)
        cur.execute("""
            CREATE INDEX IF NOT EXISTS tours_posted_at_idx
            ON tours (posted_at DESC);
        """)
        # —á–µ–∫–ø–æ–∏–Ω—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
        cur.execute("""
            CREATE TABLE IF NOT EXISTS collect_checkpoints (
                source_chat TEXT PRIMARY KEY,
                last_msg_id BIGINT NOT NULL DEFAULT 0,
                updated_at  TIMESTAMPTZ NOT NULL DEFAULT now()
            );
        """)

def _get_cp(chat: str) -> int:
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("SELECT last_msg_id FROM collect_checkpoints WHERE source_chat=%s;", (chat,))
        row = cur.fetchone()
        return int(row["last_msg_id"]) if row and row["last_msg_id"] else 0

def _set_cp(chat: str, last_id: int):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
            INSERT INTO collect_checkpoints(source_chat, last_msg_id)
            VALUES (%s, %s)
            ON CONFLICT (source_chat) DO UPDATE SET
                last_msg_id=EXCLUDED.last_msg_id,
                updated_at=now();
        """, (chat, int(last_id)))

# ======================= UPSERT/SELECT =======================
SQL_UPSERT_TOUR = """
INSERT INTO tours(
    country, city, hotel, price, currency, dates, description,
    source_url, posted_at, message_id, source_chat, stable_key,
    board, includes
)
VALUES (
    %(country)s, %(city)s, %(hotel)s, %(price)s, %(currency)s, %(dates)s, %(description)s,
    %(source_url)s, %(posted_at)s, %(message_id)s, %(source_chat)s, %(stable_key)s,
    %(board)s, %(includes)s
)
ON CONFLICT (message_id, source_chat) DO UPDATE SET
    country     = COALESCE(EXCLUDED.country, tours.country),
    city        = COALESCE(EXCLUDED.city, tours.city),
    hotel       = COALESCE(EXCLUDED.hotel, tours.hotel),
    price       = COALESCE(EXCLUDED.price, tours.price),
    currency    = COALESCE(EXCLUDED.currency, tours.currency),
    dates       = COALESCE(EXCLUDED.dates, tours.dates),
    description = COALESCE(EXCLUDED.description, tours.description),
    source_url  = COALESCE(EXCLUDED.source_url, tours.source_url),
    posted_at   = COALESCE(EXCLUDED.posted_at, tours.posted_at),
    stable_key  = COALESCE(EXCLUDED.stable_key, tours.stable_key),
    board       = COALESCE(EXCLUDED.board, tours.board),
    includes    = COALESCE(EXCLUDED.includes, tours.includes);
"""

def save_tours_bulk(rows: list[dict]):
    """–ë–∞—Ç—á-–∞–ø—Å–µ—Ä—Ç—ã: –±—ã—Å—Ç—Ä–µ–µ –∏ —É—Å—Ç–æ–π—á–∏–≤–µ–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π."""
    if not rows:
        return
    try:
        with get_conn() as conn, conn.cursor() as cur:
            cur.executemany(SQL_UPSERT_TOUR, rows)
        logging.info("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª/–æ–±–Ω–æ–≤–∏–ª –±–∞—Ç—á: %d —à—Ç.", len(rows))
    except Exception as e:
        logging.warning("‚ö†Ô∏è Bulk upsert failed, fallback to single. Reason: %s", e)
        for r in rows:
            try:
                with get_conn() as conn, conn.cursor() as cur:
                    cur.execute(SQL_UPSERT_TOUR, r)
            except Exception as ee:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—É—Ä–∞ (msg_id=%s chat=%s): %s",
                              r.get("message_id"), r.get("source_chat"), ee)

def get_existing_row(source_chat: str, message_id: int) -> Optional[dict]:
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
            SELECT country, city, hotel, price, currency, dates, description,
                   source_url, posted_at, message_id, source_chat, stable_key,
                   board, includes
            FROM tours
            WHERE source_chat=%s AND message_id=%s
            LIMIT 1
        """, (source_chat, message_id))
        return cur.fetchone()

# ======================= –°–õ–û–í–ê–†–ò/–†–ï–ì–ï–ö–° =======================
WHITELIST_SUFFIXES = [
    # EN
    " hotel", " resort", " inn", " lodge", " suites", " villa", " villas", " bungalow", " bungalows",
    " palace", " spa", " beach", " residence", " residences", " apartments", " apart", " apart-hotel", " aparthotel",
    " guesthouse", " boutique", " camp", " deluxe", " premium",
    # RU
    " –æ—Ç–µ–ª—å", " –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞", " —Å–∞–Ω–∞—Ç–æ—Ä–∏–π", " –ø–∞–Ω—Å–∏–æ–Ω–∞—Ç", " –≤–∏–ª–ª–∞", " —Ä–µ–∑–∏–¥–µ–Ω—Å", " —Ä–µ–∑–æ—Ä—Ç",
    # UZ/TR
    " mehmonxona", " otel", " oteli",
]

BRAND_HINTS = [
    "rixos", "titanic", "voyage", "miracle", "concorde", "arcanus", "adam & eve", "maxx royal",
    "barut", "limak", "granada", "akra", "cornelia", "gloria", "susesi",
    "delphin", "alva donna", "paloma", "ic hotels", "kaya", "swandor", "regnum", "seginus",
    "hilton", "marriott", "sheraton", "radisson", "novotel", "mercure", "fairmont", "four seasons",
]

BLACKLIST_TOKENS = [
    # –≥–µ–æ-–æ–±—â–µ–µ
    "island", "atoll", "archipelago", "peninsula", "bay", "gulf", "lagoon",
    # RU/UZ
    "–æ—Å—Ç—Ä–æ–≤", "–∞—Ç–æ–ª–ª", "–∑–∞–ª–∏–≤", "–ª–∞–≥—É–Ω–∞", "–ø–æ–ª—É–æ—Å—Ç—Ä–æ–≤", "–∫—É—Ä–æ—Ä—Ç", "–ø–ª—è–∂", "–ø–æ–±–µ—Ä–µ–∂—å–µ",
    "—Ç—É—Ä—Ü–∏—è", "–µ–≥–∏–ø–µ—Ç", "–æ–∞—ç", "–æ–∞–µ", "—Ç–∞–∏–ª–∞–Ω–¥", "—É–∑–±–µ–∫–∏—Å—Ç–∞–Ω", "–º–∞–ª–¥–∏–≤—ã", "–º–∞–ª–¥–∏–≤", "—á–µ—Ä–Ω–æ–≥–æ—Ä–∏—è",
    "–∞–Ω—Ç–∞–ª–∏—è", "–∞–ª–∞–Ω–∏—è", "–±–æ–¥—Ä—É–º", "–∫–µ–º–µ—Ä", "—Å–∏–¥–µ", "–±–µ–ª–µ–∫", "—à–∞—Ä–º", "—Ö—É—Ä–≥–∞–¥–∞", "–¥–∞—Ö–∞–∞–±", "–º–∞—Ä—Å–∞ –∞–ª–∞–º",
    # EN –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä–æ—Ä—Ç—ã
    "bali", "phuket", "samui", "lombok", "zanzibar", "goa", "antalya", "alanya", "kemer", "bodrum",
    # –æ–±—â–µ–µ
    "—Ü–µ–Ω—Ç—Ä", "–ø–∞—Ä–∫", "–∞—ç—Ä–æ–ø–æ—Ä—Ç", "—Ä—ã–Ω–æ–∫", "–º–æ–ª–ª", "–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è", "downtown", "airport",
]

KNOWN_GAZETTEER = {
    "bali", "phuket", "samui", "zanzibar", "goa", "antalya", "alanya", "kemer", "side", "belek",
    "dubai", "sharm", "hurghada", "dahab", "bodrum", "istanbul", "izmir", "batumi",
    "tashkent", "samarkand", "bukhara",
}

PRICE_RE = re.compile(
    r"(?P<cur>\$|usd|eur|‚Ç¨|—Å–æ–º|—Å—É–º|uzs|—Ä—É–±|‚ÇΩ|aed|ÿØ\.ÿ•)\s*(?P<amt>[\d\s.,]{2,})|"
    r"(?P<amt2>[\d\s.,]{2,})\s*(?P<cur2>\$|usd|eur|‚Ç¨|—Å–æ–º|—Å—É–º|uzs|—Ä—É–±|‚ÇΩ|aed)",
    re.I
)
BOARD_RE = re.compile(r"\b(ai|uai|all\s*inclusive|bb|hb|fb|ro|ob|ultra\s*all)\b", re.I)
SPLIT_RE = re.compile(r"[,/\n‚Ä¢;|]\s*")

# ======================= –î–ê–¢–´ (RU/UZ) =======================
MONTHS_MAP = {
    # RU –∫—Ä–∞—Ç–∫–∏–µ
    "—è–Ω–≤": "01", "—Ñ–µ–≤": "02", "–º–∞—Ä": "03", "–∞–ø—Ä": "04", "–º–∞–π": "05", "–º–∞—è": "05",
    "–∏—é–Ω": "06", "–∏—é–ª": "07", "–∞–≤–≥": "08", "—Å–µ–Ω": "09", "—Å–µ–Ω—Ç": "09", "–æ–∫—Ç": "10", "–Ω–æ—è": "11", "–¥–µ–∫": "12",
    # RU –ø–æ–ª–Ω—ã–µ/–ø–∞–¥–µ–∂–∏
    "—è–Ω–≤–∞—Ä": "01", "—Ñ–µ–≤—Ä–∞–ª": "02", "–º–∞—Ä—Ç": "03", "–∞–ø—Ä–µ–ª": "04", "–∏—é–Ω—å": "06", "–∏—é–ª—å": "07",
    "–∞–≤–≥—É—Å—Ç": "08", "—Å–µ–Ω—Ç—è–±—Ä": "09", "–æ–∫—Ç—è–±—Ä": "10", "–Ω–æ—è–±—Ä": "11", "–¥–µ–∫–∞–±—Ä": "12",
    "—Å–µ–Ω—Ç—è–±—Ä—è": "09", "–æ–∫—Ç—è–±—Ä—è": "10", "–Ω–æ—è–±—Ä—è": "11", "–¥–µ–∫–∞–±—Ä—è": "12",
    # UZ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    "—è–Ω–≤–∞—Ä": "01", "—Ñ–µ–≤—Ä–∞–ª": "02", "–º–∞—Ä—Ç": "03", "–∞–ø—Ä–µ–ª": "04", "–º–∞–π": "05", "–∏—é–Ω": "06", "–∏—é–ª": "07",
    "–∞–≤–≥—É—Å—Ç": "08", "—Å–µ–Ω—Ç—è–±—Ä": "09", "–æ–∫—Ç—è–±—Ä": "10", "–Ω–æ—è–±—Ä": "11", "–¥–µ–∫–∞–±—Ä": "12",
    # UZ –ª–∞—Ç–∏–Ω–∏—Ü–∞
    "yanv": "01", "fevral": "02", "mart": "03", "aprel": "04", "may": "05",
    "iyun": "06", "iyul": "07", "avgust": "08", "sentabr": "09", "sent": "09",
    "oktabr": "10", "noyabr": "11", "dekabr": "12",
}

def _norm_year(y: Optional[str]) -> int:
    if not y:
        return datetime.now().year
    y = int(y)
    if y < 100:
        y += 2000 if y < 70 else 1900
    return y

def _mk_date(d, m, y) -> str:
    return f"{int(d):02d}.{int(m):02d}.{_norm_year(y):04d}"

def _month_to_mm(token: Optional[str]) -> Optional[str]:
    if not token:
        return None
    t = token.strip().lower()
    for k, mm in MONTHS_MAP.items():
        if t.startswith(k):
            return mm
    return None

def parse_dates_strict(text: str) -> Optional[str]:
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞: '12‚Äì19 —Å–µ–Ω—Ç', '12.09‚Äì19.09', '—Å 12 –ø–æ 19 —Å–µ–Ω—Ç', –æ–¥–∏–Ω–æ—á–Ω—ã–µ –¥–∞—Ç—ã."""
    t = text.strip()
    m = re.search(r"(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?\s?[‚Äì\-]\s?(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?", t)
    if m:
        d1, m1, y1, d2, m2, y2 = m.groups()
        return f"{_mk_date(d1, m1, y1)}‚Äì{_mk_date(d2, m2, y2 or y1)}"

    m = re.search(r"(\d{1,2})\s?[‚Äì\-]\s?(\d{1,2})\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë—û“ì“õ“≥]+)\w*", t, re.I)
    if m:
        d1, d2, mon = m.groups()
        mm = _month_to_mm(mon)
        if mm:
            y = datetime.now().year
            return f"{_mk_date(d1, mm, y)}‚Äì{_mk_date(d2, mm, y)}"

    m = re.search(r"(?:—Å|–±—É)\s?(\d{1,2})\s?(?:–ø–æ|—Ç–æ)\s?(\d{1,2})\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë—û“ì“õ“≥]+)\w*", t, re.I)
    if m:
        d1, d2, mon = m.groups()
        mm = _month_to_mm(mon)
        if mm:
            y = datetime.now().year
            return f"{_mk_date(d1, mm, y)}‚Äì{_mk_date(d2, mm, y)}"

    m = re.search(r"\b(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?\b", t)
    if m:
        d, mth, y = m.groups()
        return _mk_date(d, mth, y)

    m = re.search(r"\b(\d{1,2})\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë—û“ì“õ“≥]+)\w*", t)
    if m:
        d, mon = m.groups()
        mm = _month_to_mm(mon)
        if mm:
            y = datetime.now().year
            return _mk_date(d, mm, y)

    return None

# ======================= –ü–ê–†–° –•–ï–õ–ü–ï–†–´ =======================
def _amount_to_float(s: Optional[str]) -> Optional[float]:
    if not s:
        return None
    s = s.replace(' ', '').replace('\xa0', '')
    if s.count(',') == 1 and s.count('.') == 0:
        s = s.replace(',', '.')
    else:
        s = s.replace(',', '')
    try:
        return float(s)
    except Exception:
        return None

def _is_blacklisted(token: str) -> bool:
    t = token.lower()
    return t in KNOWN_GAZETTEER or any(t == b or t.endswith(b) or b in t for b in BLACKLIST_TOKENS)

def _score_hotel_candidate(text: str) -> float:
    """–°–∫–æ—Ä–∏–Ω–≥: –º–∞—Ä–∫–µ—Ä-—Å—É—Ñ—Ñ–∏–∫—Å, –±—Ä–µ–Ω–¥-—Ö–∏–Ω—Ç—ã, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, —à—Ç—Ä–∞—Ñ –∑–∞ blacklist."""
    t = text.lower()
    score = 0.0
    for suf in WHITELIST_SUFFIXES:
        if t.endswith(suf):
            score += 0.55
            break
    for bh in BRAND_HINTS:
        if bh in t:
            score += 0.25
            break
    if len(text) >= 4 and any(ch.isupper() for ch in text):
        score += 0.1
    toks = re.findall(r"[\w'-]+", t)
    if any(_is_blacklisted(tok) for tok in toks):
        score -= 0.6
    return max(0.0, min(1.0, score))

def _enum_ngrams(line: str, max_len: int = 5) -> List[str]:
    """N-gram –ø–æ –∑–∞–≥–ª–∞–≤–Ω—ã–º —Å–ª–æ–≤–∞–º: 'Rixos Premium Belek', 'Gloria Serenity Resort' –∏ —Ç.–ø."""
    tokens = re.findall(r"[\w'&.-]+", line)
    caps = [(tok, i) for i, tok in enumerate(tokens) if tok[:1].isupper() or tok.isupper()]
    spans = []
    for _, i in caps:
        for j in range(i + 1, min(i + 1 + max_len, len(tokens) + 1)):
            spans.append(" ".join(tokens[i:j]))
    return spans

def _split_candidates(raw: str) -> List[str]:
    parts = SPLIT_RE.split(raw)
    clean = [re.sub(r"\(.*?\)|\[.*?\]", "", p).strip() for p in parts]
    return [c for c in clean if c]

def strip_trailing_price_from_hotel(s: Optional[str]) -> Optional[str]:
    if not s:
        return s
    return re.sub(
        r'[\s‚Äì-]*(?:–æ—Ç\s*)?\d[\d\s.,]*\s*(?:USD|EUR|UZS|RUB|\$|‚Ç¨)\b.*$',
        '', s, flags=re.I
    ).strip()

def _extract_prices(text: str) -> Tuple[Optional[float], Optional[str]]:
    for m in PRICE_RE.finditer(text):
        g = m.groupdict()
        cur = g.get("cur") or g.get("cur2")
        amt = g.get("amt") or g.get("amt2")
        val = _amount_to_float(amt)
        if val:
            cu = (cur or '').upper()
            if cu in {"$", "US$", "USD$"}:
                cu = "USD"
            elif cu in {"‚Ç¨", "EUR‚Ç¨"}:
                cu = "EUR"
            elif cu in {"UZS", "–°–£–ú", "–°–£–ú–´", "–°–£–ú."}:
                cu = "UZS"
            elif cu in {"RUB", "–†–£–ë", "–†–£–ë."}:
                cu = "RUB"
            elif cu == "AED":
                cu = "AED"
            return val, cu
    return None, None

def _extract_board(text: str) -> Optional[str]:
    m = BOARD_RE.search(text)
    if not m:
        return None
    token = m.group(0).lower().replace(" ", "")
    if token in {"ai", "allinclusive"}:
        return "AI"
    if token in {"uai", "ultraall"}:
        return "UAI"
    if token == "bb":
        return "BB"
    if token == "hb":
        return "HB"
    if token == "fb":
        return "FB"
    if token in {"ro", "ob"}:
        return token.upper()
    return token.upper()

def _extract_includes(text: str) -> Optional[str]:
    """–ü—Ä–æ—Å—Ç–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Ç–æ–≥–æ, —á—Ç–æ —á–∞—Å—Ç–æ –ø–∏—à—É—Ç –∫–∞–∫ ¬´–≤–∫–ª—é—á–µ–Ω–æ¬ª."""
    low = text.lower()
    flags = []
    if re.search(r"\b–ø–µ—Ä–µ–ª[–µ—ë]—Ç|–∞–≤–∏–∞\b|flight|air", low):       flags.append("–ø–µ—Ä–µ–ª—ë—Ç")
    if re.search(r"\b—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä|transfer\b", low):               flags.append("—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä")
    if re.search(r"\b—Å—Ç—Ä–∞—Ö–æ–≤–∫|insurance\b", low):              flags.append("—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞")
    if re.search(r"\b–≤–∏–∑–∞|visa\b", low):                       flags.append("–≤–∏–∑–∞")
    if re.search(r"\b—ç–∫—Å–∫—É—Ä—Å(–∏—è|–∏–∏)|excursion\b", low):        flags.append("—ç–∫—Å–∫—É—Ä—Å–∏–∏")
    if re.search(r"\b–Ω–∞–ª–æ–≥–∏|tax(es)?\b", low):                 flags.append("–Ω–∞–ª–æ–≥–∏")
    if re.search(r"\b–±–∞–≥–∞–∂|luggage|baggage\b", low):           flags.append("–±–∞–≥–∞–∂")
    if not flags:
        return None
    return ", ".join(dict.fromkeys(flags))[:120]

# ======================= –ì–ï–û =======================
CITY2COUNTRY = {
    "–ù—è—á–∞–Ω–≥": "–í—å–µ—Ç–Ω–∞–º", "–ê–Ω—Ç–∞–ª—å—è": "–¢—É—Ä—Ü–∏—è", "–ü—Ö—É–∫–µ—Ç": "–¢–∞–∏–ª–∞–Ω–¥",
    "–ü–∞—Ç—Ç–∞–π—è": "–¢–∞–∏–ª–∞–Ω–¥", "–°–∞–º—É–∏": "–¢–∞–∏–ª–∞–Ω–¥", "–ö—Ä–∞–±–∏": "–¢–∞–∏–ª–∞–Ω–¥",
    "–ë–∞–Ω–≥–∫–æ–∫": "–¢–∞–∏–ª–∞–Ω–¥", "–î—É–±–∞–π": "–û–ê–≠", "–ë–∞–ª–∏": "–ò–Ω–¥–æ–Ω–µ–∑–∏—è",
    "–¢–±–∏–ª–∏—Å–∏": "–ì—Ä—É–∑–∏—è", "–®–∞—Ä–º": "–ï–≥–∏–ø–µ—Ç", "–•—É—Ä–≥–∞–¥–∞": "–ï–≥–∏–ø–µ—Ç",
}

def guess_country(city: Optional[str]) -> Optional[str]:
    if not city:
        return None
    return CITY2COUNTRY.get(city)

# ======================= –ü–ê–†–° –ü–û–°–¢–ê =======================
def _extract_hotels(cleaned: str) -> List[str]:
    """–î–æ—Å—Ç–∞—ë–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –æ—Ç–µ–ª–µ–π –∏–∑ –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    hotels: List[str] = []
    for block in SPLIT_RE.split(cleaned):
        block = block.strip()
        if not block:
            continue
        ngrams = _enum_ngrams(block)
        candidates = []
        for span in ngrams:
            span_norm = strip_trailing_price_from_hotel(span)
            if not span_norm:
                continue
            score = _score_hotel_candidate(span_norm)
            if score >= 0.6:
                candidates.append((score, span_norm))
        candidates.sort(key=lambda x: (x[0], len(x[1])), reverse=True)
        if candidates:
            top = candidates[0][1]
            toks = re.findall(r"[\w'-]+", top.lower())
            if not any(tok in KNOWN_GAZETTEER for tok in toks):
                hotels.append(top)
    # —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è
    seen = set()
    uniq: List[str] = []
    for h in hotels:
        k = h.lower()
        if k not in seen:
            seen.add(k)
            uniq.append(h)
    return uniq[:5]

def parse_post(text: str, link: str, msg_id: int, chat: str, posted_at: datetime):
    """–†–∞–∑–±–æ—Ä –ø–æ—Å—Ç–∞ (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫), —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –º—É—Å–æ—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç–∞–º."""
    raw = text or ""
    cleaned = San.clean_text(raw)
    draft = TourDraft.from_raw(cleaned)

    # –≥–æ—Ä–æ–¥ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
    city_match = re.search(r"(–ë–∞–ª–∏|–î—É–±–∞–π|–ù—è—á–∞–Ω–≥|–ê–Ω—Ç–∞–ª—å—è|–ü—Ö—É–∫–µ—Ç|–ü–∞—Ç—Ç–∞–π—è|–ö—Ä–∞–±–∏|–¢–±–∏–ª–∏—Å–∏|–®–∞—Ä–º|–•—É—Ä–≥–∞–¥–∞)", cleaned, re.I)
    city = city_match.group(1) if city_match else (draft.city if getattr(draft, 'city', None) else None)
    if not city:
        m = re.search(r"\b([–ê-–Ø–Å][–∞-—è—ë]+)\b", cleaned)
        city = m.group(1) if m else None

    # –æ—Ç–µ–ª–∏ (–º—É–ª—å—Ç–∏-–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ)
    hotels = _extract_hotels(cleaned)
    hotel = hotels[0] if hotels else (strip_trailing_price_from_hotel(draft.hotel) if draft.hotel else None)

    # –¥–∞—Ç—ã
    dates = parse_dates_strict(cleaned) or draft.dates

    # —Ü–µ–Ω–∞/–≤–∞–ª—é—Ç–∞
    price, currency = draft.price, draft.currency
    if price is None or currency is None:
        price, currency = _extract_prices(cleaned)

    if currency:
        cu = str(currency).strip().upper()
        if cu in {"$", "US$", "USD$"}:   currency = "USD"
        elif cu in {"‚Ç¨", "EUR‚Ç¨"}:        currency = "EUR"
        elif cu in {"UZS", "–°–£–ú", "–°–£–ú–´", "–°–£–ú."}: currency = "UZS"
        elif cu in {"RUB", "–†–£–ë", "–†–£–ë."}:          currency = "RUB"
        elif cu == "AED":                 currency = "AED"
        else:                             currency = cu
    else:
        low = cleaned.lower()
        if "—Å—É–º" in low or "uzs" in low:  currency = "UZS"
        elif "eur" in low or "‚Ç¨" in low:  currency = "EUR"
        elif "usd" in low or "$" in low:  currency = "USD"
        elif "aed" in low:                currency = "AED"

    board = _extract_board(cleaned)
    includes = _extract_includes(cleaned)

    payload_base = {
        "country": guess_country(city) if city else None,
        "city": city,
        "price": price,
        "currency": currency,
        "dates": dates,
        "description": cleaned[:500],
        "source_url": link,
        # TIMESTAMPTZ: Telethon –¥–∞—ë—Ç aware-–≤—Ä–µ–º—è; –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ UTC
        "posted_at": posted_at.astimezone(timezone.utc),
        "message_id": msg_id,
        "source_chat": chat,
        "board": board,
        "includes": includes,
    }

    return payload_base, (hotels if hotels else [hotel] if hotel else [])

# ======================= COLLECT ONCE =======================
async def collect_once(client: TelegramClient):
    """–û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º —Å –±–∞—Ç—á-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏."""
    now_utc = datetime.now(timezone.utc)
    cutoff = now_utc - timedelta(days=MAX_POST_AGE_DAYS)

    for channel in CHANNELS:
        logging.info("üì• –ö–∞–Ω–∞–ª: %s", channel)
        batch: list[dict] = []
        last_id = _get_cp(channel)
        max_seen = last_id

        # —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤–µ–µ —á–µ–∫–ø–æ–∏–Ω—Ç–∞, –≤ –ø—Ä—è–º–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
        async for msg in client.iter_messages(channel, min_id=last_id, reverse=True, limit=FETCH_LIMIT):
            text = (msg.text or "").strip()
            if not text:
                continue

            # —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã —Å–∫–∏–ø–∞–µ–º
            if msg.date and msg.date < cutoff:
                continue

            def _make_rows() -> List[dict]:
                link = f"https://t.me/{channel.lstrip('@')}/{msg.id}"
                base, hotels = parse_post(
                    text, link, msg.id, channel,
                    msg.date if msg.date.tzinfo else msg.date.replace(tzinfo=timezone.utc),
                )
                rows: List[dict] = []
                for h in hotels:
                    if not h:
                        continue
                    row = {**base, "hotel": h}
                    row["stable_key"] = build_tour_key(
                        source_chat=base["source_chat"],
                        message_id=base["message_id"],
                        city=base.get("city") or "",
                        hotel=h,
                        price=(base.get("price"), base.get("currency")) if base.get("price") else None,
                    )
                    rows.append(row)
                # –µ—Å–ª–∏ –æ—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –±–µ–∑ —Ü–µ–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—É—Å—Ç–æ–π hotel
                if not rows and not REQUIRE_PRICE:
                    rows.append({
                        **base,
                        "hotel": None,
                        "stable_key": build_tour_key(
                            base["source_chat"], base["message_id"], base.get("city") or "", "", None
                        )
                    })
                return rows

            rows = _make_rows()
            if REQUIRE_PRICE:
                rows = [r for r in rows if (r.get("price") is not None and r.get("currency") is not None)]

            if rows:
                batch.extend(rows)
                if msg.id and msg.id > max_seen:
                    max_seen = msg.id

            # –±–∞—Ç—á-—Å–±—Ä–æ—Å
            if len(batch) >= BATCH_SIZE:
                await safe_run(
                    lambda: asyncio.to_thread(save_tours_bulk, batch.copy()),
                    RetryPolicy(attempts=4, base_delay=0.25, max_delay=2.0)
                )
                batch.clear()

        # –æ—Å—Ç–∞—Ç–æ–∫ –±–∞—Ç—á–∞ –ø–æ –∫–∞–Ω–∞–ª—É
        if batch:
            await safe_run(
                lambda: asyncio.to_thread(save_tours_bulk, batch.copy()),
                RetryPolicy(attempts=4, base_delay=0.25, max_delay=2.0)
            )
            batch.clear()

        if max_seen > last_id:
            _set_cp(channel, max_seen)
            logging.info("‚è© %s —á–µ–∫–ø–æ–∏–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: %s ‚Üí %s", channel, last_id, max_seen)
        else:
            logging.info("‚è∏ %s –±–µ–∑ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", channel)

# ======================= EDIT HANDLER =======================
async def _build_channel_maps(client: TelegramClient):
    """–ó–∞–ø–æ–ª–Ω—è–µ–º CH_ID2NAME/CH_NAME2ID –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è edits."""
    CH_ID2NAME.clear()
    CH_NAME2ID.clear()
    for ch in CHANNELS:
        try:
            ent = await client.get_entity(ch)
            # –µ—Å–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª ‚Äî –±–µ—Ä—ë–º username, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è –∏–∑ ENV
            name = f"@{ent.username}" if getattr(ent, "username", None) else ch
            CH_ID2NAME[int(ent.id)] = name
            CH_NAME2ID[name] = int(ent.id)
        except Exception as e:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è %s: %s", ch, e)

def _merge_with_existing_preserve_nulls(new_row: dict) -> dict:
    """–ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑ –ë–î (–±–µ—Ä–µ–∂–Ω—ã–π –∞–ø–¥–µ–π—Ç)."""
    existing = get_existing_row(new_row["source_chat"], new_row["message_id"])
    if not existing:
        return new_row
    merged = {**existing}
    for k in ("country", "city", "hotel", "price", "currency", "dates",
              "description", "source_url", "posted_at", "stable_key", "board", "includes"):
        v = new_row.get(k)
        if v is not None and v != "":
            merged[k] = v
    # –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ select, –Ω–æ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è –∞–ø—Å–µ—Ä—Ç–∞
    merged["message_id"] = new_row["message_id"]
    merged["source_chat"] = new_row["source_chat"]
    return merged

async def handle_edit_event(event: events.MessageEdited.Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –ø–µ—Ä–µ–ø–∞—Ä—Å –∏ –±–µ—Ä–µ–∂–Ω—ã–π –∞–ø–¥–µ–π—Ç –∑–∞–ø–∏—Å–∏."""
    chat_id = event.chat_id
    channel = CH_ID2NAME.get(int(chat_id))
    if not channel:
        # –Ω–µ –Ω–∞—à –∫–∞–Ω–∞–ª ‚Äî –∏–≥–Ω–æ—Ä
        return

    text = (event.text or "").strip()
    if not text:
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ username –µ—Å—Ç—å)
    try:
        ent = await event.get_chat()
        if getattr(ent, "username", None):
            link = f"https://t.me/{ent.username}/{event.message.id}"
        else:
            link = f"https://t.me/{channel.lstrip('@')}/{event.message.id}" if channel.startswith("@") else ""
    except Exception:
        link = f"https://t.me/{channel.lstrip('@')}/{event.message.id}" if channel.startswith("@") else ""

    base, hotels = parse_post(
        text, link, event.message.id, channel,
        event.message.date if event.message.date.tzinfo else event.message.date.replace(tzinfo=timezone.utc)
    )

    # –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∞–ø–¥–µ–π—Ç–∞ (—É –Ω–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ (message_id, source_chat))
    hotel = hotels[0] if hotels else None
    row = {
        **base,
        "hotel": hotel,
        "stable_key": build_tour_key(
            source_chat=base["source_chat"],
            message_id=base["message_id"],
            city=base.get("city") or "",
            hotel=hotel or "",
            price=(base.get("price"), base.get("currency")) if base.get("price") else None,
        )
    }

    # –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω REQUIRE_PRICE –∏ –Ω–æ–≤–∞—è –ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ü–µ–Ω—ã ‚Äî –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    if REQUIRE_PRICE and (row.get("price") is None or row.get("currency") is None):
        row = _merge_with_existing_preserve_nulls(row)
    else:
        # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏–º–µ–Ω—è–µ–º ¬´–±–µ—Ä–µ–∂–Ω—ã–π¬ª merge, —á—Ç–æ–±—ã –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –Ω–µ —Å—Ç–∏—Ä–∞—Ç—å –ø—Ä–µ–∂–Ω–∏–µ
        row = _merge_with_existing_preserve_nulls(row)

    save_tours_bulk([row])
    logging.info("‚úèÔ∏è Edit –æ–±–Ω–æ–≤–∏–ª %s #%s", channel, event.message.id)

# ======================= RUN =======================
async def run_collector():
    ensure_schema_and_indexes()
    client = TelegramClient(StringSession(SESSION_B64), API_ID, API_HASH)
    await client.start()
    await _build_channel_maps(client)

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ edits –≥–ª–æ–±–∞–ª—å–Ω–æ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—à–∏–º –∫–∞–Ω–∞–ª–∞–º –≤–Ω—É—Ç—Ä–∏.
    client.add_event_handler(handle_edit_event, events.MessageEdited())

    logging.info("‚úÖ Collector –∑–∞–ø—É—â–µ–Ω. –ö–∞–Ω–∞–ª—ã: %s", ", ".join(CHANNELS))

    while True:
        try:
            await collect_once(client)
        except Exception as e:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ: %s", e)
        # –ª—ë–≥–∫–∏–π –¥–∂–∏—Ç—Ç–µ—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø–æ –º–∏–Ω—É—Ç–∞–º
        await asyncio.sleep(SLEEP_BASE + int(10 * (os.getpid() % 3)))

if __name__ == "__main__":
    asyncio.run(run_collector())
