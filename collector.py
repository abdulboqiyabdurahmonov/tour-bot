import os
import re
import logging
import asyncio
from datetime import datetime, timedelta

from telethon import TelegramClient
from psycopg import connect

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ============ ENV ============
API_ID = int(os.getenv("TG_API_ID"))
API_HASH = os.getenv("TG_API_HASH")
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")  # ‚úÖ –ª–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –±–æ—Ç
SESSION_NAME = os.getenv("TG_SESSION", "collector_session")
CHANNELS = [c.strip() for c in os.getenv("CHANNELS", "").split(",") if c.strip()]
DATABASE_URL = os.getenv("DATABASE_URL")

if not API_ID or not API_HASH or not BOT_TOKEN or not CHANNELS:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å TG_API_ID, TG_API_HASH, TG_BOT_TOKEN –∏ CHANNELS –≤ .env")

# ============ –ë–î ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True)

def save_tour(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä –≤ PostgreSQL"""
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
            INSERT INTO tours (country, city, hotel, price, currency, dates, description, source_url, posted_at)
            VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)
            ON CONFLICT DO NOTHING;
        """, (
            data.get("country"),
            data.get("city"),
            data.get("hotel"),
            data.get("price"),
            data.get("currency"),
            data.get("dates"),
            data.get("description"),
            data.get("source_url"),
            data.get("posted_at")
        ))

# ============ –ü–ê–†–°–ï–† ============
MONTHS = {
    "—è–Ω–≤": "01", "—Ñ–µ–≤": "02", "–º–∞—Ä": "03", "–∞–ø—Ä": "04", "–º–∞–π": "05", "–º–∞—è": "05",
    "–∏—é–Ω": "06", "–∏—é–ª": "07", "–∞–≤–≥": "08", "—Å–µ–Ω": "09", "—Å–µ–Ω—Ç": "09",
    "–æ–∫—Ç": "10", "–Ω–æ—è": "11", "–¥–µ–∫": "12"
}

def parse_dates(text: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # 01.09‚Äì10.09
    m = re.search(r"(\d{1,2})[.\-/](\d{1,2})(?:[.\-/](\d{2,4}))?\s?[‚Äì\-]\s?(\d{1,2})[.\-/](\d{1,2})(?:[.\-/](\d{2,4}))?", text)
    if m:
        d1, m1, y1, d2, m2, y2 = m.groups()
        return f"{d1.zfill(2)}.{m1.zfill(2)}.{y1 or datetime.now().year}‚Äì{d2.zfill(2)}.{m2.zfill(2)}.{y2 or datetime.now().year}"

    # 15‚Äì25 —Å–µ–Ω—Ç—è–±—Ä—è
    m = re.search(r"(\d{1,2})\s?[‚Äì\-]\s?(\d{1,2})\s?(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞—è|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|—Å–µ–Ω—Ç|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫)\w*", text, re.I)
    if m:
        d1, d2, mon = m.groups()
        return f"{d1.zfill(2)}.{MONTHS[mon[:3].lower()]}.{datetime.now().year}‚Äì{d2.zfill(2)}.{MONTHS[mon[:3].lower()]}.{datetime.now().year}"

    # —Å 5 –ø–æ 12 –æ–∫—Ç—è–±—Ä—è
    m = re.search(r"—Å\s?(\d{1,2})\s?–ø–æ\s?(\d{1,2})\s?(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞—è|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|—Å–µ–Ω—Ç|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫)\w*", text, re.I)
    if m:
        d1, d2, mon = m.groups()
        return f"{d1.zfill(2)}.{MONTHS[mon[:3].lower()]}.{datetime.now().year}‚Äì{d2.zfill(2)}.{MONTHS[mon[:3].lower()]}.{datetime.now().year}"

    return None

def parse_post(text: str, link: str):
    """–†–∞–∑–±–æ—Ä –ø–æ—Å—Ç–∞ (—Ü–µ–Ω–∞, –≥–æ—Ä–æ–¥, –æ—Ç–µ–ª—å, –≤–∞–ª—é—Ç–∞, –¥–∞—Ç—ã)"""
    price_match = re.search(r"(\d{2,6})\s?(USD|EUR|–°–£–ú|—Å—É–º|—Ä—É–±)", text, re.I)
    city_match = re.search(r"(–ë–∞–ª–∏|–î—É–±–∞–π|–ù—è—á–∞–Ω–≥|–ê–Ω—Ç–∞–ª—å—è|–ü—Ö—É–∫–µ—Ç|–¢–±–∏–ª–∏—Å–∏)", text)
    hotel_match = re.search(r"(Hotel|–û—Ç–µ–ª—å|Resort|Inn|Palace|Hilton|Marriott)\s?[^\n]*", text)
    dates_match = parse_dates(text)

    return {
        "country": guess_country(city_match.group(1)) if city_match else None,
        "city": city_match.group(1) if city_match else None,
        "hotel": hotel_match.group(0) if hotel_match else None,
        "price": float(price_match.group(1)) if price_match else None,
        "currency": price_match.group(2).upper() if price_match else None,
        "dates": dates_match,
        "description": text[:500],
        "source_url": link,
        "posted_at": datetime.utcnow()
    }

def guess_country(city: str):
    mapping = {
        "–ù—è—á–∞–Ω–≥": "–í—å–µ—Ç–Ω–∞–º",
        "–ê–Ω—Ç–∞–ª—å—è": "–¢—É—Ä—Ü–∏—è",
        "–ü—Ö—É–∫–µ—Ç": "–¢–∞–∏–ª–∞–Ω–¥",
        "–î—É–±–∞–π": "–û–ê–≠",
        "–ë–∞–ª–∏": "–ò–Ω–¥–æ–Ω–µ–∑–∏—è",
        "–¢–±–∏–ª–∏—Å–∏": "–ì—Ä—É–∑–∏—è"
    }
    return mapping.get(city, None)

# ============ –ö–û–õ–õ–ï–ö–¢–û–† ============
async def collect_once(client: TelegramClient):
    """–û–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω —Å–±–æ—Ä–∞ —Ç—É—Ä–æ–≤"""
    since = datetime.utcnow() - timedelta(hours=24)

    for channel in CHANNELS:
        logging.info(f"üì• –ß–∏—Ç–∞—é –∫–∞–Ω–∞–ª: {channel}")
        async for msg in client.iter_messages(channel, limit=50):
            if not msg.text:
                continue
            if msg.date.replace(tzinfo=None) < since:
                break

            data = parse_post(msg.text, f"https://t.me/{channel.strip('@')}/{msg.id}")
            save_tour(data)
            logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª —Ç—É—Ä: {data}")

async def run_collector():
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    await client.start(bot_token=BOT_TOKEN)  # ‚úÖ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ –±–æ—Ç
    logging.info("‚úÖ Collector started")

    while True:
        try:
            await collect_once(client)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ: {e}")
        await asyncio.sleep(900)  # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    asyncio.run(run_collector())
