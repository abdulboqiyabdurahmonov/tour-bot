import os
import asyncio
import logging
from datetime import datetime
from telethon import TelegramClient, events
from psycopg import connect

# ===== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(level=logging.INFO)

# ===== ENV =====
API_ID = int(os.getenv("TG_API_ID"))
API_HASH = os.getenv("TG_API_HASH")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNELS = os.getenv("CHANNELS", "").split(",")

PG_HOST = os.getenv("POSTGRES_HOST")
PG_PORT = os.getenv("POSTGRES_PORT", "5432")
PG_USER = os.getenv("POSTGRES_USER")
PG_PASSWORD = os.getenv("POSTGRES_PASSWORD")
PG_DB = os.getenv("POSTGRES_DB")

# ===== –ë–î =====
def get_conn():
    return connect(
        host=PG_HOST,
        port=PG_PORT,
        user=PG_USER,
        password=PG_PASSWORD,
        dbname=PG_DB,
        autocommit=True
    )

def init_db():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
        CREATE TABLE IF NOT EXISTS tours (
            id SERIAL PRIMARY KEY,
            channel TEXT,
            country TEXT,
            city TEXT,
            price NUMERIC,
            currency TEXT,
            message TEXT,
            date TIMESTAMP
        )
        """)
    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ tours –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def handle_message(event, channel):
    text = event.message.message
    date = event.message.date

    # –ø–∞—Ä—Å–∏–º —Ü–µ–Ω—É
    price, currency = None, None
    for word in text.split():
        if word.isdigit():
            price = int(word)
        if word.upper() in ["USD", "EUR", "SUM", "–°–£–ú"]:
            currency = word.upper()

    # –∏—â–µ–º —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥
    country, city = None, None
    for kw in ["–¢—É—Ä—Ü–∏—è", "–ï–≥–∏–ø–µ—Ç", "–¢–∞–∏–ª–∞–Ω–¥", "–û–ê–≠", "–í—å–µ—Ç–Ω–∞–º", "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω"]:
        if kw.lower() in text.lower():
            country = kw
    for kw in ["–°—Ç–∞–º–±—É–ª", "–ê–Ω—Ç–∞–ª–∏—è", "–•—É—Ä–≥–∞–¥–∞", "–ù—è—á–∞–Ω–≥", "–ë–∞–Ω–≥–∫–æ–∫", "–î—É–±–∞–π"]:
        if kw.lower() in text.lower():
            city = kw

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
            INSERT INTO tours(channel, country, city, price, currency, message, date)
            VALUES (%s,%s,%s,%s,%s,%s,%s)
        """, (channel, country, city, price, currency, text, date))

    logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç—É—Ä –∏–∑ {channel}: {country} {city} {price}{currency}")

# ===== –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å =====
async def main():
    init_db()
    client = TelegramClient("collector_bot", API_ID, API_HASH).start(bot_token=BOT_TOKEN)

    for ch in CHANNELS:
        try:
            entity = await client.get_entity(ch.strip())
            @client.on(events.NewMessage(chats=entity))
            async def handler(event, ch_name=ch):
                await handle_message(event, ch_name)
            logging.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É {ch}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {ch}: {e}")

    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
