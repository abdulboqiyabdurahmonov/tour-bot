import os
import re
import logging
import asyncio
from datetime import datetime

from telethon.sessions import StringSession
from telethon import TelegramClient
from psycopg import connect

# >>> SAN: imports
from utils.sanitazer import (
    San, TourDraft, build_tour_key,
    safe_run, RetryPolicy
)
# <<< SAN: imports

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ============ ENV ============
API_ID = int(os.getenv("TG_API_ID"))
API_HASH = os.getenv("TG_API_HASH")
SESSION_B64 = os.getenv("TG_SESSION_B64")
CHANNELS = os.getenv("CHANNELS", "").split(",")  # –ø—Ä–∏–º–µ—Ä: @tour1,@tour2
DATABASE_URL = os.getenv("DATABASE_URL")

if not API_ID or not API_HASH or not SESSION_B64 or not CHANNELS:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å TG_API_ID, TG_API_HASH, TG_SESSION_B64 –∏ CHANNELS –≤ .env")

# ============ –ë–î ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True)

# >>> SAN: UPSERT —Å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é + stable_key
SQL_UPSERT_TOUR = """
INSERT INTO tours(
    country, city, hotel, price, currency, dates, description,
    source_url, posted_at, message_id, source_chat, stable_key
)
VALUES (%(country)s, %(city)s, %(hotel)s, %(price)s, %(currency)s, %(dates)s, %(description)s,
        %(source_url)s, %(posted_at)s, %(message_id)s, %(source_chat)s, %(stable_key)s)
ON CONFLICT (message_id, source_chat) DO UPDATE SET
    country     = EXCLUDED.country,
    city        = EXCLUDED.city,
    hotel       = EXCLUDED.hotel,
    price       = EXCLUDED.price,
    currency    = EXCLUDED.currency,
    dates       = EXCLUDED.dates,
    description = EXCLUDED.description,
    source_url  = EXCLUDED.source_url,
    posted_at   = EXCLUDED.posted_at,
    stable_key  = EXCLUDED.stable_key;
"""

def save_tour(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä –≤ PostgreSQL (–±–µ–∑ —Ñ–æ—Ç–æ), —É—Å—Ç–æ–π—á–∏–≤–æ –∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ."""
    try:
        with get_conn() as conn, conn.cursor() as cur:
            cur.execute(SQL_UPSERT_TOUR, data)
            logging.info(
                f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª/–æ–±–Ω–æ–≤–∏–ª —Ç—É—Ä: {data.get('city')} | {data.get('price')} {data.get('currency')} "
                f"(msg={data.get('message_id')}, key={data.get('stable_key')})"
            )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—É—Ä–∞: {e}")
# <<< SAN: UPSERT


# ============ –ü–ê–†–°–ï–† (—Ç–≤–æ–∏ —Ö–µ–ª–ø–µ—Ä—ã –æ—Å—Ç–∞–≤–∏–ª; –≤—Å—Ç—Ä–æ–∏–ª San/TourDraft) ============
MONTHS = {
    "—è–Ω–≤": "01", "—Ñ–µ–≤": "02", "–º–∞—Ä": "03", "–∞–ø—Ä": "04", "–º–∞–π": "05", "–º–∞—è": "05",
    "–∏—é–Ω": "06", "–∏—é–ª": "07", "–∞–≤–≥": "08", "—Å–µ–Ω": "09", "—Å–µ–Ω—Ç": "09",
    "–æ–∫—Ç": "10", "–Ω–æ—è": "11", "–¥–µ–∫": "12"
}

def _norm_year(y: str | None) -> int:
    if not y:
        return datetime.now().year
    y = int(y)
    if y < 100:
        y += 2000 if y < 70 else 1900
    return y

def _mk_date(d, m, y) -> str:
    return f"{int(d):02d}.{int(m):02d}.{_norm_year(y):04d}"

def parse_dates(text: str) -> str | None:
    text = text.strip()

    # dd.mm(.yy|yyyy)?‚Äìdd.mm(.yy|yyyy)?
    m = re.search(r"(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?\s?[‚Äì\-]\s?(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?", text)
    if m:
        d1, m1, y1, d2, m2, y2 = m.groups()
        return f"{_mk_date(d1, m1, y1)}‚Äì{_mk_date(d2, m2, y2 or y1)}"

    # dd‚Äìdd mon
    m = re.search(r"(\d{1,2})\s?[‚Äì\-]\s?(\d{1,2})\s?(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞—è|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|—Å–µ–Ω—Ç|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫)\w*", text, re.I)
    if m:
        d1, d2, mon = m.groups()
        mm = MONTHS[mon[:3].lower()]
        y = datetime.now().year
        return f"{_mk_date(d1, mm, y)}‚Äì{_mk_date(d2, mm, y)}"

    # —Å d –ø–æ d mon
    m = re.search(r"—Å\s?(\d{1,2})\s?–ø–æ\s?(\d{1,2})\s?(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞—è|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|—Å–µ–Ω—Ç|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫)\w*", text, re.I)
    if m:
        d1, d2, mon = m.groups()
        mm = MONTHS[mon[:3].lower()]
        y = datetime.now().year
        return f"{_mk_date(d1, mm, y)}‚Äì{_mk_date(d2, mm, y)}"

    return None

def clean_text_basic(s: str | None) -> str | None:
    if not s:
        return s
    s = re.sub(r'[*_`]+', '', s)
    s = s.replace('|', ' ')
    s = re.sub(r'\s{2,}', ' ', s)
    return s.strip()

def strip_trailing_price_from_hotel(s: str | None) -> str | None:
    if not s:
        return s
    return re.sub(
        r'[\s‚Äì-]*(?:–æ—Ç\s*)?\d[\d\s.,]*\s*(?:USD|EUR|UZS|RUB|\$|‚Ç¨)\b.*$',
        '',
        s,
        flags=re.I
    ).strip()

def guess_country(city: str | None):
    if not city:
        return None
    mapping = {
        "–ù—è—á–∞–Ω–≥": "–í—å–µ—Ç–Ω–∞–º", "–ê–Ω—Ç–∞–ª—å—è": "–¢—É—Ä—Ü–∏—è", "–ü—Ö—É–∫–µ—Ç": "–¢–∞–∏–ª–∞–Ω–¥",
        "–ü–∞—Ç—Ç–∞–π—è": "–¢–∞–∏–ª–∞–Ω–¥", "–°–∞–º—É–∏": "–¢–∞–∏–ª–∞–Ω–¥", "–ö—Ä–∞–±–∏": "–¢–∞–∏–ª–∞–Ω–¥",
        "–ë–∞–Ω–≥–∫–æ–∫": "–¢–∞–∏–ª–∞–Ω–¥", "–î—É–±–∞–π": "–û–ê–≠", "–ë–∞–ª–∏": "–ò–Ω–¥–æ–Ω–µ–∑–∏—è",
        "–¢–±–∏–ª–∏—Å–∏": "–ì—Ä—É–∑–∏—è",
    }
    return mapping.get(city, None)

def _amount_to_float(s: str | None) -> float | None:
    if not s:
        return None
    s = s.replace(' ', '').replace('\xa0', '')
    # –∑–∞–ø—è—Ç–∞—è –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π
    if s.count(',') == 1 and s.count('.') == 0:
        s = s.replace(',', '.')
    else:
        s = s.replace(',', '')
    try:
        return float(s)
    except Exception:
        return None


# >>> SAN: –µ–¥–∏–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ San/TourDraft + —Ç–≤–æ–∏ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
def parse_post(text: str, link: str, msg_id: int, chat: str, posted_at: datetime):
    """–†–∞–∑–±–æ—Ä –ø–æ—Å—Ç–∞ (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫), —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –º—É—Å–æ—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç–∞–º."""
    raw = text or ""
    # 1) –ñ—ë—Å—Ç–∫–∞—è —á–∏—Å—Ç–∫–∞, —á—Ç–æ–±—ã regex-—ã –Ω–µ —Å—ã–ø–∞–ª–∏—Å—å
    cleaned = San.clean_text(raw)

    # 2) –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ –Ω–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    draft = TourDraft.from_raw(cleaned)

    # 3) –ì–æ—Ä–æ–¥/–æ—Ç–µ–ª—å/–¥–∞—Ç—ã: –¥–æ–ø–æ–ª–Ω—è–µ–º —Ç–≤–æ–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
    city_match = re.search(r"(–ë–∞–ª–∏|–î—É–±–∞–π|–ù—è—á–∞–Ω–≥|–ê–Ω—Ç–∞–ª—å—è|–ü—Ö—É–∫–µ—Ç|–¢–±–∏–ª–∏—Å–∏)", cleaned, re.I)
    city = city_match.group(1) if city_match else None
    if not city:
        m = re.search(r"\b([–ê-–Ø–Å][–∞-—è—ë]+)\b", cleaned)
        city = m.group(1) if m else None

    hotel_match = re.search(r"(Hotel|–û—Ç–µ–ª—å|Resort|Inn|Palace|Hilton|Marriott)\s?[^\n]*", cleaned)
    hotel = strip_trailing_price_from_hotel(hotel_match.group(0)) if hotel_match else None

    # –ï—Å–ª–∏ –Ω–∞—à –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–∞—Ç –¥–∞–ª –ø—É—Å—Ç–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Ç–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é
    dates = draft.dates or parse_dates(cleaned)

    # 4) –¶–µ–Ω–∞/–≤–∞–ª—é—Ç–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ draft, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    price, currency = draft.price, draft.currency
    if price is None or currency is None:
        price_match = re.search(
            r'(?:(?:–æ—Ç\s*)?(\d[\d\s.,]{2,}))\s*(USD|EUR|UZS|RUB|–°–£–ú|—Å—É–º|—Ä—É–±|\$|‚Ç¨)\b|(?:(USD|EUR|\$|‚Ç¨)\s*(\d[\d\s.,]{2,}))',
            cleaned, re.I
        )
        if price_match:
            if price_match.group(1) and price_match.group(2):
                price, currency = _amount_to_float(price_match.group(1)), price_match.group(2)
            elif price_match.group(3) and price_match.group(4):
                currency, price = price_match.group(3), _amount_to_float(price_match.group(4))

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞–ª—é—Ç—É
    if currency:
        cu = str(currency).strip().upper()
        if cu in {"$", "US$", "USD$"}:
            currency = "USD"
        elif cu in {"‚Ç¨", "EUR‚Ç¨"}:
            currency = "EUR"
        elif cu in {"UZS", "–°–£–ú", "–°–£–ú–´", "–°–£–ú."}:
            currency = "UZS"
        elif cu in {"RUB", "–†–£–ë", "–†–£–ë."}:
            currency = "RUB"
        else:
            currency = cu
    else:
        low = cleaned.lower()
        if "—Å—É–º" in low or "uzs" in low:
            currency = "UZS"
        elif "eur" in low or "‚Ç¨" in low:
            currency = "EUR"
        elif "usd" in low or "$" in low:
            currency = "USD"

    # 5) –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–ª—é—á ‚Äî —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –¥—É–±–ª–∏ –∏ –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
    stable_key = build_tour_key(
        source_chat=chat,
        message_id=msg_id,
        city=city or draft.city or "",
        hotel=hotel or draft.hotel or "",
        price=(price, currency) if price else None
    )

    return {
        "country": guess_country(city) if city else None,
        "city": city,
        "hotel": hotel or draft.hotel,
        "price": price,
        "currency": currency,
        "dates": dates,
        "description": cleaned[:500],
        "source_url": link,
        "posted_at": posted_at.replace(tzinfo=None),
        "message_id": msg_id,
        "source_chat": chat,
        "stable_key": stable_key,
    }
# <<< SAN: –µ–¥–∏–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥


# ============ –ö–û–õ–õ–ï–ö–¢–û–† ============
async def collect_once(client: TelegramClient):
    for channel in CHANNELS:
        channel = channel.strip()
        if not channel:
            continue
        logging.info(f"üì• –ß–∏—Ç–∞—é –∫–∞–Ω–∞–ª: {channel}")
        # >>> SAN: —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø—Ä–æ–≥–æ–Ω –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        async for msg in client.iter_messages(channel, limit=50):
            if not msg.text:
                continue
            async def _store_one():
                data = parse_post(
                    msg.text,
                    f"https://t.me/{channel.strip('@')}/{msg.id}",
                    msg.id,
                    channel,
                    msg.date
                )
                save_tour(data)

            # —Ä–µ—Ç—Ä–∞–∏ —Å backoff: –µ—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –ë–î –¥–µ—Ä–Ω—É–ª–∞—Å—å ‚Äî –ø—Ä–æ–≥–ª–æ—Ç–∏–º –∏ –ø–æ–π–¥—ë–º –¥–∞–ª—å—à–µ
            await safe_run(_store_one, RetryPolicy(attempts=5, base_delay=0.25, max_delay=3.0))
        # <<< SAN: —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø—Ä–æ–≥–æ–Ω

async def run_collector():
    client = TelegramClient(StringSession(SESSION_B64), API_ID, API_HASH)
    await client.start()
    logging.info("‚úÖ Collector –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            await collect_once(client)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ: {e}")
        # >>> SAN: –¥–∂–∏—Ç—Ç–µ—Ä —á—Ç–æ–±—ã –Ω–µ –±–∏—Ç—å—Å—è —Å rate-limit –∏ –∫—Ä–æ–Ω–æ–ø–æ–¥–æ–±–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        await asyncio.sleep(900 + int(10 * (os.getpid() % 3)))
        # <<< SAN: –¥–∂–∏—Ç—Ç–µ—Ä

if __name__ == "__main__":
    asyncio.run(run_collector())
