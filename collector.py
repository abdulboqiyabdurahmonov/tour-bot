import os
import re
import logging
import asyncio
from datetime import datetime
from io import BytesIO
from typing import Optional, Tuple

import httpx
from telethon.sessions import StringSession
from telethon import TelegramClient
from psycopg import connect

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ============ ENV ============
API_ID = int(os.getenv("TG_API_ID") or 0)
API_HASH = os.getenv("TG_API_HASH")
SESSION_B64 = os.getenv("TG_SESSION_B64")
CHANNELS = [c.strip() for c in os.getenv("CHANNELS", "").split(",") if c.strip()]  # –ø—Ä–∏–º–µ—Ä: @tour1,@tour2
DATABASE_URL = os.getenv("DATABASE_URL")

if not API_ID or not API_HASH or not SESSION_B64 or not CHANNELS or not DATABASE_URL:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å TG_API_ID, TG_API_HASH, TG_SESSION_B64, CHANNELS –∏ DATABASE_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è telegra.ph ~5MB
TELEGRAPH_UPLOAD = "https://telegra.ph/upload"
TELEGRAPH_MAX_BYTES = 5 * 1024 * 1024

# ============ –ë–î ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True)

def save_tour(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä –≤ PostgreSQL (–∞–ø—Å–µ—Ä—Ç–æ–º –¥–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã, –µ—Å–ª–∏ –±—ã–ª–∞ –¥—É–±–ª–∏–∫–∞—Ç-–∑–∞–ø–∏—Å—å)."""
    with get_conn() as conn, conn.cursor() as cur:
        try:
            cur.execute(
                """
                INSERT INTO tours
                  (country, city, hotel, price, currency, dates, description,
                   source_url, posted_at, message_id, source_chat, photo_url)
                VALUES
                  (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)
                ON CONFLICT (message_id, source_chat) DO UPDATE SET
                  country     = COALESCE(EXCLUDED.country, tours.country),
                  city        = COALESCE(EXCLUDED.city, tours.city),
                  hotel       = COALESCE(EXCLUDED.hotel, tours.hotel),
                  price       = COALESCE(EXCLUDED.price, tours.price),
                  currency    = COALESCE(EXCLUDED.currency, tours.currency),
                  dates       = COALESCE(EXCLUDED.dates, tours.dates),
                  description = COALESCE(EXCLUDED.description, tours.description),
                  source_url  = COALESCE(EXCLUDED.source_url, tours.source_url),
                  posted_at   = COALESCE(EXCLUDED.posted_at, tours.posted_at),
                  photo_url   = COALESCE(EXCLUDED.photo_url, tours.photo_url)
                RETURNING id;
                """,
                (
                    data.get("country"),
                    data.get("city"),
                    data.get("hotel"),
                    data.get("price"),
                    data.get("currency"),
                    data.get("dates"),
                    data.get("description"),
                    data.get("source_url"),
                    data.get("posted_at"),
                    data.get("message_id"),
                    data.get("source_chat"),
                    data.get("photo_url"),
                ),
            )
            inserted = cur.fetchone()
            if inserted:
                logging.info(
                    f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª/–æ–±–Ω–æ–≤–∏–ª —Ç—É—Ä: {data.get('country')} | {data.get('city')} | "
                    f"{data.get('price')} {data.get('currency')} (id={inserted[0]})"
                )
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—É—Ä–∞: {e}")

# ============ –ü–ê–†–°–ï–† ============

# --- —Ü–µ–Ω–∞ –∏ –≤–∞–ª—é—Ç–∞ ---
NBSP = "\u00A0"

def _normalize_number(s: str) -> Optional[float]:
    s = s.replace(" ", "").replace(NBSP, "").replace(".", "").replace(",", ".")
    try:
        return float(s)
    except Exception:
        return None

PRICE_RE = re.compile(
    r"""(?ix)
    (?:–æ—Ç|–≤—Å–µ–≥–æ|‚âà|~)?\s*
    (?:
        (?P<num1>\d[\d\s\u00A0\.,]{1,7})\s*(?P<cur1>USD|EUR|UZS|RUB|–°–£–ú|—Å—É–º|—Ä—É–±|\$|‚Ç¨)
      | (?P<cur2>USD|EUR|UZS|RUB|\$|‚Ç¨)\s*(?P<num2>\d[\d\s\u00A0\.,]{1,7})
    )
    """
)

def parse_price_currency(text: str) -> Tuple[Optional[float], Optional[str]]:
    m = PRICE_RE.search(text)
    if not m:
        return None, None
    if m.group("num1"):
        num = _normalize_number(m.group("num1"))
        cur = m.group("cur1")
    else:
        num = _normalize_number(m.group("num2"))
        cur = m.group("cur2")
    if not num:
        return None, None
    cu = (cur or "").strip().upper()
    if cu in {"$", "US$", "USD$"}: cu = "USD"
    elif cu in {"‚Ç¨", "EUR‚Ç¨"}:      cu = "EUR"
    elif cu in {"UZS", "–°–£–ú", "–°–£–ú.", "–°–£–ú–´"}: cu = "UZS"
    elif cu in {"–†–£–ë", "–†–£–ë."}:    cu = "RUB"
    return num, cu

# --- –¥–∞—Ç—ã (—á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –∏ —Ç–æ—á–Ω—ã–µ) ---
MONTH_WORDS = {
    r"—è–Ω–≤–∞—Ä[—å—è–µ—é]": "01", r"—Ñ–µ–≤—Ä–∞–ª[—å—è–µ—é]": "02", r"–º–∞—Ä—Ç[–∞–µ]?": "03",
    r"–∞–ø—Ä–µ–ª[—å—è–µ—é]": "04", r"–º–∞[–π—è–µ]": "05", r"–∏—é–Ω[—å—è–µ—é]": "06",
    r"–∏—é–ª[—å—è–µ—é]": "07", r"–∞–≤–≥—É—Å—Ç[–∞–µ—É—ã]?": "08", r"—Å–µ–Ω—Ç—è–±—Ä[—å—è–µ—é]": "09",
    r"–æ–∫—Ç—è–±—Ä[—å—è–µ—é]": "10", r"–Ω–æ—è–±—Ä[—å—è–µ—é]": "11", r"–¥–µ–∫–∞–±—Ä[—å—è–µ—é]": "12",
}
DURATION_RE = re.compile(r"(?i)(?:(\d{1,2})\s*–¥–Ω\w*)?(?:\s*[/,;‚Ä¢\.]?\s*)?(?:(\d{1,2})\s*–Ω–æ—á\w*)")

def parse_human_dates(text: str) -> Optional[str]:
    t = text.strip().lower()

    # —Ç–æ—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: dd.mm(.yy|yyyy)?‚Äìdd.mm(.yy|yyyy)?
    m = re.search(
        r"(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?\s?[‚Äì\-]\s?(\d{1,2})[./-](\d{1,2})(?:[./-](\d{2,4}))?",
        t,
    )
    if m:
        d1, m1, y1, d2, m2, y2 = m.groups()
        def _mk(d, m_, y):
            yv = int(y) if y else datetime.now().year
            if yv < 100:
                yv += 2000 if yv < 70 else 1900
            return f"{int(d):02d}.{int(m_):02d}.{yv:04d}"
        return f"{_mk(d1, m1, y1)}‚Äì{_mk(d2, m2, (y2 or y1))}"

    # –º–µ—Å—è—Ü —Å–ª–æ–≤–∞–º–∏
    mon_txt = None
    for pat in MONTH_WORDS.keys():
        m = re.search(pat, t)
        if m:
            mon_txt = m.group(0).capitalize()
            break

    # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    dmatch = DURATION_RE.search(t)
    days = dmatch.group(1) if dmatch else None
    nights = dmatch.group(2) if dmatch else None

    if mon_txt or days or nights:
        parts = []
        if mon_txt: parts.append(mon_txt)
        dur = []
        if days:   dur.append(f"{days}–¥")
        if nights: dur.append(f"{nights}–Ω")
        if dur: parts.append(" / ".join(dur))
        return " ¬∑ ".join(parts) if parts else None

    return None

# --- —á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞/–æ–ø–∏—Å–∞–Ω–∏—è ---
def clean_text_basic(s: Optional[str]) -> Optional[str]:
    if not s:
        return s
    s = re.sub(r'[*_`]+', '', s)
    s = s.replace('|', ' ')
    s = re.sub(r'\s{2,}', ' ', s)
    return s.strip()

CONTACT_MARKERS = [
    "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤", "–±—Ä–æ–Ω–∏—Ä–æ–≤", "–∑–≤–æ–Ω–∏—Ç–µ", "—Ç–µ–ª:", "—Ç–µ–ª–µ—Ñ–æ–Ω", "whatsapp", "–≤–∞—Ü–∞–ø", "–≤–∞—Ç—Å–∞–ø",
    "–º–µ–Ω–µ–¥–∂–µ—Ä", "–¥–∏—Ä–µ–∫—Ç", "–Ω–∞—à –∞–¥—Ä–µ—Å", "–∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä", "call center", "call-—Ü–µ–Ω—Ç—Ä",
    "–ø–∏—à–∏—Ç–µ", "—Å–≤—è–∂–∏—Ç–µ—Å—å", "–∫–æ–Ω—Ç–∞–∫—Ç", "@", "+998", "+7", "+380", "+375", "+374", "+996", "+992", "+993", "+994"
]

def clean_description_block(text: str) -> str:
    """–ë–µ—Ä—ë–º –≤–µ—Ä—Ö–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å, –æ—Ç—Å–µ–∫–∞–µ–º –±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º."""
    lines = [ln.strip() for ln in (text or "").splitlines()]
    lines = [ln for ln in lines if ln]  # –±–µ–∑ –ø—É—Å—Ç—ã—Ö
    kept = []
    for ln in lines:
        low = ln.lower()
        if any(tok in low for tok in CONTACT_MARKERS):
            break
        kept.append(ln)
        if len(kept) >= 10:
            break
    out = "\n".join(kept)
    out = re.sub(r"[ \t]{2,}", " ", out)
    return out[:500]

# --- –æ—Ç–µ–ª—å/–±—Ä–µ–Ω–¥ ---
HOTEL_LINE_RE = re.compile(
    r"(?im)^(?=.*?(–æ—Ç–µ–ª[—å—è]|hotel|resort|palace|inn|spa|vinpearl|rixos|hilton|marriott|accor|barcelo|melia|iberostar))([^\n]{5,80})$"
)

def extract_hotel(text: str) -> Optional[str]:
    m = HOTEL_LINE_RE.search(text or "")
    if not m:
        return None
    line = m.group(2)
    line = re.sub(r"[‚Ä¢‚úÖ‚≠êÔ∏è‚ú®‚ú≥Ô∏è‚ùóÔ∏è‚ùïüî•üí•üëâüè®üèùÔ∏èüå¥üåäüåûüõ´üõ¨üöñüìçüß≥]+", " ", line)
    line = re.sub(r"\s{2,}", " ", line).strip(" -‚Äî:¬∑")
    line = re.sub(r"(?i)^–ª—é–±–∏–º(–∞—è|—ã–π)\s+—Å–µ—Ç—å\s+–æ—Ç–µ–ª[–µ–∏–π]+\s+", "", line)
    return line.strip()

# --- –≥–µ–æ–≥—Ä–∞—Ñ–∏—è ---
def guess_country(city: Optional[str]) -> Optional[str]:
    if not city:
        return None
    mapping = {
        "–ù—è—á–∞–Ω–≥": "–í—å–µ—Ç–Ω–∞–º",
        "–ê–Ω—Ç–∞–ª—å—è": "–¢—É—Ä—Ü–∏—è",
        "–ü—Ö—É–∫–µ—Ç": "–¢–∞–∏–ª–∞–Ω–¥",
        "–ü–∞—Ç—Ç–∞–π—è": "–¢–∞–∏–ª–∞–Ω–¥",
        "–°–∞–º—É–∏": "–¢–∞–∏–ª–∞–Ω–¥",
        "–ö—Ä–∞–±–∏": "–¢–∞–∏–ª–∞–Ω–¥",
        "–ë–∞–Ω–≥–∫–æ–∫": "–¢–∞–∏–ª–∞–Ω–¥",
        "–î—É–±–∞–π": "–û–ê–≠",
        "–ë–∞–ª–∏": "–ò–Ω–¥–æ–Ω–µ–∑–∏—è",
        "–¢–±–∏–ª–∏—Å–∏": "–ì—Ä—É–∑–∏—è",
    }
    return mapping.get(city, None)

# --- —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø–æ—Å—Ç–∞ ---
def parse_post(text: str, link: str, msg_id: int, chat: str, posted_at: datetime, photo_url: Optional[str]):
    price, currency = parse_price_currency(text)
    dates = parse_human_dates(text)

    # –≥–æ—Ä–æ–¥ (—Å–Ω–∞—á–∞–ª–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ, –ø–æ—Ç–æ–º fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ "–°–ª–æ–≤–æ–°–ë–æ–ª—å—à–æ–π–ë—É–∫–≤—ã")
    city_match = re.search(r"(–ë–∞–ª–∏|–î—É–±–∞–π|–ù—è—á–∞–Ω–≥|–ê–Ω—Ç–∞–ª—å—è|–ü—Ö—É–∫–µ—Ç|–¢–±–∏–ª–∏—Å–∏|–ë–∞–Ω–≥–∫–æ–∫|–ö—Ä–∞–±–∏|–ü–∞—Ç—Ç–∞–π—è|–°–∞–º—É–∏)", text, re.I)
    city = city_match.group(1) if city_match else None
    if not city:
        m = re.search(r"\b([–ê-–Ø–Å][–∞-—è—ë]+)\b", text)
        city = m.group(1) if m else None

    hotel = extract_hotel(text)

    # –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
    description = clean_description_block(text)

    return {
        "country": guess_country(city) if city else None,
        "city": city,
        "hotel": hotel,
        "price": price,
        "currency": currency,
        "dates": dates,
        "description": description,
        "source_url": link,
        "posted_at": posted_at.replace(tzinfo=None),
        "message_id": msg_id,
        "source_chat": chat,
        "photo_url": photo_url,
    }

# ============ –§–û–¢–û (–∑–∞–≥—Ä—É–∑–∫–∞ –≤ telegra.ph) ============

async def extract_photo_bytes(client: TelegramClient, msg) -> Optional[bytes]:
    try:
        # –ï—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ/–∫–∞—Ä—Ç–∏–Ω–∫–∞
        is_photo = bool(getattr(msg, "photo", None))
        is_image_doc = bool(
            getattr(msg, "document", None) and
            getattr(msg.document, "mime_type", "") and
            msg.document.mime_type.startswith("image/")
        )
        if not (is_photo or is_image_doc):
            return None

        bio = BytesIO()
        await client.download_media(message=msg, file=bio)
        data = bio.getvalue()
        if not data:
            return None
        if len(data) > TELEGRAPH_MAX_BYTES:
            logging.info(f"üì∑ –§–æ—Ç–æ {len(data)} bytes > 5MB ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –¥–ª—è telegra.ph")
            return None
        return data
    except Exception as e:
        logging.warning(f"extract_photo_bytes error: {e}")
        return None

async def upload_to_telegraph(image_bytes: bytes) -> Optional[str]:
    try:
        files = {'file': ('image.jpg', image_bytes, 'image/jpeg')}
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.post(TELEGRAPH_UPLOAD, files=files)
        if r.status_code == 200:
            data = r.json()
            if isinstance(data, list) and data and "src" in data[0]:
                return "https://telegra.ph" + data[0]["src"]
            logging.warning(f"Unexpected telegraph response: {data}")
        else:
            logging.warning(f"Telegraph upload failed: {r.status_code} {r.text[:200]}")
    except Exception as e:
        logging.warning(f"upload_to_telegraph error: {e}")
    return None

async def photo_url_from_message(client: TelegramClient, msg) -> Optional[str]:
    img = await extract_photo_bytes(client, msg)
    if not img:
        return None
    return await upload_to_telegraph(img)

# ============ –ö–û–õ–õ–ï–ö–¢–û–† ============
async def collect_once(client: TelegramClient):
    for channel in CHANNELS:
        if not channel:
            continue
        logging.info(f"üì• –ß–∏—Ç–∞—é –∫–∞–Ω–∞–ª: {channel}")
        async for msg in client.iter_messages(channel, limit=50):
            # –¢–µ–∫—Å—Ç (–ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ —Ç–æ–∂–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ .text)
            if not msg.text:
                continue
            try:
                link = f"https://t.me/{channel.strip('@')}/{msg.id}"
                photo_url = await photo_url_from_message(client, msg)
                data = parse_post(
                    msg.text,
                    link,
                    msg.id,
                    channel,
                    msg.date,
                    photo_url,
                )
                save_tour(data)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {channel}/{msg.id}: {e}")

async def run_collector():
    client = TelegramClient(StringSession(SESSION_B64), API_ID, API_HASH)
    await client.start()
    logging.info("‚úÖ Collector –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            await collect_once(client)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ: {e}")
        await asyncio.sleep(900)  # –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    asyncio.run(run_collector())
