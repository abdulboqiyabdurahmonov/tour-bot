import os
import logging
import asyncio
import httpx
from datetime import datetime, timedelta

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from psycopg import connect
from psycopg.rows import dict_row

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO)

# ============ ENV ============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ============ –ë–î ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True)

def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            is_premium BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT NOW()
        );
        """)

async def is_premium(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    init_db()
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute("SELECT is_premium FROM users WHERE user_id = %s", (user_id,))
        row = cur.fetchone()
        if not row:
            cur.execute(
                "INSERT INTO users (user_id, is_premium) VALUES (%s, %s)",
                (user_id, False)
            )
            return False
        return row["is_premium"]

# ============ –ú–ï–ù–Æ ============
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç –ù–∞–π—Ç–∏ —Ç—É—Ä", callback_data="find_tour")],
        [InlineKeyboardButton(text="üî• –î–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã", callback_data="cheap_tours")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")],
        [InlineKeyboardButton(text="üí∞ –ü—Ä–∞–π—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="price")],
    ])

def back_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
    ])

# ============ OPENAI GPT ============
async def ask_gpt(prompt: str) -> str:
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "–¢—ã —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—É—Ä–æ–≤. –î–µ—Ä–∂–∏—Å—å —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.3
    }
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"]

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π —Ç—É—Ä-–±–æ—Ç ü§ñ\n\n"
        "–ú—ã —á–∞—Å—Ç—å **—ç–∫–æ—Å–∏—Å—Ç–µ–º—ã TripleA** ‚Äî –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π üöÄ\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ üèñÔ∏è\n\n"
        "–í—ã–±–∏—Ä–∞–π –æ–ø—Ü–∏—é –Ω–∏–∂–µ –∏ –ø–æ–≥–Ω–∞–ª–∏! üëá",
        parse_mode="Markdown",
        reply_markup=main_menu(),
    )

    await message.answer(
        "üÜò –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏ **üåç –ù–∞–π—Ç–∏ —Ç—É—Ä**, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏–ª–∏ –≥–æ—Ä–æ–¥—É.\n"
        "   üëâ –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–∏—à–∏ *–¢—É—Ä—Ü–∏—è* –∏–ª–∏ */tours –î—É–±–∞–π*\n\n"
        "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ **üî• –î–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã** –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –∑–∞ 3 –¥–Ω—è.\n\n"
        "‚Ä¢ –í –º–µ–Ω—é **‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ** —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ TripleA.\n\n"
        "‚Ä¢ –í **üí∞ –ü—Ä–∞–π—Å –ø–æ–¥–ø–∏—Å–∫–∏** —Å–º–æ—Ç—Ä–∏ —Ç–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω—ã–º –¥–∞–Ω–Ω—ã–º.\n\n"
        "üì© –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –ø—Ä—è–º–æ —Å—é–¥–∞, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!",
        parse_mode="Markdown",
        reply_markup=back_menu(),
    )

@dp.message()
async def handle_plain_text(message: types.Message):
    query = message.text.strip()
    premium = await is_premium(message.from_user.id)

    # —ç–º—É–ª—è—Ü–∏—è "–ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤" (–ø–æ–∑–∂–µ —Å—é–¥–∞ –ø–æ–¥–∫–ª—é—á–∏–º –ø–∞—Ä—Å–∏–Ω–≥)
    tours = [
        {"country": "–¢—É—Ä—Ü–∏—è", "price": 500, "hotel": "Hilton Antalya"},
        {"country": "–û–ê–≠", "price": 450, "hotel": "Dubai Marina Hotel"},
        {"country": "–ï–≥–∏–ø–µ—Ç", "price": 400, "hotel": "Sharm Beach Resort"},
    ]

    # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—Å—Ç—É
    results = [t for t in tours if query.lower() in t["country"].lower()]

    if not results:
        reply = await ask_gpt(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä: {query}. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ.")
        await message.answer(reply)
        return

    if premium:
        text = "\n".join([f"{t['country']} ‚Äî {t['price']}$ ({t['hotel']})" for t in results])
    else:
        text = "\n".join([f"{t['country']} ‚Äî {t['price']}$" for t in results])

    await message.answer(f"üìã –ù–∞—à—ë–ª —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n{text}")

# ============ CALLBACKS ============
@dp.callback_query(F.data == "menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())

@dp.callback_query(F.data == "about")
async def about(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üåê –ú—ã ‚Äî —á–∞—Å—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã **TripleA**.\n\n"
        "–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –±–∏–∑–Ω–µ—Å—É –∏ –ª—é–¥—è–º:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ü§ñ\n"
        "‚Ä¢ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç—É—Ä—ã üèùÔ∏è\n"
        "‚Ä¢ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ üöÄ",
        parse_mode="Markdown",
        reply_markup=back_menu(),
    )

@dp.callback_query(F.data == "price")
async def price(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ TripleA Travel:\n\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî —Ü–µ–Ω—ã –±–µ–∑ –æ—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º ‚Äî –æ—Ç–µ–ª–∏, —Å—Å—ã–ª–∫–∏ –∏ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã\n\n"
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ üîë",
        reply_markup=back_menu(),
    )

# ============ FASTAPI (WEBHOOK) ============
@app.on_event("startup")
async def on_startup():
    init_db()
    webhook_url = os.getenv("WEBHOOK_URL")
    if webhook_url:
        await bot.set_webhook(webhook_url)
        logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω")

@app.post("/webhook")
async def webhook_handler(request: Request):
    update = types.Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}
