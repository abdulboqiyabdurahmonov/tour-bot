import os
import re
import logging
import asyncio
import time
from datetime import datetime, timedelta
from typing import Optional, Tuple, List
from html import escape
from collections import defaultdict
import secrets
from zoneinfo import ZoneInfo  # ‚¨ÖÔ∏è –ª–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

from psycopg import connect
from psycopg.rows import dict_row

import httpx
from db_init import init_db  # —Ç–≤–æ—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î

# ================= –õ–û–ì–ò =================
logging.basicConfig(level=logging.INFO)

# ================= ENV =================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", os.getenv("WEBHOOK_URL", "https://tour-bot-rxi8.onrender.com"))
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ================= –ö–û–ù–°–¢–ê–ù–¢–´ =================
TZ = ZoneInfo("Asia/Tashkent")  # –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
PAGER_STATE: dict[str, dict] = {}  # –ø–∞–º—è—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
PAGER_TTL_SEC = 3600  # 1 —á–∞—Å –∂–∏–≤—ë—Ç –ø–æ–¥–±–æ—Ä–∫–∞

# ================= –ë–û–¢ / APP =================
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
app = FastAPI()

# ================= –ë–î =================
def get_conn():
    return connect(DATABASE_URL, autocommit=True, row_factory=dict_row)

# ================= –ö–õ–ê–í–ò–ê–¢–£–†–´ =================
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã"), KeyboardButton(text="ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT")],
        [KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∫–∞"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ],
    resize_keyboard=True,
)

def filters_inline_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ 72—á", callback_data="tours_recent")],
            [
                InlineKeyboardButton(text="üå¥ –¢—É—Ä—Ü–∏—è", callback_data="country:–¢—É—Ä—Ü–∏—è"),
                InlineKeyboardButton(text="üá¶üá™ –û–ê–≠", callback_data="country:–û–ê–≠"),
            ],
            [
                InlineKeyboardButton(text="üáπüá≠ –¢–∞–∏–ª–∞–Ω–¥", callback_data="country:–¢–∞–∏–ª–∞–Ω–¥"),
                InlineKeyboardButton(text="üáªüá≥ –í—å–µ—Ç–Ω–∞–º", callback_data="country:–í—å–µ—Ç–Ω–∞–º"),
            ],
            # üí∏ –±—é–¥–∂–µ—Ç –ø–æ USD
            [
                InlineKeyboardButton(text="üí∏ ‚â§ $500", callback_data="budget:USD:500"),
                InlineKeyboardButton(text="üí∏ ‚â§ $800", callback_data="budget:USD:800"),
                InlineKeyboardButton(text="üí∏ ‚â§ $1000", callback_data="budget:USD:1000"),
            ],
            [InlineKeyboardButton(text="‚ÜïÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ", callback_data="sort:price_asc")],
            [InlineKeyboardButton(text="‚ûï –ï—â—ë —Ñ–∏–ª—å—Ç—Ä—ã —Å–∫–æ—Ä–æ", callback_data="noop")],
        ]
    )

def sources_kb(
    rows: List[dict],
    *,
    start_index: int = 1,
    back_to: str = "back_filters",
    token: Optional[str] = None,
    next_offset: Optional[int] = None,
) -> InlineKeyboardMarkup:
    buttons = []
    for idx, t in enumerate(rows, start=start_index):
        url = (t.get("source_url") or "").strip()
        if url:
            buttons.append([InlineKeyboardButton(text=f"üîó –û—Ç–∫—Ä—ã—Ç—å #{idx}", url=url)])

    # –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–∫–µ–Ω –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π offset)
    if token and next_offset is not None:
        buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"more:{token}:{next_offset}")])

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_to)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ================= –£–¢–ò–õ–ò–¢–´ –ü–ê–ì–ò–ù–ê–¶–ò–ò =================
def _new_token() -> str:
    # –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è callback_data
    return secrets.token_urlsafe(6).rstrip("=-_")

def _cleanup_pager_state():
    now = time.monotonic()
    to_del = []
    for k, v in PAGER_STATE.items():
        ts = v.get("ts", now)
        if now - ts > PAGER_TTL_SEC:
            to_del.append(k)
    for k in to_del:
        PAGER_STATE.pop(k, None)

def _touch_state(token: str):
    st = PAGER_STATE.get(token)
    if st:
        st["ts"] = time.monotonic()

# ================= –ü–û–ú–û–©–ù–ò–ö–ò –í–´–í–û–î–ê =================
async def show_typing(message: Message, text: str = "ü§î –î—É–º–∞—é... –ò—â—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–±—è"):
    try:
        await bot.send_chat_action(message.chat.id, "typing")
        await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ show_typing: {e}")

def fmt_price(price, currency) -> str:
    if price is None:
        return "‚Äî"
    try:
        p = int(float(price))
    except Exception:
        return escape(f"{price} {currency or ''}".strip())

    cur = (currency or "").strip()
    cur_up = cur.upper()
    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    if cur_up in {"$", "US$", "USD$", "USD"}:
        cur_up = "USD"
    elif cur_up in {"‚Ç¨", "EUR‚Ç¨", "EUR"}:
        cur_up = "EUR"
    elif cur_up in {"UZS", "–°–£–ú", "–°–£–ú.", "–°–£–ú–´", "–°–£–ú–û–í", "–°–û–ú", "–°–£–ú", "–°–£–ú–ú", "–°–£–ú–ú." , "–°–£–ú." , "–°–£–ú–´.", "–°–£–ú." , "–°–£–ú–ú–´"}:
        cur_up = "UZS"
    elif cur_up in {"–°–£–ú", "—Å—É–º"}:
        cur_up = "UZS"
    return escape(f"{p:,} {cur_up}".replace(",", " "))

def safe(s: Optional[str]) -> str:
    return escape(s or "‚Äî")

def clean_text_basic(s: Optional[str]) -> str:
    """–£–±–∏—Ä–∞–µ—Ç markdown-–º—É—Å–æ—Ä –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã"""
    if not s:
        return "‚Äî"
    s = re.sub(r'[*_`]+', '', s)
    s = s.replace('|', ' ')
    s = re.sub(r'\s{2,}', ' ', s)
    return s.strip()

def strip_trailing_price_from_hotel(s: Optional[str]) -> Optional[str]:
    """–°—Ä–µ–∑–∞–µ—Ç '‚Äì –æ—Ç 767 USD', ' - 1207$ ü•Ç' –∏ —Ç.–ø. –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏."""
    if not s:
        return s
    return re.sub(
        r'[\s\u00A0‚Äì‚Äî-]*'               # —Ç–∏—Ä–µ/–ø—Ä–æ–±–µ–ª—ã/nbsp
        r'(?:–æ—Ç\s*)?'                   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ '–æ—Ç'
        r'\d[\d\s\u00A0.,]*'            # —á–∏—Å–ª–æ
        r'\s*(?:USD|EUR|UZS|RUB|–°–£–ú|—Å—É–º|—Ä—É–±|\$|‚Ç¨).*$',  # –≤–∞–ª—é—Ç–∞ –∏ –õ–Æ–ë–û–ô —Ö–≤–æ—Å—Ç
        '',
        s,
        flags=re.I
    ).strip()

def normalize_dates_for_display(s: Optional[str]) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 04.25.2025‚Äì04.25.10 -> 25.04.2025‚Äì10.04.2025.
    –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å (—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ).
    """
    if not s:
        return "‚Äî"
    s = s.strip()
    m = re.fullmatch(r"(\d{1,2})\.(\d{1,2})\.(\d{2,4})\s*[‚Äì-]\s*(\d{1,2})\.(\d{1,2})\.(\d{2,4})", s)
    if not m:
        return escape(s)

    d1, m1, y1, d2, m2, y2 = m.groups()

    def _norm(d, mo, y):
        d = int(d); mo = int(mo); y = int(y)
        if y < 100:
            y += 2000 if y < 70 else 1900
        # –µ—Å–ª–∏ "–º–µ—Å—è—Ü" > 12, –∞ "–¥–µ–Ω—å" <= 12 ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–æ–º–µ–Ω—è–ª–∏ –º–µ—Å—Ç–∞–º–∏
        if mo > 12 and d <= 12:
            d, mo = mo, d
        return f"{d:02d}.{mo:02d}.{y:04d}"

    return f"{_norm(d1, m1, y1)}‚Äì{_norm(d2, m2, y2)}"

def compile_tours_text(rows: List[dict], header: str, start_index: int = 1) -> str:
    lines = []
    for idx, t in enumerate(rows, start=start_index):
        posted = t.get("posted_at")
        # –ª–æ–∫–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –≤ Tashkent
        posted_str = ""
        if isinstance(posted, datetime):
            try:
                posted_local = posted if posted.tzinfo else posted.replace(tzinfo=ZoneInfo("UTC"))
                posted_local = posted_local.astimezone(TZ)
                posted_str = f"üïí {posted_local.strftime('%d.%m.%Y %H:%M')} (TST)\n"
            except Exception:
                posted_str = f"üïí {posted.strftime('%d.%m.%Y %H:%M')}\n"

        price_str = fmt_price(t.get("price"), t.get("currency"))
        src = (t.get("source_url") or "").strip()

        hotel_raw = t.get("hotel")
        hotel_clean = clean_text_basic(strip_trailing_price_from_hotel(hotel_raw))
        dates_norm = normalize_dates_for_display(t.get("dates"))

        card = (
            f"#{idx}\n"
            f"üåç {safe(t.get('country'))} ‚Äî {safe(t.get('city'))}\n"
            f"üè® {safe(hotel_clean)}\n"
            f"üíµ {price_str}\n"
            f"üìÖ {dates_norm}\n"
            f"{posted_str}"
        )
        if src:
            card += f'üîó <a href="{escape(src)}">–ò—Å—Ç–æ—á–Ω–∏–∫</a>'
        lines.append(card.strip())

    body = "\n\n".join(lines) if lines else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä."
    return f"<b>{escape(header)}</b>\n\n{body}"

def split_telegram(text: str, limit: int = 3500) -> List[str]:
    parts: List[str] = []
    t = text
    while len(t) > limit:
        cut = t.rfind("\n\n", 0, limit)
        if cut == -1 or cut < int(limit * 0.6):
            cut = limit
        parts.append(t[:cut].rstrip())
        t = t[cut:].lstrip()
    if t:
        parts.append(t)
    return parts

# ================= –ü–û–ò–°–ö –¢–£–†–û–í =================
async def fetch_tours(
    query: Optional[str] = None,
    *,
    country: Optional[str] = None,
    currency_eq: Optional[str] = None,
    max_price: Optional[float] = None,
    hours: int = 72,
    limit_recent: int = 10,
    limit_fallback: int = 5,
) -> Tuple[List[dict], bool]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (rows, is_recent). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –≤–∞–ª—é—Ç—ã –∏ —Ü–µ–Ω—ã."""
    try:
        where_clauses = []
        params = []

        if query:
            where_clauses.append("(country ILIKE %s OR city ILIKE %s OR hotel ILIKE %s)")
            params += [f"%{query}%", f"%{query}%", f"%{query}%"]
        if country:
            where_clauses.append("country ILIKE %s")
            params.append(f"%{country}%")  # ‚¨ÖÔ∏è ¬´—á–µ–ª–æ–≤–µ—á–Ω—ã–π¬ª –ø–æ–∏—Å–∫
        if currency_eq:
            where_clauses.append("currency = %s")
            params.append(currency_eq)
        if max_price is not None:
            where_clauses.append("price IS NOT NULL AND price <= %s")
            params.append(max_price)

        where_sql = ("WHERE " + " AND ".join(where_clauses)) if where_clauses else ""
        cutoff = datetime.utcnow() - timedelta(hours=hours)

        # –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ ‚Äî —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤–ª–µ
        order_clause = "ORDER BY price ASC NULLS LAST, posted_at DESC" if max_price is not None else "ORDER BY posted_at DESC"

        with get_conn() as conn, conn.cursor() as cur:
            # recent
            sql_recent = f"""
                SELECT country, city, hotel, price, currency, dates, source_url, posted_at
                FROM tours
                {where_sql} {('AND' if where_sql else 'WHERE')} posted_at >= %s
                {order_clause}
                LIMIT %s
            """
            cur.execute(sql_recent, params + [cutoff, limit_recent])
            rows = cur.fetchall()
            if rows:
                return rows, True

            # fallback
            sql_fb = f"""
                SELECT country, city, hotel, price, currency, dates, source_url, posted_at
                FROM tours
                {where_sql}
                {order_clause}
                LIMIT %s
            """
            cur.execute(sql_fb, params + [limit_fallback])
            fb_rows = cur.fetchall()
            return fb_rows, False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ fetch_tours: {e}")
        return [], False

async def fetch_tours_page(
    query: Optional[str] = None,
    *,
    country: Optional[str] = None,
    currency_eq: Optional[str] = None,
    max_price: Optional[float] = None,
    hours: Optional[int] = None,      # –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ ‚Äî —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏ posted_at
    order_by_price: bool = False,     # –¥–ª—è –±—é–¥–∂–µ—Ç–Ω—ã—Ö
    limit: int = 10,
    offset: int = 0,
) -> List[dict]:
    try:
        where_clauses = []
        params: List = []

        if query:
            where_clauses.append("(country ILIKE %s OR city ILIKE %s OR hotel ILIKE %s)")
            params += [f"%{query}%", f"%{query}%", f"%{query}%"]
        if country:
            where_clauses.append("country ILIKE %s")
            params.append(f"%{country}%")  # ‚¨ÖÔ∏è ¬´—á–µ–ª–æ–≤–µ—á–Ω—ã–π¬ª –ø–æ–∏—Å–∫
        if currency_eq:
            where_clauses.append("currency = %s")
            params.append(currency_eq)
        if max_price is not None:
            where_clauses.append("price IS NOT NULL AND price <= %s")
            params.append(max_price)
        if hours is not None:
            cutoff = datetime.utcnow() - timedelta(hours=hours)
            where_clauses.append("posted_at >= %s")
            params.append(cutoff)

        where_sql = ("WHERE " + " AND ".join(where_clauses)) if where_clauses else ""
        order_clause = "ORDER BY price ASC NULLS LAST, posted_at DESC" if order_by_price else "ORDER BY posted_at DESC"

        sql = f"""
            SELECT country, city, hotel, price, currency, dates, source_url, posted_at
            FROM tours
            {where_sql}
            {order_clause}
            LIMIT %s OFFSET %s
        """

        with get_conn() as conn, conn.cursor() as cur:
            cur.execute(sql, params + [limit, offset])
            rows = cur.fetchall()
            return rows
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ fetch_tours_page: {e}")
        return []

# ================= GPT =================
last_gpt_call = defaultdict(float)  # per-user cooldown

async def ask_gpt(prompt: str, *, user_id: int, premium: bool = False) -> List[str]:
    now = time.monotonic()
    if now - last_gpt_call[user_id] < 12.0:
        return ["üòÆ‚Äçüí® –ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚Äî —è –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å."]

    last_gpt_call[user_id] = now

    payload = {
        "model": "gpt-4o-mini",
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º –∏–∑ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã TripleA. "
                    "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –î–µ—Ä–∂–∏—Å—å —Ç–µ–º–∞—Ç–∏–∫–∏: —Ç—É—Ä—ã, –æ—Ç–µ–ª–∏, —Å–µ–∑–æ–Ω—ã, –≤–∏–∑—ã, —Ü–µ–Ω—ã, –ª–∞–π—Ñ—Ö–∞–∫–∏."
                ),
            },
            {"role": "user", "content": prompt},
        ],
        "temperature": 0.6,
        "max_tokens": 700,
    }

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            for attempt in range(3):
                r = await client.post(
                    "https://api.openai.com/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {OPENAI_API_KEY}",
                        "Content-Type": "application/json",
                    },
                    json=payload,
                )
                if r.status_code == 200:
                    data = r.json()
                    msg = (data.get("choices") or [{}])[0].get("message", {}).get("content")
                    if not msg:
                        logging.error(f"OpenAI no choices/message: {data}")
                        break
                    answer = msg.strip()
                    if premium:
                        answer += "\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—É—Ä–∞: https://t.me/triplea_channel"
                    else:
                        answer += "\n\n‚ú® –•–æ—á–µ—à—å –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—É—Ä–æ–≤? –ü–æ–¥–∫–ª—é—á–∏ Premium –¥–æ—Å—Ç—É–ø TripleA."
                    MAX_LEN = 3800
                    return [answer[i : i + MAX_LEN] for i in range(0, len(answer), MAX_LEN)]
                elif r.status_code == 429:
                    await asyncio.sleep(1.5**attempt)
                    continue
                else:
                    logging.error(f"OpenAI error {r.status_code}: {r.text[:400]}")
                    break
    except Exception as e:
        logging.exception(f"GPT call failed: {e}")

    return [
        "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ ‚Äî –∞ –ø–æ–∫–∞ –∑–∞–≥–ª—è–Ω–∏ –≤ ¬´üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã¬ª –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
    ]

# ================= –•–ï–ù–î–õ–ï–†–´ =================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "üåç –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>TripleA Travel Bot</b> ‚úàÔ∏è\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ. ¬´üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã¬ª ‚Äî –±—ã—Å—Ç—Ä–∞—è –∞–∫—Ç—É–∞–ª–∫–∞ –∏–∑ –±–∞–∑—ã.\n"
        "¬´ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT¬ª ‚Äî —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ —Å–µ–∑–æ–Ω—ã, –±—é–¥–∂–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏.\n"
    )
    await message.answer(text, reply_markup=main_kb)

@dp.message(F.text == "üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã")
async def entry_find_tours(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –±—ã—Å—Ç—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filters_inline_kb())

@dp.message(F.text == "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT")
async def entry_gpt(message: Message):
    await message.answer("–°–ø—Ä–æ—Å–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –ø—Ä–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–æ—Ç–µ–ª–∏, —Å–µ–∑–æ–Ω—ã, –≤–∏–∑—ã, –±—é–¥–∂–µ—Ç—ã).")

@dp.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∫–∞")
async def entry_sub(message: Message):
    await message.answer("–°–∫–æ—Ä–æ: –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/–±—é–¥–∂–µ—Ç—É/–¥–∞—Ç–∞–º. –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üí°")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def entry_settings(message: Message):
    await message.answer("–°–∫–æ—Ä–æ: —è–∑—ã–∫/–≤–∞–ª—é—Ç–∞/–±—é–¥–∂–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚öôÔ∏è")

@dp.callback_query(F.data == "tours_recent")
async def cb_recent(call: CallbackQuery):
    await bot.send_chat_action(call.message.chat.id, "typing")
    rows, is_recent = await fetch_tours(None, hours=72, limit_recent=10, limit_fallback=10)
    header = "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞ 72 —á–∞—Å–∞" if is_recent else "‚ÑπÔ∏è –°–≤–µ–∂–∏—Ö 72—á –º–∞–ª–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
    text = compile_tours_text(rows, header, start_index=1)

    token = _new_token()
    PAGER_STATE[token] = {
        "chat_id": call.message.chat.id,
        "query": None,
        "country": None,
        "currency_eq": None,
        "max_price": None,
        "hours": 72 if is_recent else None,
        "order_by_price": False,
        "ts": time.monotonic(),
    }

    try:
        for chunk in split_telegram(text):
            await call.message.answer(
                chunk,
                disable_web_page_preview=True,
                reply_markup=sources_kb(rows, start_index=1, token=token, next_offset=len(rows)),
            )
    except Exception as e:
        logging.error("Send HTML failed (recent): %s", e)
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=filters_inline_kb())

@dp.callback_query(F.data.startswith("country:"))
async def cb_country(call: CallbackQuery):
    await bot.send_chat_action(call.message.chat.id, "typing")
    country = call.data.split(":", 1)[1]
    rows, is_recent = await fetch_tours(None, country=country, hours=120, limit_recent=10, limit_fallback=10)
    header = f"üá∫üá≥ –°—Ç—Ä–∞–Ω–∞: {country} ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ" if is_recent else f"üá∫üá≥ –°—Ç—Ä–∞–Ω–∞: {country} ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ"
    text = compile_tours_text(rows, header, start_index=1)

    token = _new_token()
    PAGER_STATE[token] = {
        "chat_id": call.message.chat.id,
        "query": None,
        "country": country,
        "currency_eq": None,
        "max_price": None,
        "hours": 120 if is_recent else None,
        "order_by_price": False,
        "ts": time.monotonic(),
    }

    try:
        for chunk in split_telegram(text):
            await call.message.answer(
                chunk,
                disable_web_page_preview=True,
                reply_markup=sources_kb(rows, start_index=1, token=token, next_offset=len(rows)),
            )
    except Exception as e:
        logging.error("Send HTML failed (country): %s", e)
        await call.message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–µ {escape(country)}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            reply_markup=filters_inline_kb(),
        )

@dp.callback_query(F.data.startswith("budget:"))
async def cb_budget(call: CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: budget:<CUR>:<LIMIT>
    _, cur, limit_str = call.data.split(":", 2)
    try:
        limit_val = float(limit_str)
    except Exception:
        limit_val = None

    await bot.send_chat_action(call.message.chat.id, "typing")

    rows, is_recent = await fetch_tours(
        None,
        currency_eq=cur,
        max_price=limit_val,
        hours=120,
        limit_recent=12,
        limit_fallback=12
    )
    hdr = f"üí∏ –ë—é–¥–∂–µ—Ç: ‚â§ {int(limit_val)} {cur} ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ" if is_recent else f"üí∏ –ë—é–¥–∂–µ—Ç: ‚â§ {int(limit_val)} {cur} ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ"
    text = compile_tours_text(rows, hdr, start_index=1)

    token = _new_token()
    PAGER_STATE[token] = {
        "chat_id": call.message.chat.id,
        "query": None,
        "country": None,
        "currency_eq": cur,
        "max_price": limit_val,
        "hours": 120 if is_recent else None,
        "order_by_price": True,
        "ts": time.monotonic(),
    }

    try:
        for chunk in split_telegram(text):
            await call.message.answer(
                chunk,
                disable_web_page_preview=True,
                reply_markup=sources_kb(rows, start_index=1, token=token, next_offset=len(rows)),
            )
    except Exception as e:
        logging.error("Send HTML failed (budget): %s", e)
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –±—é–¥–∂–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=filters_inline_kb())

@dp.callback_query(F.data == "sort:price_asc")
async def cb_sort_price_asc(call: CallbackQuery):
    await bot.send_chat_action(call.message.chat.id, "typing")
    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ 72—á –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    rows = await fetch_tours_page(
        hours=72,
        order_by_price=True,
        limit=10,
        offset=0,
    )
    header = "‚ÜïÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞ 72—á ‚Äî –¥–µ—à–µ–≤–ª–µ ‚Üí –¥–æ—Ä–æ–∂–µ"
    text = compile_tours_text(rows, header, start_index=1)

    token = _new_token()
    PAGER_STATE[token] = {
        "chat_id": call.message.chat.id,
        "query": None,
        "country": None,
        "currency_eq": None,
        "max_price": None,
        "hours": 72,
        "order_by_price": True,
        "ts": time.monotonic(),
    }

    try:
        for chunk in split_telegram(text):
            await call.message.answer(
                chunk,
                disable_web_page_preview=True,
                reply_markup=sources_kb(rows, start_index=1, token=token, next_offset=len(rows)),
            )
    except Exception as e:
        logging.error("Send HTML failed (sort price): %s", e)
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã.", reply_markup=filters_inline_kb())

@dp.callback_query(F.data.startswith("more:"))
async def cb_more(call: CallbackQuery):
    try:
        _, token, offset_str = call.data.split(":", 2)
        offset = int(offset_str)
    except Exception:
        await call.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ü•≤", show_alert=False)
        return

    _cleanup_pager_state()

    state = PAGER_STATE.get(token)
    if not state or state.get("chat_id") != call.message.chat.id:
        await call.answer("–≠—Ç–∞ –ø–æ–¥–±–æ—Ä–∫–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=False)
        return

    rows = await fetch_tours_page(
        query=state.get("query"),
        country=state.get("country"),
        currency_eq=state.get("currency_eq"),
        max_price=state.get("max_price"),
        hours=state.get("hours"),
        order_by_price=state.get("order_by_price", False),
        limit=10,
        offset=offset,
    )

    if not rows:
        await call.answer("–≠—Ç–æ –≤—Å—ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚ú®", show_alert=False)
        return

    header = "–ü—Ä–æ–¥–æ–ª–∂–∞—é –ø–æ–¥–±–æ—Ä–∫—É"
    start_index = offset + 1
    text = compile_tours_text(rows, header, start_index=start_index)
    next_offset = offset + len(rows)

    _touch_state(token)

    for chunk in split_telegram(text):
        await call.message.answer(
            chunk,
            disable_web_page_preview=True,
            reply_markup=sources_kb(rows, start_index=start_index, token=token, next_offset=next_offset),
        )

@dp.callback_query(F.data == "noop")
async def cb_noop(call: CallbackQuery):
    await call.answer("–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã ü§ù", show_alert=False)

@dp.callback_query(F.data == "back_filters")
async def cb_back_filters(call: CallbackQuery):
    await call.message.answer("–í–µ—Ä–Ω—É–ª—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º:", reply_markup=filters_inline_kb())

@dp.callback_query(F.data == "back_main")
async def cb_back_main(call: CallbackQuery):
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

# --- –°–º–∞—Ä—Ç-—Ä–æ—É—Ç–µ—Ä —Ç–µ–∫—Å—Ç–∞: –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã -> –ø–æ–∏—Å–∫, –¥–ª–∏–Ω–Ω—ã–µ -> GPT
@dp.message(F.text & ~F.text.in_({"üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT", "üîî –ü–æ–¥–ø–∏—Å–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"}))
async def smart_router(message: Message):
    user_text = message.text.strip()
    await bot.send_chat_action(message.chat.id, "typing")

    if len(user_text) <= 40:
        rows, is_recent = await fetch_tours(user_text, hours=72)
        if rows:
            header = "üî• –ù–∞—à—ë–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞ 72 —á–∞—Å–∞:" if is_recent else "‚ÑπÔ∏è –°–≤–µ–∂–∏—Ö 72—á –Ω–µ—Ç ‚Äî –≤–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
            text = compile_tours_text(rows, header)
            try:
                for chunk in split_telegram(text):
                    await message.answer(chunk, disable_web_page_preview=True, reply_markup=sources_kb(rows))
            except Exception as e:
                logging.error("Send HTML failed (smart_router): %s", e)
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=filters_inline_kb())
            return

    # –∏–Ω–∞—á–µ GPT
    premium_users = {123456789}
    is_premium = message.from_user.id in premium_users
    replies = await ask_gpt(user_text, user_id=message.from_user.id, premium=is_premium)
    for part in replies:
        await message.answer(part, parse_mode=None)  # –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ —Ä–∞–∑–º–µ—Ç–∫–µ

# ================= WEBHOOK =================
@app.get("/")
async def root():
    return {"status": "ok", "message": "TripleA Travel Bot is running!"}

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        await asyncio.sleep(0)
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)
    return JSONResponse({"status": "ok"})

# ================= START/STOP =================
@app.on_event("startup")
async def on_startup():
    try:
        init_db()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ init_db(): {e}")

    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logging.warning("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –±–æ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç –∞–ø–¥–µ–π—Ç—ã.")

    try:
        with get_conn() as conn, conn.cursor() as cur:
            cur.execute("""
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = 'tours'
                ORDER BY ordinal_position
            """)
            cols = [r["column_name"] for r in cur.fetchall()]
            logging.info(f"üéØ –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ tours: {cols}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–æ–Ω–æ–∫: {e}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
