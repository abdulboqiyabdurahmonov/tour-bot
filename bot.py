import os
import re
import logging
import asyncio
import httpx
from datetime import datetime, timedelta

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from psycopg import connect
from psycopg.rows import dict_row

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO)

# ============ ENV ============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ============ –ë–î ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True)

def init_db():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            is_premium BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT NOW()
        );
        """)
        cur.execute("""
        CREATE TABLE IF NOT EXISTS tours (
            id SERIAL PRIMARY KEY,
            country TEXT,
            city TEXT,
            hotel TEXT,
            price NUMERIC,
            currency TEXT,
            dates TEXT,
            description TEXT,
            source_url TEXT,
            posted_at TIMESTAMP DEFAULT NOW()
        );
        """)

async def is_premium(user_id: int):
    init_db()
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute("SELECT is_premium FROM users WHERE user_id = %s", (user_id,))
        row = cur.fetchone()
        if not row:
            cur.execute(
                "INSERT INTO users (user_id, is_premium) VALUES (%s, %s)",
                (user_id, False)
            )
            return False
        return row["is_premium"]

async def get_latest_tours(query: str = None, limit: int = 5, hours: int = 24):
    sql = """
        SELECT country, city, hotel, price, currency, dates, description, source_url, posted_at
        FROM tours
        WHERE posted_at >= NOW() - (%s || ' hours')::interval
    """
    params = [str(hours)]

    if query:
        sql += " AND (LOWER(country) LIKE %s OR LOWER(city) LIKE %s)"
        q = f"%{query.lower()}%"
        params.extend([q, q])

    sql += " ORDER BY posted_at DESC LIMIT %s"
    params.append(limit)

    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute(sql, params)
        return cur.fetchall()

# ============ –ü–ê–†–°–ï–† –ë–Æ–î–ñ–ï–¢–ê ============
def parse_budget(query: str):
    """–ò—â–µ—Ç –±—é–¥–∂–µ—Ç: '–¥–æ 1000 –¥–æ–ª–ª–∞—Ä–æ–≤' / '–¥–æ 5000 —Å—É–º' / '–¥–æ 800 euro'"""
    pattern = r"–¥–æ\s*(\d+)\s*(\$|usd|–¥–æ–ª–ª–∞—Ä|–¥–æ–ª–ª|—Å—É–º|uzs|‚ÇΩ|—Ä—É–±|eur|‚Ç¨)"
    m = re.search(pattern, query.lower())
    if m:
        amount = int(m.group(1))
        currency = m.group(2)
        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª—é—Ç
        if currency in ["$", "usd", "–¥–æ–ª–ª–∞—Ä", "–¥–æ–ª–ª"]:
            currency = "USD"
        elif currency in ["—Å—É–º", "uzs"]:
            currency = "UZS"
        elif currency in ["‚ÇΩ", "—Ä—É–±"]:
            currency = "RUB"
        elif currency in ["eur", "‚Ç¨"]:
            currency = "EUR"
        return amount, currency
    return None, None

# ============ –ú–ï–ù–Æ ============
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç –ù–∞–π—Ç–∏ —Ç—É—Ä", callback_data="find_tour")],
        [InlineKeyboardButton(text="üî• –î–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã", callback_data="cheap_tours")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")],
        [InlineKeyboardButton(text="üí∞ –ü—Ä–∞–π—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="price")],
    ])

def back_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
    ])

# ============ OPENAI ============
async def ask_gpt(prompt: str) -> str:
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "–¢—ã —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.4
    }
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"]

# ============ –ü–†–û–ì–†–ï–°–° ============
async def show_progress(chat_id: int, bot: Bot):
    steps = [
        "ü§î –î—É–º–∞—é...",
        "üîç –ò—â—É –≤–∞—Ä–∏–∞–Ω—Ç—ã...",
        "üìä –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏...",
        "‚úÖ –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."
    ]
    msg = await bot.send_message(chat_id, steps[0])
    for step in steps[1:]:
        await asyncio.sleep(2)
        try:
            await bot.edit_message_text(step, chat_id, msg.message_id)
        except Exception:
            pass
    return msg

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —É–º–Ω—ã–π —Ç—É—Ä-–±–æ—Ç ü§ñ\n\n"
        "–ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ **—Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞** üèñÔ∏è\n\n"
        "–í—ã–±–∏—Ä–∞–π –æ–ø—Ü–∏—é –Ω–∏–∂–µ –∏ –ø–æ–µ—Ö–∞–ª–∏! üöÄ",
        parse_mode="Markdown",
        reply_markup=main_menu(),
    )

@dp.message()
async def handle_plain_text(message: types.Message):
    query = message.text.strip()
    progress_msg = await show_progress(message.chat.id, bot)

    premium = await is_premium(message.from_user.id)

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞ ---
    budget, currency = parse_budget(query)
    if budget:
        tours = await get_latest_tours(limit=20, hours=24)
        tours = [t for t in tours if t["currency"] == currency and t["price"] <= budget]
        header = f"üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–∞—à—ë–ª —Ç—É—Ä—ã –¥–æ {budget} {currency}:"
    else:
        tours = await get_latest_tours(query=query, limit=5, hours=24)
        header = f"üìã –ù–∞—à—ë–ª —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"

    if not tours:
        reply = f"‚ö†Ô∏è –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Ç—É—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}."
        gpt_suggestion = await ask_gpt(f"–ü–æ–¥—Å–∫–∞–∂–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞: {query}.")
        reply += "\n\nüí° –°–æ–≤–µ—Ç—ã: " + gpt_suggestion
        await bot.edit_message_text(
            text=reply,
            chat_id=message.chat.id,
            message_id=progress_msg.message_id,
            reply_markup=back_menu()
        )
        return

    # --- —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
    if premium:
        text = "\n\n".join([
            f"üåç {t['country']} {t['city'] or ''}\n"
            f"üí≤ {t['price']} {t['currency']}\n"
            f"üè® {t['hotel'] or '–û—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìÖ {t['dates'] or '–î–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"üìù {t['description'][:120]+'...' if t['description'] else ''}\n"
            f"üîó {t['source_url'] or ''}"
            for t in tours
        ])
    else:
        text = "\n\n".join([
            f"üåç {t['country']} {t['city'] or ''}\n"
            f"üí≤ {t['price']} {t['currency']}\n"
            f"üè® {t['hotel'] or '–û—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìÖ {t['dates'] or '–î–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"üìù {t['description'][:60]+'...' if t['description'] else ''}"
            for t in tours
        ])

    await bot.edit_message_text(
        text=f"{header}\n\n{text}",
        chat_id=message.chat.id,
        message_id=progress_msg.message_id,
        reply_markup=back_menu()
    )

# ============ CALLBACKS ============
@dp.callback_query(F.data == "menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())

@dp.callback_query(F.data == "about")
async def about(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üåê –ú—ã ‚Äî —á–∞—Å—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã **TripleA**.\n\n"
        "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        "üèùÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç—É—Ä—ã\n"
        "üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞",
        parse_mode="Markdown",
        reply_markup=back_menu(),
    )

@dp.callback_query(F.data == "price")
async def price(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ TripleA Travel:\n\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî —Ü–µ–Ω—ã + –æ—Ç–µ–ª–∏ + –¥–∞—Ç—ã\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º ‚Äî –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç (–æ—Ç–µ–ª–∏, –æ–ø–∏—Å–∞–Ω–∏—è, —Å—Å—ã–ª–∫–∏)\n\n"
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º —Å–∫–æ—Ä–æ üîë",
        reply_markup=back_menu(),
    )

@dp.callback_query(F.data == "find_tour")
async def find_tour(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –±—é–¥–∂–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ç—É—Ä—ã –¥–æ 1000 –¥–æ–ª–ª–∞—Ä–æ–≤'):",
        reply_markup=back_menu()
    )

@dp.callback_query(F.data == "cheap_tours")
async def cheap_tours(callback: types.CallbackQuery):
    tours = await get_latest_tours(limit=5, hours=24)
    if not tours:
        await callback.message.edit_text("‚ö†Ô∏è –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–µ—à—ë–≤—ã—Ö —Ç—É—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_menu())
        return

    text = "\n".join([
        f"üåç {t['country']} {t['city'] or ''} ‚Äî üí≤ {t['price']} {t['currency']}"
        for t in tours
    ])

    await callback.message.edit_text(
        f"üî• –°–≤–µ–∂–∏–µ –¥–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã:\n\n{text}",
        reply_markup=back_menu()
    )

# ============ FASTAPI ============
@app.on_event("startup")
async def on_startup():
    init_db()
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    logging.info("üõë Shutdown event ‚Äî webhook –ù–ï —É–¥–∞–ª—è–µ—Ç—Å—è")
    await bot.session.close()

@app.post("/webhook")
async def webhook_handler(request: Request):
    update = types.Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}

# ====== HEALTH CHECK + ROOT ======
@app.get("/healthz", include_in_schema=False)
@app.head("/healthz", include_in_schema=False)
async def health_check():
    return JSONResponse(content={"status": "ok"})

@app.get("/", include_in_schema=False)
@app.head("/", include_in_schema=False)
async def root():
    return JSONResponse(content={"status": "ok"})
