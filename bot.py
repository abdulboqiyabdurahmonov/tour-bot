import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

from psycopg import connect
from psycopg.rows import dict_row

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO)

# ============ ENV ============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TELEGRAM_TOKEN,
          default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()
app = FastAPI()

# ============ –ë–ê–ó–ê –î–ê–ù–ù–´–• ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True, row_factory=dict_row)

def init_db():
    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    created_at TIMESTAMP DEFAULT NOW()
                )
            """)
    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –≥–æ—Ç–æ–≤–∞")

def save_user(user: types.User):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        with get_conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (user_id, username, first_name, last_name)
                    VALUES (%s, %s, %s, %s)
                    ON CONFLICT (user_id) DO NOTHING
                """, (user.id, user.username, user.first_name, user.last_name))
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# ============ –•–ï–ù–î–õ–ï–†–´ ============
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    save_user(message.from_user)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç—É—Ä", callback_data="find_tour")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])

    name = message.from_user.first_name or "–¥—Ä—É–≥"
    username = f"(@{message.from_user.username})" if message.from_user.username else ""

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{name}* {username}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Ç—É—Ä—ã ‚úàÔ∏èüèù\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=kb
    )

@dp.callback_query(F.data == "find_tour")
async def find_tour(callback: types.CallbackQuery):
    await callback.message.answer("‚úàÔ∏è –í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å:")

@dp.callback_query(F.data == "help")
async def help_cmd(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚ÑπÔ∏è –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "üîç –ù–∞–π—Ç–∏ —Ç—É—Ä ‚Äì –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å\n"
    )

# ============ FASTAPI ============
@app.on_event("startup")
async def on_startup():
    init_db()
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω, –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        return JSONResponse(content={"ok": True})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞: {e}")
        return JSONResponse(content={"ok": False})

@app.get("/")
async def root():
    return {"status": "ok", "message": "ü§ñ Tour Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"}
