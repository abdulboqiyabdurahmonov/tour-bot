import os
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, Response
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from psycopg.rows import dict_row
from db_init import get_conn
from openai import AsyncOpenAI

# ================== LOGS ==================
logging.basicConfig(level=logging.INFO)

# ================== ENV ==================
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
PORT = int(os.getenv("PORT", 8080))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise RuntimeError("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ================== Aiogram / GPT ==================
bot = Bot(token=TOKEN)
dp = Dispatcher()
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# -------------------- KEYBOARDS --------------------
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåç –ù–∞–π—Ç–∏ —Ç—É—Ä")],
            [KeyboardButton(text="üî• –î–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"), KeyboardButton(text="üí∞ –ü—Ä–∞–π—Å –ø–æ–¥–ø–∏—Å–∫–∏")],
        ],
        resize_keyboard=True,
    )

def back_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )

# -------------------- DB --------------------
async def search_tours(query: str):
    """–ò—â–µ–º —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute(
            """
            SELECT country, city, price, currency, description, hotel, source_url, posted_at
            FROM tours
            WHERE posted_at >= NOW() - INTERVAL '24 hours'
              AND (
                   (country IS NOT NULL AND lower(country) LIKE %s)
                OR (city IS NOT NULL AND lower(city) LIKE %s)
              )
            ORDER BY price ASC
            LIMIT 5
            """,
            (f"%{query}%", f"%{query}%"),
        )
        return cur.fetchall()

async def get_cheap_tours(limit=5):
    """–°–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è"""
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute(
            """
            SELECT country, city, price, currency, description, hotel, source_url, posted_at
            FROM tours
            WHERE posted_at >= NOW() - INTERVAL '3 days'
            ORDER BY price ASC
            LIMIT %s
            """,
            (limit,),
        )
        return cur.fetchall()

# -------------------- GPT Format --------------------
async def format_with_gpt(query: str, results: list, premium: bool = False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ GPT (free = –±–µ–∑ –æ—Ç–µ–ª–µ–π –∏ —Å—Å—ã–ª–æ–∫)"""
    if not results:
        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}", –Ω–æ –≤ –±–∞–∑–µ –ø—É—Å—Ç–æ.
        –û—Ç–≤–µ—Ç—å:
        - –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ
        - –°–∫–∞–∂–∏, —á—Ç–æ —Ç—É—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç
        - –ü–æ–∂–µ–ª–∞–π —É–¥–∞—á–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–≥–ª—è–Ω—É—Ç—å –ø–æ–∑–∂–µ
        """
    else:
        if premium:
            visible = [
                {
                    "country": r["country"],
                    "city": r["city"],
                    "price": r["price"],
                    "currency": r.get("currency", ""),
                    "description": r["description"],
                    "hotel": r.get("hotel"),
                    "source_url": r.get("source_url"),
                    "posted_at": str(r["posted_at"]),
                }
                for r in results
            ]
            restriction = "–ü–æ–∫–∞–∂–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: —Å—Ç—Ä–∞–Ω—É, –≥–æ—Ä–æ–¥, —Ü–µ–Ω—É, –¥–∞—Ç—ã, –æ—Ç–µ–ª—å, —Å—Å—ã–ª–∫—É üîó."
        else:
            visible = [
                {
                    "country": r["country"],
                    "city": r["city"],
                    "price": r["price"],
                    "currency": r.get("currency", ""),
                    "posted_at": str(r["posted_at"]),
                }
                for r in results
            ]
            restriction = "–ü–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω—É, –≥–æ—Ä–æ–¥, —Ü–µ–Ω—É –∏ –¥–∞—Ç—É. –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –æ—Ç–µ–ª–∏ –∏ —Å—Å—ã–ª–∫–∏."

        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}".
        –í–æ—Ç –¥–∞–Ω–Ω—ã–µ (—Å—Ç—Ä–æ–≥–æ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ —Å–≤–µ—Ä—Ö —ç—Ç–æ–≥–æ):
        {visible}

        –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:
        {restriction}

        –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π (–¥–æ 700 —Å–∏–º–≤–æ–ª–æ–≤), –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —ç–º–æ–¥–∑–∏.
        """

    resp = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Ç—É—Ä—Ñ–∏—Ä–º—ã. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É—Ä—ã. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –±–∞–∑–µ. –û–±—â–∞–π—Å—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ."},
            {"role": "user", "content": prompt},
        ],
    )
    return resp.choices[0].message.content.strip()

# -------------------- HANDLERS --------------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ä-–±–æ—Ç ü§ñ\n"
        "–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —è –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.\n"
        "–í –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –æ—Ç–µ–ª—è–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ üîó\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é üëá",
        reply_markup=main_menu(),
    )

@dp.message(F.text == "üåç –ù–∞–π—Ç–∏ —Ç—É—Ä")
async def menu_tour(message: types.Message):
    await message.answer(
        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç—É—Ä, –Ω–∞–ø–∏—à–∏:\n\n`/tours <—Å—Ç—Ä–∞–Ω–∞/–≥–æ—Ä–æ–¥>`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/tours –¢—É—Ä—Ü–∏—è` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ `–¢—É—Ä—Ü–∏—è`",
        parse_mode="Markdown",
        reply_markup=back_menu(),
    )

@dp.message(F.text == "üî• –î–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã")
async def menu_cheap(message: types.Message):
    tours = await get_cheap_tours(limit=5)
    if not tours:
        await message.answer("üòî –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.")
        return
    # FREE —Ä–µ–∂–∏–º
    text = await format_with_gpt("–¥–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã", tours, premium=False)
    await message.answer(text, disable_web_page_preview=True, reply_markup=back_menu())

@dp.message(F.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
async def menu_about(message: types.Message):
    await message.answer(
        "‚ú® –ë–æ—Ç –∏—â–µ—Ç —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        "–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è üåç\n"
        "–í –ø–æ–¥–ø–∏—Å–∫–µ ‚Äî –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–µ–ª—è–º –∏ —Å—Å—ã–ª–∫–∞–º ‚úàÔ∏è",
        reply_markup=back_menu(),
    )

@dp.message(F.text == "üí∞ –ü—Ä–∞–π—Å –ø–æ–¥–ø–∏—Å–∫–∏")
async def menu_price(message: types.Message):
    await message.answer(
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—É—Ä—ã:\n\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 99 000 UZS\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî 249 000 UZS\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 449 000 UZS\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –æ—Ç–µ–ª–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ üîó",
        reply_markup=back_menu(),
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def menu_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())

@dp.message(Command("tours"))
async def tours_cmd(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) == 1:
        await message.answer(
            "–£–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/tours –¢—É—Ä—Ü–∏—è`",
            parse_mode="Markdown",
        )
        return
    query = args[1].lower()
    results = await search_tours(query)
    # FREE —Ä–µ–∂–∏–º
    text = await format_with_gpt(query, results, premium=False)
    await message.answer(text)

@dp.message(F.text)
async def handle_plain_text(message: types.Message):
    query = message.text.strip().lower()
    if query:
        results = await search_tours(query)
        text = await format_with_gpt(query, results, premium=False)
        await message.answer(text)

@dp.message(Command("debug"))
async def debug_cmd(message: types.Message):
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute("SELECT count(*) AS cnt FROM tours WHERE posted_at >= NOW() - INTERVAL '24 hours'")
        cnt = cur.fetchone()["cnt"]
    await message.answer(f"üìä –í –±–∞–∑–µ {cnt} —Ç—É—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ ‚úÖ")

# -------------------- FASTAPI --------------------
@asynccontextmanager
async def lifespan(app: FastAPI):
    base = os.getenv("RENDER_EXTERNAL_URL", f"http://0.0.0.0:{PORT}")
    webhook_url = f"{base}{WEBHOOK_PATH}"
    try:
        await bot.set_webhook(url=webhook_url, secret_token=WEBHOOK_SECRET)
        logging.info(f"‚úÖ Webhook set: {webhook_url}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
    yield
    try:
        await bot.delete_webhook()
        logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

app = FastAPI(lifespan=lifespan)

@app.get("/")
async def root():
    return {"status": "ok", "service": "tour-bot"}

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return Response(status_code=403)
    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
