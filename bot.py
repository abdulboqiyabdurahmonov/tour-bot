import os
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request, Response
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from psycopg.rows import dict_row
from db_init import get_conn
from openai import AsyncOpenAI


# ================== LOGS ==================
logging.basicConfig(level=logging.INFO)


# ================== ENV ==================
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
PORT = int(os.getenv("PORT", 8080))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise RuntimeError("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


# ================== Aiogram / GPT ==================
bot = Bot(token=TOKEN)
dp = Dispatcher()
client = AsyncOpenAI(api_key=OPENAI_API_KEY)


# -------------------- KEYBOARDS --------------------
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåç –ù–∞–π—Ç–∏ —Ç—É—Ä")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"), KeyboardButton(text="üí∞ –ü—Ä–∞–π—Å –ø–æ–¥–ø–∏—Å–∫–∏")],
        ],
        resize_keyboard=True,
    )


def back_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
    )


# -------------------- DB --------------------
async def search_tours(query: str):
    """–ò—â–µ–º —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute(
            """
            SELECT country, city, price, description, source_url, posted_at
            FROM tours
            WHERE posted_at >= NOW() - INTERVAL '24 hours'
              AND (
                   (country IS NOT NULL AND lower(country) LIKE %s)
                OR (city IS NOT NULL AND lower(city) LIKE %s)
              )
            ORDER BY price ASC
            LIMIT 5
            """,
            (f"%{query}%", f"%{query}%"),
        )
        return cur.fetchall()


async def format_with_gpt(query: str, results: list):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT"""
    if not results:
        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}", –Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.
        –û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–≥–ª—è–Ω—É—Ç—å –ø–æ–∑–∂–µ.
        """
    else:
        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}".
        –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤:
        {results}

        –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π (–¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤), –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ–¥–∞—é—â–∏–π –æ—Ç–≤–µ—Ç:
        - –î–æ–±–∞–≤—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —ç–º–æ–¥–∑–∏
        - –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ç—É—Ä—ã –∫–∞–∫ –º–∏–Ω–∏-–æ–ø–∏—Å–∞–Ω–∏—è
        - –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏, –¥–æ–±–∞–≤—å üîó
        """

    resp = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Ç—É—Ä—Ñ–∏—Ä–º—ã, –æ—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ–¥–∞—é—â–µ."},
            {"role": "user", "content": prompt},
        ],
    )
    return resp.choices[0].message.content.strip()


# -------------------- HANDLERS --------------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ä-–±–æ—Ç ü§ñ\n"
        "–ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é üëá",
        reply_markup=main_menu(),
    )


@dp.message(F.text == "üåç –ù–∞–π—Ç–∏ —Ç—É—Ä")
async def menu_tour(message: types.Message):
    await message.answer(
        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç—É—Ä, –Ω–∞–ø–∏—à–∏:\n\n`/tours <—Å—Ç—Ä–∞–Ω–∞/–≥–æ—Ä–æ–¥>`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/tours –¢—É—Ä—Ü–∏—è` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ `–¢—É—Ä—Ü–∏—è`",
        parse_mode="Markdown",
        reply_markup=back_menu(),
    )


@dp.message(F.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
async def menu_about(message: types.Message):
    await message.answer(
        "‚ú® –ë–æ—Ç –∏—â–µ—Ç —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        "–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ üèñÔ∏è",
        reply_markup=back_menu(),
    )


@dp.message(F.text == "üí∞ –ü—Ä–∞–π—Å –ø–æ–¥–ø–∏—Å–∫–∏")
async def menu_price(message: types.Message):
    await message.answer(
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—É—Ä—ã:\n\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü ‚Äî 99 000 UZS\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî 249 000 UZS\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 449 000 UZS\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ‚úàÔ∏è",
        reply_markup=back_menu(),
    )


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def menu_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())


@dp.message(Command("tours"))
async def tours_cmd(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) == 1:
        await message.answer(
            "–£–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/tours –¢—É—Ä—Ü–∏—è`",
            parse_mode="Markdown",
        )
        return

    query = args[1].lower()
    results = await search_tours(query)
    text = await format_with_gpt(query, results)
    await message.answer(text)


@dp.message(F.text)
async def handle_plain_text(message: types.Message):
    query = message.text.strip().lower()
    if query:
        results = await search_tours(query)
        text = await format_with_gpt(query, results)
        await message.answer(text)


@dp.message(Command("debug"))
async def debug_cmd(message: types.Message):
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute("SELECT count(*) AS cnt FROM tours WHERE posted_at >= NOW() - INTERVAL '24 hours'")
        cnt = cur.fetchone()["cnt"]
    await message.answer(f"üìä –í –±–∞–∑–µ {cnt} —Ç—É—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ ‚úÖ")


# -------------------- FASTAPI --------------------
@asynccontextmanager
async def lifespan(app: FastAPI):
    base = os.getenv("RENDER_EXTERNAL_URL", f"http://0.0.0.0:{PORT}")
    webhook_url = f"{base}{WEBHOOK_PATH}"

    try:
        await bot.set_webhook(url=webhook_url, secret_token=WEBHOOK_SECRET)
        logging.info(f"‚úÖ Webhook set: {webhook_url}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

    yield

    try:
        await bot.delete_webhook()
        logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")


app = FastAPI(lifespan=lifespan)


@app.get("/")
async def root():
    return {"status": "ok", "service": "tour-bot"}


@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return Response(status_code=403)

    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
