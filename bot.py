import os
import logging
import asyncio
import httpx
from datetime import datetime, timedelta

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramForbiddenError

from psycopg import connect
from psycopg.rows import dict_row

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO)

# ============ ENV ============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TELEGRAM_TOKEN,
          default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()
app = FastAPI()

# ============ –ë–î ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True)

def init_db():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            is_premium BOOLEAN DEFAULT FALSE,
            premium_until TIMESTAMP,
            searches_today INT DEFAULT 0,
            last_search_date DATE,
            created_at TIMESTAMP DEFAULT NOW()
        );
        """)
        cur.execute("""
        CREATE TABLE IF NOT EXISTS tours (
            id SERIAL PRIMARY KEY,
            country TEXT,
            city TEXT,
            hotel TEXT,
            price NUMERIC,
            currency TEXT,
            dates TEXT,
            description TEXT,
            source_url TEXT,
            posted_at TIMESTAMP DEFAULT NOW()
        );
        """)

async def is_premium(user_id: int):
    init_db()
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute("SELECT is_premium, premium_until FROM users WHERE user_id = %s", (user_id,))
        row = cur.fetchone()
        if not row:
            cur.execute("INSERT INTO users (user_id, is_premium, searches_today, last_search_date) VALUES (%s, %s, 0, CURRENT_DATE)", (user_id, False))
            return False
        if row["premium_until"] and row["premium_until"] > datetime.utcnow():
            return True
        return row["is_premium"]

async def increment_search(user_id: int):
    """–°—á—ë—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ (–ª–∏–º–∏—Ç 5/–¥–µ–Ω—å)."""
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute("SELECT searches_today, last_search_date FROM users WHERE user_id = %s", (user_id,))
        row = cur.fetchone()
        if not row:
            return 0
        today = datetime.utcnow().date()
        if row["last_search_date"] != today:
            cur.execute("UPDATE users SET searches_today = 1, last_search_date = %s WHERE user_id = %s", (today, user_id))
            return 1
        else:
            new_count = row["searches_today"] + 1
            cur.execute("UPDATE users SET searches_today = %s WHERE user_id = %s", (new_count, user_id))
            return new_count

async def get_latest_tours(query: str = None, limit: int = 5, hours: int = 24, max_price: int = None):
    sql = """
        SELECT country, city, hotel, price, currency, dates, description, source_url, posted_at
        FROM tours
        WHERE posted_at >= NOW() - (%s || ' hours')::interval
    """
    params = [str(hours)]

    if query:
        sql += " AND (LOWER(country) LIKE %s OR LOWER(city) LIKE %s)"
        q = f"%{query.lower()}%"
        params.extend([q, q])

    if max_price:
        sql += " AND price <= %s"
        params.append(max_price)

    sql += " ORDER BY posted_at DESC LIMIT %s"
    params.append(limit)

    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute(sql, params)
        return cur.fetchall()

# ============ –ú–ï–ù–Æ ============
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç –ù–∞–π—Ç–∏ —Ç—É—Ä", callback_data="find_tour")],
        [InlineKeyboardButton(text="üî• –î–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã", callback_data="cheap_tours")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")],
        [InlineKeyboardButton(text="üí∞ –ü—Ä–∞–π—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="price")],
        [InlineKeyboardButton(text="üîë –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º", callback_data="buy_premium")],
    ])

def back_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
    ])

# ============ GPT ============
async def ask_gpt(prompt: str) -> str:
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "–¢—ã —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.4
    }
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"]

# ============ –ü–†–û–ì–†–ï–°–° ============
async def show_progress(chat_id: int, bot: Bot):
    steps = ["ü§î –î—É–º–∞—é...", "üîç –ò—â—É —Ç—É—Ä—ã...", "üìä –°—Ä–∞–≤–Ω–∏–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã...", "‚úÖ –ì–æ—Ç–æ–≤–æ!"]
    try:
        msg = await bot.send_message(chat_id=chat_id, text=steps[0])
    except TelegramForbiddenError:
        logging.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return None

    for step in steps[1:]:
        await asyncio.sleep(2)
        try:
            await bot.edit_message_text(
                text=step,
                chat_id=chat_id,
                message_id=msg.message_id
            )
        except Exception:
            pass
    return msg

# ============ –§–û–†–ú–ê–¢ ============
def format_tour_basic(t):
    return (
        f"üåç *{t['country']} {t['city'] or ''}*\n"
        f"üí≤ {t['price']} {t['currency']}\n"
        f"üè® {t['hotel'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ {t['dates'] or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"‚Äî‚Äî‚Äî\n"
        f"_–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ü—Ä–µ–º–∏—É–º üîë_"
    )

def format_tour_premium(t):
    return (
        f"üåç *{t['country']} {t['city'] or ''}*\n"
        f"üí≤ {t['price']} {t['currency']}\n"
        f"üè® {t['hotel'] or '–û—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ {t['dates'] or '–î–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"üìù {t['description'] or ''}\n"
        f"üîó {t['source_url'] or ''}"
    )

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫!\n\n"
        "‚úàÔ∏è –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.\n\n"
        "üîì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî —Å—Ç—Ä–∞–Ω–∞, —Ü–µ–Ω–∞, –æ—Ç–µ–ª—å, –¥–∞—Ç—ã (–¥–æ 5 –ø–æ–∏—Å–∫–æ–≤/–¥–µ–Ω—å)\n"
        "üíé –ü—Ä–µ–º–∏—É–º ‚Äî –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∏, –¥–µ—Ç–∞–ª–∏ + –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–∏\n\n"
        "–í—ã–±–∏—Ä–∞–π, –∏ –ø–æ–µ—Ö–∞–ª–∏ üå¥",
        reply_markup=main_menu(),
    )

@dp.message(Command("premium"))
async def premium_info(message: types.Message):
    await message.answer(
        "üíé *–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ TripleA Travel*\n\n"
        "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–∏\n"
        "‚úÖ –ü–æ–ª–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–æ–≤\n"
        "‚úÖ –°—Å—ã–ª–∫–∏ –∏ –¥–µ—Ç–∞–ª–∏\n"
        "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∞—Ä—Ö–∏–≤—É –∑–∞ 30 –¥–Ω–µ–π\n"
        "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ç—É—Ä–∞—Ö\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: —Å–∫–æ—Ä–æ üîú\n\n"
        "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É üëâ @triplea_manager",
        reply_markup=back_menu()
    )

@dp.message()
async def handle_plain_text(message: types.Message):
    user_id = message.from_user.id
    query = message.text.strip()
    max_price = None

    if "–¥–æ" in query and any(x in query.lower() for x in ["usd", "–¥–æ–ª", "$"]):
        try:
            parts = query.lower().replace("usd", "").replace("–¥–æ–ª–ª–∞—Ä–æ–≤", "").replace("$", "").split("–¥–æ")
            max_price = int(parts[1].strip().split()[0])
        except Exception:
            pass

    premium = await is_premium(user_id)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
    if not premium:
        count = await increment_search(user_id)
        if count > 5:
            await message.answer(
                "‚ö†Ô∏è –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ (5/–¥–µ–Ω—å) –∏—Å—á–µ—Ä–ø–∞–Ω.\n\n"
                "üîë –ü–æ–¥–∫–ª—é—á–∏ –ü—Ä–µ–º–∏—É–º, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîë –ö—É–ø–∏—Ç—å –ü—Ä–µ–º–∏—É–º", callback_data="buy_premium")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
                ])
            )
            return

    progress_msg = await show_progress(message.chat.id, bot)
    if not progress_msg:
        return

    tours = await get_latest_tours(query=query if not max_price else None, limit=5, hours=24, max_price=max_price)

    if not tours:
        reply = f"‚ö†Ô∏è –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Ç—É—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
        gpt_suggestion = await ask_gpt(f"–ü–æ–¥—Å–∫–∞–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        reply += gpt_suggestion
        try:
            await bot.edit_message_text(
                text=reply,
                chat_id=message.chat.id,
                message_id=progress_msg.message_id,
                reply_markup=back_menu()
            )
        except Exception:
            pass
        return

    header = "üìã –ù–∞—à—ë–ª —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n"
    if max_price:
        header = f"üí∞ –°–≤–µ–∂–∏–µ —Ç—É—Ä—ã –¥–æ {max_price} USD:\n\n"

    if premium:
        text = "\n\n".join([format_tour_premium(t) for t in tours])
    else:
        text = "\n\n".join([format_tour_basic(t) for t in tours])

    try:
        await bot.edit_message_text(
            text=header + text,
            chat_id=message.chat.id,
            message_id=progress_msg.message_id,
            reply_markup=back_menu()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ============ CALLBACKS ============
@dp.callback_query(F.data == "menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())

@dp.callback_query(F.data == "about")
async def about(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üåê –ú—ã ‚Äî —á–∞—Å—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã **TripleA**.\n\n"
        "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
        "üèùÔ∏è –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è\n"
        "üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞",
        reply_markup=back_menu(),
    )

@dp.callback_query(F.data == "price")
async def price(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ TripleA Travel:\n\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî —Å—Ç—Ä–∞–Ω–∞, —Ü–µ–Ω–∞, –¥–∞—Ç—ã, –æ—Ç–µ–ª—å (–¥–æ 5 –ø–æ–∏—Å–∫–æ–≤/–¥–µ–Ω—å)\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º ‚Äî –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∏, –¥–µ—Ç–∞–ª–∏, –∞—Ä—Ö–∏–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "–ü—Ä–µ–º–∏—É–º —Å–∫–æ—Ä–æ üîë",
        reply_markup=back_menu(),
    )

@dp.callback_query(F.data == "buy_premium")
async def buy_premium(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîë –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ü—Ä–µ–º–∏—É–º, –Ω–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É üëâ @triplea_manager\n\n"
        "–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–ª–∞—Ç–∞ üí≥",
        reply_markup=back_menu()
    )

@dp.callback_query(F.data == "find_tour")
async def find_tour(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –±—é–¥–∂–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ç—É—Ä—ã –¥–æ 1000 USD'):",
        reply_markup=back_menu()
    )

@dp.callback_query(F.data == "cheap_tours")
async def cheap_tours(callback: types.CallbackQuery):
    tours = await get_latest_tours(limit=5, hours=24, max_price=500)
    if not tours:
        await callback.message.edit_text("‚ö†Ô∏è –î–µ—à—ë–≤—ã—Ö —Ç—É—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_menu())
        return

    text = "\n\n".join([format_tour_basic(t) for t in tours])
    await callback.message.edit_text(f"üî• –°–≤–µ–∂–∏–µ –¥–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã:\n\n{text}", reply_markup=back_menu())

# ============ FASTAPI ============
@app.on_event("startup")
async def on_startup():
    init_db()
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
    logging.info("üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")

@app.post("/webhook")
async def webhook_handler(request: Request):
    try:
        update = types.Update.model_validate(await request.json())
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞: {e}")
        return JSONResponse(status_code=500, content={"ok": False, "error": str(e)})
    return {"ok": True}

@app.get("/healthz")
async def health_check():
    return {"status": "ok"}

@app.get("/")
async def root():
    return {"status": "ok", "service": "TripleA Travel Bot"}
