import os
from fastapi import FastAPI, Request, Response
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command

from psycopg.rows import dict_row
from db_init import get_conn

from openai import AsyncOpenAI

# --- ENV ---
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
PORT = int(os.getenv("PORT", 8080))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# --- Aiogram ---
bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- GPT –∫–ª–∏–µ–Ω—Ç ---
client = AsyncOpenAI(api_key=OPENAI_API_KEY)


# -------------------- HANDLERS --------------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ä-–±–æ—Ç ü§ñ\n"
        "–ù–∞–ø–∏—à–∏ /tours <—Å—Ç—Ä–∞–Ω–∞/–≥–æ—Ä–æ–¥> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –Ω–∞–π–¥—É —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞).\n\n"
        "–ü—Ä–∏–º–µ—Ä: /tours –¢—É—Ä—Ü–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¢—É—Ä—Ü–∏—è"
    )


async def search_tours(query: str):
    """–ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –≤ –±–∞–∑–µ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute(
            """
            SELECT country, city, price, description, source_url, posted_at
            FROM tours
            WHERE posted_at >= NOW() - INTERVAL '24 hours'
              AND (
                   (country IS NOT NULL AND lower(country) LIKE %s)
                OR (city IS NOT NULL AND lower(city) LIKE %s)
              )
            ORDER BY price ASC
            LIMIT 5
            """,
            (f"%{query}%", f"%{query}%"),
        )
        return cur.fetchall()


async def format_with_gpt(query: str, results: list):
    """–û—Ñ–æ—Ä–º–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT"""
    if not results:
        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}", –Ω–æ –≤ –±–∞–∑–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.
        –û—Ç–≤–µ—Ç—å –≤–µ–∂–ª–∏–≤–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —á–µ–ª–æ–≤–µ—á–Ω–æ. 
        –ü–æ–¥—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–æ–≤—ã—Ö —Ç—É—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ —Å—Ç–æ–∏—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –ø–æ–∑–∂–µ.
        """
    else:
        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}".
        –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ (–∫–∞–∂–¥—ã–π —Ç—É—Ä: —Å—Ç—Ä–∞–Ω–∞, –≥–æ—Ä–æ–¥, —Ü–µ–Ω–∞, —Å—Å—ã–ª–∫–∞, –æ–ø–∏—Å–∞–Ω–∏–µ):
        {results}

        –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Å–∏–≤—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:
        - –í –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —ç–º–æ–¥–∑–∏
        - –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ç—É—Ä—ã –≤ –≤–∏–¥–µ –∂–∏–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–∫–æ—Ä–æ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è, –Ω–æ –Ω–µ —Å—É—Ö–æ–π —Å–ø–∏—Å–æ–∫)
        - –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏, —É–∫–∞–∂–∏ –∏—Ö —Å üîó
        - –ù–µ –ø—Ä–µ–≤—ã—à–∞–π 800 —Å–∏–º–≤–æ–ª–æ–≤
        """

    resp = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç —Ç—É—Ä—Ñ–∏—Ä–º—ã. –ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø—Ä–æ–¥–∞—é—â–µ."},
            {"role": "user", "content": prompt},
        ],
    )
    return resp.choices[0].message.content.strip()


@dp.message(Command("tours"))
async def tours_cmd(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) == 1:
        await message.answer(
            "–£–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/tours –¢—É—Ä—Ü–∏—è`",
            parse_mode="Markdown",
        )
        return

    query = args[1].lower()
    results = await search_tours(query)
    text = await format_with_gpt(query, results)
    await message.answer(text)


@dp.message(F.text)
async def handle_plain_text(message: types.Message):
    query = message.text.strip().lower()
    if not query:
        return
    results = await search_tours(query)
    text = await format_with_gpt(query, results)
    await message.answer(text)


@dp.message(Command("debug"))
async def debug_cmd(message: types.Message):
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute("SELECT count(*) AS cnt FROM tours WHERE posted_at >= NOW() - INTERVAL '24 hours'")
        cnt = cur.fetchone()["cnt"]
    await message.answer(f"–í –±–∞–∑–µ {cnt} —Ç—É—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ ‚úÖ")


# -------------------- FASTAPI --------------------
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "ok", "service": "tour-bot"}

@app.on_event("startup")
async def on_startup():
    base = os.getenv("RENDER_EXTERNAL_URL", f"http://0.0.0.0:{PORT}")
    webhook_url = f"{base}{WEBHOOK_PATH}"
    await bot.set_webhook(url=webhook_url, secret_token=WEBHOOK_SECRET)
    print(f"‚úÖ Webhook set: {webhook_url}")

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return Response(status_code=403)

    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
