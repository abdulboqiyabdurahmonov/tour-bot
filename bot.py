import os
import asyncio
from fastapi import FastAPI, Request, Response
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# --- Config ---
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
PORT = int(os.getenv("PORT", 8080))

if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# --- Aiogram ---
bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –ü—Ä–∏–º–µ—Ä–Ω–∞—è –±–∞–∑–∞ —Ç—É—Ä–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞) ===
TOURS = [
    {"title": "–ê–Ω—Ç–∞–ª–∏—è", "price": "500$", "nights": 7},
    {"title": "–ü—Ö—É–∫–µ—Ç", "price": "800$", "nights": 10},
    {"title": "–®–∞—Ä–º-—ç–ª—å-–®–µ–π—Ö", "price": "450$", "nights": 7},
    {"title": "–ë–æ–¥—Ä—É–º", "price": "600$", "nights": 7},
    {"title": "–ë–∞–ª–∏", "price": "1200$", "nights": 12},
]

# --- Handlers ---
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ä-–±–æ—Ç ü§ñ\n"
        "–ù–∞–ø–∏—à–∏ /tours <—Å—Ç—Ä–∞–Ω–∞/–≥–æ—Ä–æ–¥>, –∏ —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "–ü—Ä–∏–º–µ—Ä: /tours –¢—É—Ä—Ü–∏—è"
    )

@dp.message(Command("tours"))
async def tours_cmd(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) == 1:
        await message.answer("–£–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/tours –¢—É—Ä—Ü–∏—è`")
        return

    query = args[1].lower()
    results = [t for t in TOURS if query in t["title"].lower()]

    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    response = "üîé –ù–∞—à—ë–ª —Ç–∞–∫–∏–µ —Ç—É—Ä—ã:\n\n"
    for t in results:
        response += f"üåç {t['title']} ‚Äî {t['price']} –∑–∞ {t['nights']} –Ω–æ—á–µ–π\n"

    await message.answer(response)

# --- FastAPI ---
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "ok", "service": "tour-bot"}

@app.on_event("startup")
async def on_startup():
    base = os.getenv("RENDER_EXTERNAL_URL")
    if not base:
        base = os.getenv("PUBLIC_URL", f"http://0.0.0.0:{PORT}")
    webhook_url = f"{base}{WEBHOOK_PATH}"

    await bot.set_webhook(
        url=webhook_url,
        secret_token=WEBHOOK_SECRET
    )
    print(f"‚úÖ Webhook set: {webhook_url}")

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return Response(status_code=403)

    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)

    return {"ok": True}
