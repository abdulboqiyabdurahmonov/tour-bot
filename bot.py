import os
import json
from fastapi import FastAPI, Request, Response
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import gspread
from google.oauth2.service_account import Credentials

# --- ENV ---
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecret")
PORT = int(os.getenv("PORT", 8080))
SHEET_NAME = os.getenv("SHEET_NAME", "Tours")

if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# --- Google Sheets auth ---
creds_json = os.getenv("GOOGLE_SHEETS_CREDENTIALS")
if not creds_json:
    raise RuntimeError("GOOGLE_SHEETS_CREDENTIALS –Ω–µ –∑–∞–¥–∞–Ω")

creds_dict = json.loads(creds_json)
creds = Credentials.from_service_account_info(creds_dict, scopes=["https://www.googleapis.com/auth/spreadsheets"])
gc = gspread.authorize(creds)
sheet = gc.open(SHEET_NAME).sheet1  # –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞

# --- Aiogram ---
bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—É—Ä-–±–æ—Ç ü§ñ\n"
        "–ù–∞–ø–∏—à–∏ /tours <—Å—Ç—Ä–∞–Ω–∞/–≥–æ—Ä–æ–¥>, –∏ —è –Ω–∞–π–¥—É —Ç—É—Ä—ã –∏–∑ –±–∞–∑—ã.\n\n"
        "–ü—Ä–∏–º–µ—Ä: /tours –¢—É—Ä—Ü–∏—è"
    )

@dp.message(Command("tours"))
async def tours_cmd(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) == 1:
        await message.answer("–£–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/tours –¢—É—Ä—Ü–∏—è`")
        return

    query = args[1].lower()

    # —á–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    rows = sheet.get_all_records()
    results = [row for row in rows if query in row["–¢–µ–∫—Å—Ç"].lower()]

    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "üîé –ù–∞—à—ë–ª —Ç–∞–∫–∏–µ —Ç—É—Ä—ã:\n\n"
    for row in results[:5]:  # –º–∞–∫—Å–∏–º—É–º 5
        response += f"üåç {row['–¢–µ–∫—Å—Ç']}\nüí∞ {row.get('–¶–µ–Ω–∞', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\nüîó {row.get('–°—Å—ã–ª–∫–∞','')}\n\n"

    await message.answer(response.strip())

# --- FastAPI ---
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "ok", "service": "tour-bot"}

@app.on_event("startup")
async def on_startup():
    base = os.getenv("RENDER_EXTERNAL_URL", f"http://0.0.0.0:{PORT}")
    webhook_url = f"{base}{WEBHOOK_PATH}"
    await bot.set_webhook(url=webhook_url, secret_token=WEBHOOK_SECRET)
    print(f"‚úÖ Webhook set: {webhook_url}")

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return Response(status_code=403)

    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)

    return {"ok": True}
