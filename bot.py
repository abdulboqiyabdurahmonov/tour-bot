import os
import logging
import asyncio
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

from psycopg import connect
from psycopg.rows import dict_row

import httpx
from aiogram.utils.markdown import quote_md

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO)

# ============ ENV ============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="Markdown")
)
dp = Dispatcher()
app = FastAPI()


# ============ –ë–ê–ó–ê –î–ê–ù–ù–´–• ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True, row_factory=dict_row)


def init_db():
    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    created_at TIMESTAMP DEFAULT NOW()
                )
            """)
            cur.execute("""
                CREATE TABLE IF NOT EXISTS requests (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT REFERENCES users(user_id),
                    question TEXT,
                    answer TEXT,
                    created_at TIMESTAMP DEFAULT NOW()
                )
            """)
    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã users –∏ requests –≥–æ—Ç–æ–≤—ã")


def save_user(user: types.User):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO users (user_id, username, first_name, last_name)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (user_id) DO NOTHING
            """, (user.id, user.username, user.first_name, user.last_name))


def save_request(user_id: int, question: str, answer: str):
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO requests (user_id, question, answer)
                VALUES (%s, %s, %s)
            """, (user_id, question, answer))


# ============ GPT ============
async def ask_gpt(question: str) -> str:
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENAI_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "gpt-4o-mini",
                    "messages": [
                        {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç—É—Ä–∏–∑–º—É. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."},
                        {"role": "user", "content": question},
                    ],
                    "max_tokens": 300,
                }
            )
            data = response.json()
            return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."


# ============ –•–ï–ù–î–õ–ï–†–´ ============
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    save_user(message.from_user)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç—É—Ä", callback_data="find_tour")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])

    name = message.from_user.first_name or "–¥—Ä—É–≥"
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{quote_md(name)}*!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Ç—É—Ä—ã ‚úàÔ∏èüèù\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=kb
    )


@dp.callback_query(F.data == "find_tour")
async def find_tour(callback: types.CallbackQuery):
    await callback.message.answer("‚úàÔ∏è –í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≥–æ—Ä–æ–¥, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å:")


@dp.callback_query(F.data == "help")
async def help_cmd(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚ÑπÔ∏è –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "üîç –ù–∞–π—Ç–∏ —Ç—É—Ä ‚Äì –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å üòâ"
    )


@dp.message()
async def handle_question(message: types.Message):
    q = message.text.strip()
    answer = await ask_gpt(q)
    save_request(message.from_user.id, q, answer)

    await message.answer(quote_md(answer))


# ============ FASTAPI ============
@app.on_event("startup")
async def on_startup():
    init_db()
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω, –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")


@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        return JSONResponse(content={"ok": True})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞: {e}")
        return JSONResponse(content={"ok": False})


@app.get("/")
async def root():
    return {"status": "ok", "message": "ü§ñ Tour Bot —Å GPT —Ä–∞–±–æ—Ç–∞–µ—Ç!"}
