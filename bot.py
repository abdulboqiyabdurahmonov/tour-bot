import os
import logging
import asyncio
import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message

from psycopg import connect
from psycopg.rows import dict_row

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO)

# ============ ENV ============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TELEGRAM_TOKEN, parse_mode="Markdown")
dp = Dispatcher()
app = FastAPI()

# ============ –ë–î ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True, row_factory=dict_row)

def get_latest_tours(limit=5):
    """–ó–∞–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—É—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã collector"""
    with get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT id, title, price, details, source_url, created_at
                FROM tours
                ORDER BY created_at DESC
                LIMIT %s;
            """, (limit,))
            return cur.fetchall()

# ============ GPT ============
GPT_SYSTEM_PROMPT = """
–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º –æ—Ç TRIPLEA.
–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–º–∞—Ç–∏–∫–∏ —Ç—É—Ä–æ–≤, —Å—Ç—Ä–∞–Ω, –≤–∏–∑, –ø–µ—Ä–µ–ª—ë—Ç–æ–≤, –æ—Ç–µ–ª–µ–π, –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤.
–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏. 
–ü—Ä–µ–∑–µ–Ω—Ç—É–π TRIPLEA –∫–∞–∫ —ç–∫–æ—Å–∏—Å—Ç–µ–º—É –¥–ª—è —É–º–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.
"""

async def ask_gpt(user_message: str) -> str:
    try:
        async with httpx.AsyncClient(timeout=20) as client:
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENAI_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "gpt-4o-mini",
                    "messages": [
                        {"role": "system", "content": GPT_SYSTEM_PROMPT},
                        {"role": "user", "content": user_message},
                    ],
                    "temperature": 0.7,
                },
            )
            data = response.json()
            return data["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return "üòÖ –£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

# ============ HANDLERS ============
PREMIUM_USERS = {123456789}  # TODO: –≤—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–µ ID –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π *—É–º–Ω—ã–π –≥–∏–¥ –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º* –æ—Ç TRIPLEA ‚úàÔ∏èüåç\n"
        "–°–ø—Ä–∞—à–∏–≤–∞–π –æ —Ç—É—Ä–∞—Ö, —Å—Ç—Ä–∞–Ω–∞—Ö, –≤–∏–∑–∞—Ö, –æ—Ç–µ–ª—è—Ö –∏–ª–∏ –ø–µ—Ä–µ–ª—ë—Ç–∞—Ö ‚Äî –∏ —è –ø–æ–º–æ–≥—É.\n\n"
        "üî• –¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: *—Ç—É—Ä—ã*"
    )
    await message.answer(text)

@dp.message(F.text.lower() == "—Ç—É—Ä—ã")
async def show_tours(message: Message):
    tours = get_latest_tours()
    if not tours:
        await message.answer("üôÉ –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—É—Ä–æ–≤. –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ.")
        return

    for t in tours:
        base_info = f"üèñ *{t['title']}*\nüíµ –¶–µ–Ω–∞: {t['price']} USD\nüìå {t['details']}"
        if message.from_user.id in PREMIUM_USERS:
            base_info += f"\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫]({t['source_url']})"
        else:
            base_info += "\nüîí –°—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ *–ø—Ä–µ–º–∏—É–º* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."

        await message.answer(base_info)

@dp.message()
async def gpt_dialog(message: Message):
    reply = await ask_gpt(message.text)
    await message.answer(reply)

# ============ FASTAPI ============
@app.on_event("startup")
async def on_startup():
    logging.info("üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω, –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")

@app.post("/webhook")
async def webhook_handler(request: Request):
    update = await request.json()
    await dp.feed_update(bot, update)
    return {"status": "ok"}

@app.get("/")
async def root():
    return {"message": "TRIPLEA Travel Bot is running üöÄ"}
