import os
import logging
import asyncio
import httpx

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# ================= –õ–û–ì–ò =================
logging.basicConfig(level=logging.INFO)

# ================= ENV =================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ================= –ë–û–¢ =================
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="Markdown")
)
dp = Dispatcher()
app = FastAPI()

# ================= GPT =================
async def ask_gpt(prompt: str, premium: bool = False) -> str:
    """
    GPT-–æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–º–∞—Ç–∏–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.
    –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π ‚Üí –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
    –ü—Ä–µ–º–∏—É–º ‚Üí —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫.
    """
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENAI_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "gpt-4o-mini",
                    "messages": [
                        {"role": "system", "content": (
                            "–¢—ã ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º –∏–∑ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã TripleA. "
                            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ–ø–∏—Å—ã–≤–∞—Ç—å –æ—Ç–µ–ª–∏, "
                            "–ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—ã, –ø–æ–≥–æ–¥—É, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏. "
                            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Å–∏–≤–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. "
                            "–ò–∑–±–µ–≥–∞–π —Ç–µ–º –≤–Ω–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π."
                        )},
                        {"role": "user", "content": prompt},
                    ],
                    "temperature": 0.7,
                },
            )

        data = response.json()
        answer = data["choices"][0]["message"]["content"].strip()

        # –î–æ–ø. –ª–æ–≥–∏–∫–∞ –¥–ª—è Free / Premium
        if premium:
            answer += "\n\nüîó *–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—É—Ä–∞:* [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å](https://t.me/triplea_channel)"
        else:
            answer += "\n\n‚ú® –•–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—É—Ä–æ–≤? –ü–æ–¥–∫–ª—é—á–∏ Premium –¥–æ—Å—Ç—É–ø TripleA."

        return answer

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return "‚ö†Ô∏è –£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."


# ================= –•–ï–ù–î–õ–ï–†–´ =================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    intro = (
        "üåç –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *TripleA Travel Bot* ‚úàÔ∏è\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ *–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã, —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º, –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤*.\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n"
        "‚Äî ¬´–•–æ—á—É —Ç—É—Ä –≤ –¢—É—Ä—Ü–∏—é –≤ —Å–µ–Ω—Ç—è–±—Ä–µ¬ª\n"
        "‚Äî ¬´–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ë–∞–ª–∏ –≤ –æ–∫—Ç—è–±—Ä–µ?¬ª\n"
        "‚Äî ¬´–õ—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –¥–ª—è –¥–≤–æ–∏—Ö –≤ –î—É–±–∞–µ¬ª\n\n"
        "‚ú® –î–æ—Å—Ç—É–ø–Ω–æ: –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç—É—Ä–∞–º.\n"
        "üîí Premium: –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—É—Ä–∞.\n\n"
        "–ß—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å? üòä"
    )
    await message.answer(intro)


@dp.message(F.text)
async def handle_message(message: Message):
    user_text = message.text.strip()

    # –õ–æ–≥–∏–∫–∞ Premium (–Ω–∞–ø—Ä–∏–º–µ—Ä, VIP id-—à–Ω–∏–∫–∏)
    premium_users = {123456789, 987654321}  # —Å–ø–∏—Å–æ–∫ Telegram ID –ø—Ä–µ–º–∏—É–º–æ–≤
    is_premium = message.from_user.id in premium_users

    reply = await ask_gpt(user_text, premium=is_premium)
    await message.answer(reply)


# ================= WEBHOOK =================
@app.post("/webhook")
async def webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)

    return JSONResponse({"status": "ok"})


@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logging.warning("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –±–æ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç –∞–ø–¥–µ–π—Ç—ã.")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
