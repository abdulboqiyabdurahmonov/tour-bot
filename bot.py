import os
import logging
import asyncio
from datetime import datetime

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

from psycopg import connect
from psycopg.rows import dict_row
import openai

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO)

# ============ ENV ============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not DATABASE_URL or not WEBHOOK_URL or not OPENAI_API_KEY:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="Markdown")
)
dp = Dispatcher()
app = FastAPI()
openai.api_key = OPENAI_API_KEY

# ============ –ë–ê–ó–ê –î–ê–ù–ù–´–• ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True, row_factory=dict_row)

def init_db():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP DEFAULT NOW()
            );
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS requests (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                query TEXT,
                response TEXT,
                created_at TIMESTAMP DEFAULT NOW()
            );
        """)
    logging.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã")

def save_user(user: types.User):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (user_id) DO NOTHING;
        """, (user.id, user.username, user.first_name, user.last_name))

def save_request(user_id: int, query: str, response: str):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
            INSERT INTO requests (user_id, query, response)
            VALUES (%s, %s, %s);
        """, (user_id, query, response))

def search_tours(query: str):
    """–ò—â–µ–º —Ç—É—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
            SELECT * FROM tours
            WHERE country ILIKE %s OR city ILIKE %s OR hotel ILIKE %s
            ORDER BY posted_at DESC
            LIMIT 5;
        """, (f"%{query}%", f"%{query}%", f"%{query}%"))
        return cur.fetchall()

# ============ GPT ============
async def ask_gpt(user_text: str, tours=None, premium=False):
    context = "–¢—ã —Ç—Ä–µ–≤–µ–ª-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç —Ç—É—Ä, –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ —Ç—É—Ä—ã."
    if tours:
        tours_text = "\n".join([
            f"üè® {t['hotel'] or '–û—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'} | {t['city']}, {t['country']}\n"
            f"üíµ {t['price']} {t['currency']} | üìÖ {t['dates'] or '–¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"{t['description'][:120]}..."
            + (f"\nüîó https://t.me/{t['source_chat']}/{t['message_id']}" if premium else "")
            for t in tours
        ])
        user_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä: {user_text}\n\n–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{tours_text}"

    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": context},
            {"role": "user", "content": user_text}
        ],
        max_tokens=500,
        temperature=0.7
    )
    return response.choices[0].message["content"]

# ============ –•–ï–ù–î–õ–ï–†–´ ============
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    save_user(message.from_user)
    name = message.from_user.first_name or "–¥—Ä—É–≥"
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{name}*!\n\n"
        "–Ø —Ç–≤–æ–π —Ç—Ä–µ–≤–µ–ª-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–∏—à–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å, –∞ —è –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ —Ç—É—Ä—ã ‚úàÔ∏èüå¥\n\n"
        "_–ü—Ä–∏–º–µ—Ä: '–•–æ—á—É —Ç—É—Ä –≤ –ù—è—á–∞–Ω–≥ –Ω–∞ –æ–∫—Ç—è–±—Ä—å'_"
    )

@dp.message()
async def handle_message(message: types.Message):
    user_text = message.text.strip()
    user_id = message.from_user.id

    # 1. –ò—â–µ–º —Ç—É—Ä—ã
    tours = search_tours(user_text)
    premium = False  # –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏

    # 2. GPT –æ—Ç–≤–µ—á–∞–µ—Ç
    reply = await ask_gpt(user_text, tours, premium)

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_request(user_id, user_text, reply)

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(reply)

# ============ FASTAPI ============
@app.on_event("startup")
async def on_startup():
    init_db()
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω")

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        return JSONResponse(content={"ok": True})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return JSONResponse(content={"ok": False})

@app.get("/")
async def root():
    return {"status": "ok", "message": "ü§ñ Tour Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"}
