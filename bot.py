# bot.py
import os
import re
import logging
import asyncio
import random
import time
import json, base64
from dotenv import load_dotenv
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from psycopg.rows import dict_row

load_dotenv()  # –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç .env –ª–æ–∫–∞–ª—å–Ω–æ

# --- —Ç–æ–∫–µ–Ω
TOKEN = (
    os.getenv("BOT_TOKEN")
    or os.getenv("TELEGRAM_BOT_TOKEN")
    or os.getenv("TELEGRAM_TOKEN")   # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
)

if not TOKEN:
    raise RuntimeError("BOT_TOKEN/TELEGRAM_BOT_TOKEN/TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# --- —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from payments import (
    create_order, build_checkout_link, activate_after_payment,
    click_handle_callback, payme_handle_callback
)
from google.oauth2 import service_account
import gspread
from typing import Optional, Tuple, List, Dict
from html import escape
from collections import defaultdict
import secrets
from zoneinfo import ZoneInfo
from datetime import datetime, timedelta, timezone
from fastapi import FastAPI, Request, HTTPException, Header
from fastapi.responses import JSONResponse
from payments import db as _pay_db  # —Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ—è –ø–ª–∞—Ç–µ–∂–µ–π

# --- aiogram
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import Command  # aiogram v3.x

# --- psycopg
from psycopg import connect
from psycopg.rows import dict_row

# --- httpx –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
import httpx
from db_init import init_db, get_config, set_config  # –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –ë–î

# ================= –õ–û–ì–ò =================
logging.basicConfig(level=logging.INFO)

# ===== –ü–ê–ú–Ø–¢–¨ –î–ò–ê–õ–û–ì–ê =====
LAST_RESULTS: dict[int, list[dict]] = {}   # user_id -> –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã
LAST_QUERY_AT: dict[int, float] = {}       # user_id -> ts –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞
LAST_PREMIUM_HINT_AT: dict[int, float] = {}  # user_id -> ts –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–ª–∞—à–∫–∏ "–ø—Ä–µ–º–∏—É–º"
LAST_QUERY_TEXT: dict[int, str] = {}       # user_id -> –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–º—ã—Å–ª–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å
ASK_STATE: Dict[int, Dict] = {}
# –∫–ª—é—á -> {user_id, tour_id}
ANSWER_MAP: dict[str, dict] = {}

# –°–∏–Ω–æ–Ω–∏–º—ã/–∞–ª–∏–∞—Å—ã –≥–µ–æ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä–∏–∫)
ALIASES = {
    "—Ñ—É–∫—É–æ–∫": ["—Ñ—É–∫—É–æ–∫", "phu quoc", "phuquoc", "ph√∫ qu·ªëc"],
    "—à–∞—Ä–º": ["—à–∞—Ä–º", "sharm", "sharm el sheikh", "sharm-el-sheikh", "—à–∞—Ä–º-—ç–ª—å-—à–µ–π—Ö"],
    "–¥—É–±–∞–π": ["–¥—É–±–∞–π", "dubai", "dx–±"],
    "–Ω—è—á–∞–Ω–≥": ["–Ω—è—á–∞–Ω–≥", "nha trang", "nhatrang"],
    "–ö–∏—Ç–∞–π": ["–•–∞–π–Ω–∞–Ω—å", "Hainan", "Sanya", "‰∏â‰∫ö", "Haikou", "Êµ∑Âè£"],
    "–ò–Ω–¥–æ–Ω–µ–∑–∏—è": ["–ë–∞–ª–∏", "Bali", "Denpasar"],
}

def _expand_query(q: str) -> list[str]:
    low = q.lower().strip()
    for k, arr in ALIASES.items():
        if low in arr:
            return arr
    return [q]


def _should_hint_premium(user_id: int, cooldown_sec: int = 6*3600) -> bool:
    now = time.monotonic()
    ts = LAST_PREMIUM_HINT_AT.get(user_id, 0.0)
    if now - ts >= cooldown_sec:
        LAST_PREMIUM_HINT_AT[user_id] = now
        return True
    return False


def _remember_query(user_id: int, q: str):
    q = (q or "").strip()
    if q:
        LAST_QUERY_TEXT[user_id] = q


def _guess_query_from_link_phrase(text: str) -> Optional[str]:
    if not text:
        return None
    m = re.search(r"(?:–Ω–∞|–≤|–≤–æ)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë\- \t]{3,})", text, flags=re.I)
    frag = m.group(1) if m else text
    frag = re.sub(
        r"\b(—Å—Å—ã–ª–∫\w*|–∏—Å—Ç–æ—á–Ω–∏–∫\w*|–ø—Ä–∏—à–ª\w*|–æ—Ç–ø—Ä–∞–≤\w*|–º–Ω–µ|—ç—Ç–∏|–Ω–∞|–≤|–≤–æ|–ø–æ|–ø—Ä–æ|–æ—Ç—ã—â–∏|–Ω–∞–π–¥–∏|–ø–æ–∫–∞–∂–∏|—Ç—É—Ä—ã?|—Ç—É—Ä)\b",
        "",
        frag,
        flags=re.I
    )
    frag = re.sub(r"[.,;:!?]+$", "", frag).strip()
    return frag or None

# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ cb_country)
COUNTRY_EXPAND_ANY = {
    "–ö–∏—Ç–∞–π": ["–ö–∏—Ç–∞–π", "–•–∞–π–Ω–∞–Ω—å", "Hainan", "Sanya", "‰∏â‰∫ö", "Haikou", "Êµ∑Âè£"],
    "–ò–Ω–¥–æ–Ω–µ–∑–∏—è": ["–ò–Ω–¥–æ–Ω–µ–∑–∏—è", "–ë–∞–ª–∏", "Bali", "Denpasar"],
    "–¢–∞–∏–ª–∞–Ω–¥": ["–¢–∞–∏–ª–∞–Ω–¥", "–ü—Ö—É–∫–µ—Ç", "Phuket", "–°–∞–º—É–∏", "Koh Samui"],
    "–¢—É—Ä—Ü–∏—è": ["–¢—É—Ä—Ü–∏—è", "–ê–Ω—Ç–∞–ª—å—è", "Antalya", "–ê–ª–∞–Ω—å—è", "Alanya"],
    "–û–ê–≠": ["–û–ê–≠", "–î—É–±–∞–π", "Dubai", "–ê–±—É-–î–∞–±–∏", "Abu Dhabi"],
    "–í—å–µ—Ç–Ω–∞–º": ["–í—å–µ—Ç–Ω–∞–º", "–ù—è—á–∞–Ω–≥", "Nha Trang", "–§—É–∫—É–æ–∫", "Phu Quoc"],
    "–ú–∞–ª—å–¥–∏–≤—ã": ["–ú–∞–ª—å–¥–∏–≤—ã", "–ú–∞–ª–µ", "Male"],
    "–ì—Ä—É–∑–∏—è": ["–ì—Ä—É–∑–∏—è", "–ë–∞—Ç—É–º–∏", "Batumi", "–¢–±–∏–ª–∏—Å–∏", "Tbilisi"],
}

# ================= ENV =================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", os.getenv("WEBHOOK_URL", "https://tour-bot-rxi8.onrender.com"))
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

LEADS_CHAT_ID_ENV = (os.getenv("LEADS_CHAT_ID") or "").strip()
LEADS_TOPIC_ID = int(os.getenv("LEADS_TOPIC_ID", "0") or 0)
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0") or 0)
# --- Payme Merchant API (JSON-RPC) –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
PAYME_MERCHANT_XAUTH = os.getenv("PAYME_MERCHANT_XAUTH", "").strip()
PAYME_MERCHANT_KEY = os.getenv("PAYME_MERCHANT_KEY", "")
def _payme_auth_ok(x_auth: str | None) -> bool:
    return bool(x_auth) and secrets.compare_digest(x_auth, PAYME_MERCHANT_KEY)

def _payme_sandbox_ok(req: Request) -> bool:
    ip = req.client.host if req.client else ""
    # IP-–∞–¥—Ä–µ—Å–∞ –ø–µ—Å–æ—á–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏–º –≤ –ª–æ–≥–∞—Ö
    return ip in {"185.234.113.15", "213.230.116.57"}

# ===== PAYME =====
PAYME_ACCOUNT_FIELD = os.getenv("PAYME_ACCOUNT_FIELD", "order_id").strip()
PAYME_MERCHANT_ID = (os.getenv("PAYME_MERCHANT_ID") or "").strip()
FISCAL_IKPU = os.getenv("FISCAL_IKPU", "00702001001000001")   # —Ç–≤–æ–π –ò–ö–ü–£ (–º–æ–∂–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã–π)
FISCAL_VAT_PERCENT = int(os.getenv("FISCAL_VAT_PERCENT", "12"))

# Google Sheets ENV
SHEETS_CREDENTIALS_B64 = (os.getenv("SHEETS_CREDENTIALS_B64") or "").strip()
SHEETS_SPREADSHEET_ID = (os.getenv("SHEETS_SPREADSHEET_ID") or "").strip()
WORKSHEET_NAME = os.getenv("WORKSHEET_NAME", "–ó–∞—è–≤–∫–∏")
KB_SHEET_NAME = os.getenv("KB_SHEET_NAME", "KB")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

def build_payme_checkout_url(merchant_id: str, amount_tiyin: int, order_id: int, lang: str = "ru") -> str:
    if not merchant_id:
        raise ValueError("PAYME_MERCHANT_ID –ø—É—Å—Ç ‚Äî –Ω–µ –º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å —Å—Å—ã–ª–∫—É")

    amt = int(round(float(amount_tiyin)))
    if amt <= 0:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è Payme (—Ç–∏–π–∏–Ω—ã): {amount_tiyin}")

    ac = {PAYME_ACCOUNT_FIELD: int(order_id)}

    payload = {"m": merchant_id, "a": amt, "ac": ac, "l": lang}
    token = base64.b64encode(json.dumps(payload, separators=(",", ":")).encode("utf-8")).decode("ascii")
    return f"https://checkout.paycom.uz/{token}"

# ================= –ü–ê–ì–ò–ù–ê–¶–ò–Ø / –ü–û–î–ë–û–†–ö–ò =================
import time, secrets
from typing import Dict, Any, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

PAGER_STATE: Dict[str, Dict[str, Any]] = {}   # token -> state (—É —Ç–µ–±—è —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω)
PAGER_TTL_SEC = 3600                          # 1 —á–∞—Å (—É —Ç–µ–±—è —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω)

def _new_token() -> str:
    return secrets.token_urlsafe(8)

def _touch_state(token: str) -> None:
    st = PAGER_STATE.get(token)
    if st is not None:
        st["ts"] = time.monotonic()

def _cleanup_pager_state() -> None:
    now = time.monotonic()
    dead = [t for t, st in PAGER_STATE.items() if (now - st.get("ts", now)) > PAGER_TTL_SEC]
    for t in dead:
        PAGER_STATE.pop(t, None)

# ================= –°–ò–ù–û–ù–ò–ú–´ –°–¢–†–ê–ù =================
COUNTRY_SYNONYMS = {
    "–¢—É—Ä—Ü–∏—è":   ["–¢—É—Ä—Ü–∏—è", "Turkey", "T√ºrkiye"],
    "–û–ê–≠":      ["–û–ê–≠", "UAE", "United Arab Emirates", "Dubai", "Abu Dhabi"],
    "–¢–∞–∏–ª–∞–Ω–¥":  ["–¢–∞–∏–ª–∞–Ω–¥", "Thailand"],
    "–í—å–µ—Ç–Ω–∞–º":  ["–í—å–µ—Ç–Ω–∞–º", "Vietnam"],
    "–ì—Ä—É–∑–∏—è":   ["–ì—Ä—É–∑–∏—è", "Georgia", "Sakartvelo"],
    "–ú–∞–ª—å–¥–∏–≤—ã": ["–ú–∞–ª—å–¥–∏–≤—ã", "Maldives"],
    "–ö–∏—Ç–∞–π":    ["–ö–∏—Ç–∞–π", "China", "PRC", "People's Republic of China", "PR China", "–ö–ù–†"],
}

def country_terms_for(user_pick: str) -> list[str]:
    base = normalize_country(user_pick)
    return COUNTRY_SYNONYMS.get(base, [base])

# ====== –Ø–ó–´–ö–ò / –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø ======
SUPPORTED_LANGS = ("ru", "uz", "kk")
DEFAULT_LANG = "ru"  # —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

TRANSLATIONS = {
    "ru": {
        "choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:",
        "lang_saved": "–ì–æ—Ç–æ–≤–æ! –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
        "hello": "üåç –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>TripleA Travel Bot</b> ‚úàÔ∏è",
        "menu_find": "üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã",
        "menu_gpt": "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT",
        "menu_sub": "üîî –ü–æ–¥–ø–∏—Å–∫–∞",
        "menu_settings": "üåê –í—ã–±–æ—Ä —è–∑—ã–∫–∞",
        "desc_find": "‚Äî –ø–æ–∫–∞–∂—É –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏.",
        "desc_gpt": "‚Äî —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ —Å–µ–∑–æ–Ω—ã, –≤–∏–∑—ã –∏ –±—é–¥–∂–µ—Ç—ã.",
        "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    },
    "uz": {
        "choose_lang": "Xizmat tilini tanlang:",
        "lang_saved": "Tayyor! Til saqlandi.",
        "hello": "üåç Salom! Men ‚Äî <b>TripleA Travel Bot</b> ‚úàÔ∏è",
        "menu_find": "üéí Turlarni topish",
        "menu_gpt": "ü§ñ GPTdan so'rash",
        "menu_sub": "üîî Obuna",
        "menu_settings": "üåê Tilni tanlash",
        "desc_find": "‚Äî tugmalar bilan kartochkalarni ko‚Äòrsataman.",
        "desc_gpt": "‚Äî mavsumlar, vizalar va byudjetlar bo‚Äòyicha aqlli javoblar.",
        "back": "‚¨ÖÔ∏è Orqaga",
    },
    "kk": {
        "choose_lang": "“ö—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç—É —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        "lang_saved": "–î–∞–π—ã–Ω! –¢—ñ–ª —Å–∞“õ—Ç–∞–ª–¥—ã.",
        "hello": "üåç –°”ô–ª–µ–º! –ú–µ–Ω ‚Äî <b>TripleA Travel Bot</b> ‚úàÔ∏è",
        "menu_find": "üéí –¢—É—Ä —Ç–∞–±—É",
        "menu_gpt": "ü§ñ GPT-–∫–µ —Å“±—Ä–∞“õ",
        "menu_sub": "üîî –ñ–∞–∑—ã–ª—ã–º",
        "menu_settings": "üåê –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞—É",
        "desc_find": "‚Äî –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–º–µ–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–ª–∞—Ä–¥—ã –∫”©—Ä—Å–µ—Ç–µ–º—ñ–Ω.",
        "desc_gpt": "‚Äî –º–∞—É—Å—ã–º–¥–∞—Ä, –≤–∏–∑–∞–ª–∞—Ä –∂”ô–Ω–µ –±—é–¥–∂–µ—Ç—Ç–µ—Ä —Ç—É—Ä–∞–ª—ã –∞“õ—ã–ª–¥—ã –∂–∞—É–∞–ø—Ç–∞—Ä.",
        "back": "‚¨ÖÔ∏è –ê—Ä—Ç“õ–∞",
    },
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤/¬´–ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë¬ª
TRANSLATIONS["ru"].update({
    "filters.title": "–í—ã–±–µ—Ä–∏ –ø–æ–¥–±–æ—Ä–∫—É:",
    "filters.recent": "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ 72—á",
    "filters.country.turkiye": "üå¥ –¢—É—Ä—Ü–∏—è",
    "filters.country.uae": "üá¶üá™ –û–ê–≠",
    "filters.country.th": "üáπüá≠ –¢–∞–∏–ª–∞–Ω–¥",
    "filters.country.vn": "üáªüá≥ –í—å–µ—Ç–Ω–∞–º",
    "filters.budget.500": "üí∏ ‚â§ $500",
    "filters.budget.800": "üí∏ ‚â§ $800",
    "filters.budget.1000": "üí∏ ‚â§ $1000",
    "filters.sort.price": "‚ÜïÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ",
    "filters.more": "‚ûï –ï—â—ë —Ñ–∏–ª—å—Ç—Ä—ã —Å–∫–æ—Ä–æ",
    "more.title": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É?",
    "more.next": "‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë",
})

TRANSLATIONS["uz"].update({
    "filters.title": "Tanlovni belgilang:",
    "filters.recent": "üî• So‚Äònggi 72 soat",
    "filters.country.turkiye": "üå¥ Turkiya",
    "filters.country.uae": "üá¶üá™ BAA",
    "filters.country.th": "üáπüá≠ Tailand",
    "filters.country.vn": "üáªüá≥ Vetnam",
    "filters.budget.500": "üí∏ ‚â§ $500",
    "filters.budget.800": "üí∏ ‚â§ $800",
    "filters.budget.1000": "üí∏ ‚â§ $1000",
    "filters.sort.price": "‚ÜïÔ∏è Narx bo‚Äòyicha",
    "filters.more": "‚ûï Yaqinda qo‚Äòshamiz",
    "more.title": "Tanlovni davom ettiraymi?",
    "more.next": "‚û°Ô∏è Yana ko‚Äòrsat",
})

TRANSLATIONS["kk"].update({
    "filters.title": "–¢–∞“£–¥–∞“£—ã–∑:",
    "filters.recent": "üî• –°–æ“£“ì—ã 72 —Å–∞“ì",
    "filters.country.turkiye": "üå¥ –¢“Ø—Ä–∫–∏—è",
    "filters.country.uae": "üá¶üá™ –ë–ê”ò",
    "filters.country.th": "üáπüá≠ –¢–∞–π–ª–∞–Ω–¥",
    "filters.country.vn": "üáªüá≥ –í—å–µ—Ç–Ω–∞–º",
    "filters.budget.500": "üí∏ ‚â§ $500",
    "filters.budget.800": "üí∏ ‚â§ $800",
    "filters.budget.1000": "üí∏ ‚â§ $1000",
    "filters.sort.price": "‚ÜïÔ∏è –ë–∞“ì–∞ –±–æ–π—ã–Ω—àa",
    "filters.more": "‚ûï –ñ–∞“õ—ã–Ω–¥–∞",
    "more.title": "–ñ–∞–ª“ì–∞—Å—Ç—ã—Ä–∞–π—ã“õ –ø–∞?",
    "more.next": "‚û°Ô∏è –¢–∞“ì—ã –∫”©—Ä—Å–µ—Ç—É",
})

# --- –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—É—Ä–∞ (i18n) ---
TRANSLATIONS["ru"].update({
    "btn.ask": "‚úçÔ∏è –í–æ–ø—Ä–æ—Å –ø–æ —Ç—É—Ä—É",
    "btn.fav.add": "ü§ç –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
    "btn.fav.rm":  "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º",
    "btn.want": "üìù –•–æ—á—É —ç—Ç–æ—Ç —Ç—É—Ä",
    "btn.admin_open": "üîó –û—Ç–∫—Ä—ã—Ç—å (–∞–¥–º–∏–Ω)",
})

TRANSLATIONS["uz"].update({
    "btn.ask": "‚úçÔ∏è Tur bo‚Äòyicha savol",
    "btn.fav.add": "ü§ç Sevimlilarga",
    "btn.fav.rm":  "‚ù§Ô∏è Sevimlilarda",
    "btn.want": "üìù Ushbu turni xohlayman",
    "btn.admin_open": "üîó Ochish (admin)",
})

TRANSLATIONS["kk"].update({
    "btn.ask": "‚úçÔ∏è –¢—É—Ä —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“õ",
    "btn.fav.add": "ü§ç –¢–∞“£–¥–∞—É–ª—ã“ì–∞",
    "btn.fav.rm":  "‚ù§Ô∏è –¢–∞“£–¥–∞—É–ª—ã–ª–∞—Ä–¥–∞",
    "btn.want": "üìù –û—Å—ã —Ç—É—Ä–¥—ã “õ–∞–ª–∞–π–º—ã–Ω",
    "btn.admin_open": "üîó –ê—à—É—É (–∞–¥–º–∏–Ω)",
})

TRANSLATIONS["ru"].update({"weather.loading": "–°–µ–∫—É–Ω–¥—É, —É—Ç–æ—á–Ω—è—é –ø–æ–≥–æ–¥—É‚Ä¶"})
TRANSLATIONS["uz"].update({"weather.loading": "Bir soniya, ob-havoni aniqlayapman‚Ä¶"})
TRANSLATIONS["kk"].update({"weather.loading": "–ë—ñ—Ä —Å”ô—Ç, –∞—É–∞ —Ä–∞–π—ã–Ω –Ω–∞“õ—Ç—ã–ª–∞–ø –∂–∞—Ç—ã—Ä–º—ã–Ω‚Ä¶"})

TRANSLATIONS["ru"].update({"btn.weather": "üå§ –ü–æ–≥–æ–¥–∞"})
TRANSLATIONS["uz"].update({"btn.weather": "üå§ Ob-havo"})
TRANSLATIONS["kk"].update({"btn.weather": "üå§ –ê—É–∞ —Ä–∞–π—ã"})

TRANSLATIONS["ru"].update({
    "hello_again": "–ú–ï–ù–Æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ ‚úÖ",
})
TRANSLATIONS["uz"].update({
    "hello_again": "Menyu tanlangan tilga yangilandi ‚úÖ",
})
TRANSLATIONS["kk"].update({
    "hello_again": "–ú”ô–∑—ñ—Ä —Ç–∞“£–¥–∞–ª“ì–∞–Ω —Ç—ñ–ª–≥–µ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã ‚úÖ",
})

TRANSLATIONS["ru"].update({
    "filters.country.ge": "üá¨üá™ –ì—Ä—É–∑–∏—è",
    "filters.country.mv": "üèù –ú–∞–ª—å–¥–∏–≤—ã",
    "filters.country.cn": "üá®üá≥ –ö–∏—Ç–∞–π",
})
TRANSLATIONS["uz"].update({
    "filters.country.ge": "üá¨üá™ Gruziya",
    "filters.country.mv": "üèù Maldiv orollari",
    "filters.country.cn": "üá®üá≥ Xitoy",
})
TRANSLATIONS["kk"].update({
    "filters.country.ge": "üá¨üá™ –ì—Ä—É–∑–∏—è",
    "filters.country.mv": "üèù –ú–∞–ª—å–¥–∏–≤ –∞—Ä–∞–ª–¥–∞—Ä—ã",
    "filters.country.cn": "üá®üá≥ “ö—ã—Ç–∞–π",
})

REQUIRED_KEYS = {"menu_find","menu_gpt","menu_sub","menu_settings","lang_saved","hello_again","desc_find","desc_gpt"}
def _validate_i18n():
    import logging
    for lang, d in TRANSLATIONS.items():
        miss = REQUIRED_KEYS - set(d.keys())
        if miss:
            logging.warning("i18n: %s missing keys: %s", lang, ", ".join(sorted(miss)))
_validate_i18n()

# --- i18n helpers –¥–ª—è —Å—Ö–µ–º—ã TRANSLATIONS ---
DEFAULT_LANG = DEFAULT_LANG  # —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω –≤—ã—à–µ

def t(user_id: int | None, key: str) -> str:
    """
    –í–µ—Ä–Ω—ë—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É –∏–∑ TRANSLATIONS —Å —É—á—ë—Ç–æ–º —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –∏–∑ —è–∑—ã–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é,
    –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–ª—é—á (—á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å).
    """
    lang = _lang(user_id) if user_id else DEFAULT_LANG
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if lang in TRANSLATIONS and key in TRANSLATIONS[lang]:
        return TRANSLATIONS[lang][key]
    # –ø–æ—Ç–æ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫
    if key in TRANSLATIONS.get(DEFAULT_LANG, {}):
        return TRANSLATIONS[DEFAULT_LANG][key]
    # —Ñ–æ–ª–ª–±–µ–∫: —Å–∞–º –∫–ª—é—á
    return key

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —à–∏–º—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
def main_kb_for(user_id: int):
    return main_menu_kb(user_id)

def filters_inline_kb(user_id: int | None = None):
    return filters_inline_kb_for(user_id or 0)

# ================= –ë–û–¢ / APP =================
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
app = FastAPI()

# --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å—Ö–µ–º—ã
SCHEMA_COLS: set[str] = set()

def _has_cols(*names: str) -> bool:
    return all(n in SCHEMA_COLS for n in names)

def _select_tours_clause() -> str:
    base = "id, country, city, hotel, price, currency, dates, source_url, posted_at, photo_url, description"
    extras = []
    extras.append("board" if _has_cols("board") else "NULL AS board")
    extras.append("includes" if _has_cols("includes") else "NULL AS includes")
    return f"{base}, {', '.join(extras)}"

# ================= –ë–î =================

def get_conn():
    return connect(DATABASE_URL, autocommit=True, row_factory=dict_row)


def ensure_pending_wants_table():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS pending_wants (
                user_id BIGINT PRIMARY KEY,
                tour_id INTEGER NOT NULL,
                created_at TIMESTAMPTZ NOT NULL DEFAULT now()
            );
            """
        )


def ensure_leads_schema():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS leads (
                id BIGSERIAL PRIMARY KEY,
                full_name TEXT NOT NULL DEFAULT '',
                phone TEXT,
                tour_id INTEGER,
                note TEXT,
                created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
                user_id BIGINT
            );
            """
        )
        cur.execute("CREATE INDEX IF NOT EXISTS leads_created_at_idx ON leads(created_at);")


def ensure_favorites_schema():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS favorites (
                user_id BIGINT NOT NULL,
                tour_id INTEGER NOT NULL,
                created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
                PRIMARY KEY(user_id, tour_id)
            );
            """
        )


def ensure_questions_schema():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS questions (
                id BIGSERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                tour_id INTEGER,
                question TEXT NOT NULL,
                admin_chat_id BIGINT,
                admin_message_id BIGINT,
                status TEXT NOT NULL DEFAULT 'open',
                answer TEXT,
                created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
                answered_at TIMESTAMPTZ
            );
            """
        )
        cur.execute("CREATE INDEX IF NOT EXISTS questions_user_id_idx ON questions(user_id);")

def ensure_orders_columns():
    try:
        with _pay_db() as conn, conn.cursor() as cur:
            cur.execute("""
                ALTER TABLE IF EXISTS orders
                  ADD COLUMN IF NOT EXISTS provider_trx_id TEXT,
                  ADD COLUMN IF NOT EXISTS perform_time     TIMESTAMPTZ,
                  ADD COLUMN IF NOT EXISTS cancel_time      TIMESTAMPTZ,
                  ADD COLUMN IF NOT EXISTS reason           INTEGER
            """)
    except Exception:
        logging.exception("Ensure orders columns failed")

# ================== –ü–†–û–í–ï–†–ö–ê –õ–ò–î–û–í / –ü–û–î–ü–ò–°–ö–ò ==================

def user_has_leads(user_id: int) -> bool:
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("SELECT 1 FROM leads WHERE user_id=%s LIMIT 1;", (user_id,))
        return cur.fetchone() is not None


def user_has_subscription(user_id: int) -> bool:
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("SELECT val FROM app_config WHERE key=%s;", (f"sub_{user_id}",))
        row = cur.fetchone()
        return bool(row and row["val"] == "active")


def set_subscription(user_id: int, status: str):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(
            """
            INSERT INTO app_config(key, val) VALUES (%s, %s)
            ON CONFLICT(key) DO UPDATE SET val=EXCLUDED.val;
            """,
            (f"sub_{user_id}", status),
        )

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_payme_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Payme",
                url="https://checkout.paycom.uz/<–í–ê–®_–õ–ò–ù–ö_–ò–õ–ò_INVOICE_ID>"
            )]
        ]
    )

# ============== GOOGLE SHEETS ==============
_gs_client = None


def _get_gs_client():
    global _gs_client
    if _gs_client is not None:
        return _gs_client
    if not (SHEETS_CREDENTIALS_B64 and SHEETS_SPREADSHEET_ID):
        logging.info("GS: credentials or spreadsheet id not set")
        _gs_client = None
        return None
    try:
        try:
            decoded = base64.b64decode(SHEETS_CREDENTIALS_B64, validate=True)
            info = json.loads(decoded.decode("utf-8"))
        except Exception:
            info = json.loads(SHEETS_CREDENTIALS_B64)
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = service_account.Credentials.from_service_account_info(info, scopes=scopes)
        _gs_client = gspread.authorize(creds)
        logging.info("‚úÖ Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        return _gs_client
    except Exception as e:
        logging.error(f"GS init failed: {e}")
        _gs_client = None
        return None


def _ensure_ws(spreadsheet, title: str, header: list[str]) -> gspread.Worksheet:
    try:
        ws = spreadsheet.worksheet(title)
        return ws
    except gspread.exceptions.WorksheetNotFound:
        pass
    ws = spreadsheet.add_worksheet(title=title, rows=500, cols=max(12, len(header) + 2))
    if header:
        ws.append_row(header, value_input_option="USER_ENTERED")
    logging.info(f"GS: created worksheet '{title}'")
    return ws


def _ensure_header(ws, header: list[str]) -> None:
    try:
        current = ws.row_values(1)
    except Exception:
        current = []
    new = list(current)
    changed = False
    for h in header:
        if h not in current:
            new.append(h)
            changed = True
    if not changed:
        return
    need = len(new) - ws.col_count
    if need > 0:
        ws.add_cols(need)
    ws.update('1:1', [new])
    logging.info(f"GS: header updated -> {new}")


async def load_kb_context(max_rows: int = 60) -> str:
    try:
        gc = _get_gs_client()
        if not gc:
            return ""
        sh = gc.open_by_key(SHEETS_SPREADSHEET_ID)
        try:
            ws = sh.worksheet(KB_SHEET_NAME)
        except gspread.exceptions.WorksheetNotFound:
            return ""
        rows = ws.get_all_records()
        lines = []
        for r in rows[:max_rows]:
            topic = (r.get("topic") or r.get("–¢–µ–º–∞") or r.get("topic/country") or "").strip()
            fact = (r.get("fact") or r.get("–§–∞–∫—Ç") or r.get("note") or "").strip()
            if not fact:
                continue
            if topic:
                lines.append(f"- [{topic}] {fact}")
            else:
                lines.append(f"- {fact}")
        return "\n".join(lines)
    except Exception as e:
        logging.warning(f"KB load failed: {e}")
        return ""


async def load_recent_tours_context(max_rows: int = 12, hours: int = 120) -> str:
    try:
        cutoff = datetime.now(timezone.utc) - timedelta(hours=hours)
        with get_conn() as conn, conn.cursor() as cur:
            cur.execute(
                """
                SELECT country, city, hotel, COALESCE(board, '') AS board, COALESCE(includes, '') AS includes,
                       price, currency, dates, posted_at
                FROM tours
                WHERE posted_at >= %s
                ORDER BY posted_at DESC
                LIMIT %s
            """,
                (cutoff, max_rows),
            )
            rows = cur.fetchall()
        lines = []
        for r in rows:
            when = localize_dt(r.get("posted_at"))
            price = fmt_price(r.get("price"), r.get("currency"))
            hotel = clean_text_basic(strip_trailing_price_from_hotel(r.get("hotel") or "–ü–∞–∫–µ—Ç–Ω—ã–π —Ç—É—Ä"))
            board = (r.get("board") or "").strip()
            inc = (r.get("includes") or "").strip()
            extra = []
            if board:
                extra.append(f"–ø–∏—Ç–∞–Ω–∏–µ: {board}")
            if inc:
                extra.append(f"–≤–∫–ª—é—á–µ–Ω–æ: {inc}")
            extra_txt = f" ({'; '.join(extra)})" if extra else ""
            lines.append(
                f"- {r.get('country')} ‚Äî {r.get('city')}, {hotel}, {price}, –¥–∞—Ç—ã: {r.get('dates') or '‚Äî'}{extra_txt}. {when}"
            )
        return "\n".join(lines)
    except Exception as e:
        logging.warning(f"Recent context load failed: {e}")
        return ""


def append_lead_to_sheet(lead_id: int, user, phone: str, t: dict):
    try:
        gc = _get_gs_client()
        if not gc:
            return
        sh = gc.open_by_key(SHEETS_SPREADSHEET_ID)
        header = [
            "created_utc",
            "lead_id",
            "username",
            "full_name",
            "phone",
            "country",
            "city",
            "hotel",
            "price",
            "currency",
            "dates",
            "source_url",
            "posted_local",
            "board",
            "includes",
        ]
        ws = _ensure_ws(sh, WORKSHEET_NAME, header)
        _ensure_header(ws, header)

        full_name = f"{(getattr(user, 'first_name', '') or '').strip()} {(getattr(user, 'last_name', '') or '').strip()}".strip()
        username = f"@{user.username}" if getattr(user, "username", None) else ""
        posted_local = localize_dt(t.get("posted_at"))
        hotel_text = t.get("hotel") or derive_hotel_from_description(t.get("description")) or "–ü–∞–∫–µ—Ç–Ω—ã–π —Ç—É—Ä"
        hotel_clean = clean_text_basic(strip_trailing_price_from_hotel(hotel_text))

        ws.append_row(
            [
                datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S"),
                int(lead_id),
                username,
                full_name,
                phone,
                t.get("country") or "",
                t.get("city") or "",
                hotel_clean,
                t.get("price") or "",
                (t.get("currency") or "").upper(),
                t.get("dates") or "",
                t.get("source_url") or "",
                posted_local,
                (t.get("board") or ""),
                (t.get("includes") or ""),
            ],
            value_input_option="USER_ENTERED",
        )
    except Exception as e:
        logging.error(f"append_lead_to_sheet failed: {e}")


# ================= –£–¢–ò–õ–ò–¢–´ –ö–û–ù–§–ò–ì–ê =================

def resolve_leads_chat_id() -> int:
    val = get_config("LEADS_CHAT_ID", LEADS_CHAT_ID_ENV)
    try:
        return int(val) if val else 0
    except Exception:
        return 0

def main_menu_kb(user_id: int) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=t(user_id, "menu_find")),
             KeyboardButton(text=t(user_id, "menu_gpt"))],
            [KeyboardButton(text=t(user_id, "menu_sub")),
             KeyboardButton(text=t(user_id, "menu_settings"))],
        ],
        resize_keyboard=True,
    )

def filters_inline_kb_for(user_id: int) -> InlineKeyboardMarkup:
    # –£–¥–æ–±–Ω–µ–µ –¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä (label_key, callback_country)
    countries = [
        ("filters.country.turkiye", "–¢—É—Ä—Ü–∏—è"),
        ("filters.country.uae",      "–û–ê–≠"),
        ("filters.country.th",       "–¢–∞–∏–ª–∞–Ω–¥"),
        ("filters.country.vn",       "–í—å–µ—Ç–Ω–∞–º"),
        # –Ω–æ–≤—ã–µ:
        ("filters.country.ge",       "–ì—Ä—É–∑–∏—è"),
        ("filters.country.mv",       "–ú–∞–ª—å–¥–∏–≤—ã"),
        ("filters.country.cn",       "–ö–∏—Ç–∞–π"),
    ]

    rows = [
        [InlineKeyboardButton(text=t(user_id, "filters.recent"), callback_data="tours_recent")],
    ]

    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –¥–≤–∞ –≤ —Ä—è–¥
    row = []
    for key, country in countries:
        row.append(InlineKeyboardButton(text=t(user_id, key), callback_data=f"country:{country}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row:
        rows.append(row)

    # –ë—é–¥–∂–µ—Ç—ã + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ + more
    rows.append([
        InlineKeyboardButton(text=t(user_id, "filters.budget.500"),  callback_data="budget:USD:500"),
        InlineKeyboardButton(text=t(user_id, "filters.budget.800"),  callback_data="budget:USD:800"),
        InlineKeyboardButton(text=t(user_id, "filters.budget.1000"), callback_data="budget:USD:1000"),
    ])
    rows.append([InlineKeyboardButton(text=t(user_id, "filters.sort.price"), callback_data="sort:price_asc")])
    rows.append([InlineKeyboardButton(text=t(user_id, "filters.more"),       callback_data="noop")])

    return InlineKeyboardMarkup(inline_keyboard=rows)

def more_kb(token: str, next_offset: int, uid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=t(uid, "more.next"), callback_data=f"more:{token}:{next_offset}")],
            [InlineKeyboardButton(text=t(uid, "back"),      callback_data="back_filters")],
        ]
    )

def want_contact_kb_for(user_id: int) -> ReplyKeyboardMarkup:
    share_txt = t(user_id, "share_phone")  # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî t() –≤–µ—Ä–Ω—ë—Ç —Ä—É—Å—Å–∫–∏–π –¥–µ—Ñ–æ–ª—Ç –∏–ª–∏ —Å–∞–º –∫–ª—é—á
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=share_txt, request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
        selective=True,
    )

# ================= –ü–ê–ì–ò–ù–ê–¶–ò–Ø =================

def _new_token() -> str:
    return secrets.token_urlsafe(6).rstrip("=-_")


def _cleanup_pager_state():
    now = time.monotonic()
    to_del = []
    for k, v in PAGER_STATE.items():
        ts = v.get("ts", now)
        if now - ts > PAGER_TTL_SEC:
            to_del.append(k)
    for k in to_del:
        PAGER_STATE.pop(k, None)


def _touch_state(token: str):
    st = PAGER_STATE.get(token)
    if st:
        st["ts"] = time.monotonic()


# ================= –§–û–†–ú–ê–¢–´ =================

def fmt_price(price, currency) -> str:
    if price is None:
        return "‚Äî"
    try:
        p = int(float(price))
    except Exception:
        return escape(f"{price} {currency or ''}".strip())
    cur = (currency or "").strip().upper()
    if cur in {"$", "US$", "USD$", "USD"}:
        cur = "USD"
    elif cur in {"‚Ç¨", "EUR‚Ç¨", "EUR"}:
        cur = "EUR"
    elif cur in {"UZS", "–°–£–ú", "–°–£–ú.", "–°–£–ú–´", "–°–£–ú–û–í", "–°–£–ú–ú", "–°–£–ú–ú–´", "–°–û–ú", "–°–£–ú"}:
        cur = "UZS"
    return escape(f"{p:,} {cur}".replace(",", " "))


def safe(s: Optional[str]) -> str:
    return escape(s or "‚Äî")

# ================= –ü–û–ì–û–î–ê =================
WEATHER_CACHE: Dict[str, Tuple[float, Dict]] = {}
WEATHER_TTL = 900

WMO = {
    "ru": {
        0: "–Ø—Å–Ω–æ ‚òÄÔ∏è", 1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ üå§", 2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖÔ∏è", 3: "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
        45: "–¢—É–º–∞–Ω üå´", 48: "–ì–æ–ª–æ–ª—ë–¥–Ω—ã–π —Ç—É–º–∞–Ω üå´‚ùÑÔ∏è",
        51: "–ú–æ—Ä–æ—Å—å —Å–ª–∞–±–∞—è üå¶", 53: "–ú–æ—Ä–æ—Å—å —É–º–µ—Ä–µ–Ω–Ω–∞—è üå¶", 55: "–ú–æ—Ä–æ—Å—å —Å–∏–ª—å–Ω–∞—è üåß",
        61: "–î–æ–∂–¥—å —Å–ª–∞–±—ã–π üå¶", 63: "–î–æ–∂–¥—å —É–º–µ—Ä–µ–Ω–Ω—ã–π üåß", 65: "–î–æ–∂–¥—å —Å–∏–ª—å–Ω—ã–π üåß",
        66: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å —Å–ª–∞–±—ã–π üåß‚ùÑÔ∏è", 67: "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å —Å–∏–ª—å–Ω—ã–π üåß‚ùÑÔ∏è",
        71: "–°–Ω–µ–≥ —Å–ª–∞–±—ã–π ‚ùÑÔ∏è", 73: "–°–Ω–µ–≥ —É–º–µ—Ä–µ–Ω–Ω—ã–π ‚ùÑÔ∏è", 75: "–°–Ω–µ–≥ —Å–∏–ª—å–Ω—ã–π ‚ùÑÔ∏è",
        77: "–°–Ω–µ–∂–Ω–∞—è –∫—Ä—É–ø–∞ üå®", 80: "–õ–∏–≤–Ω–∏ —Å–ª–∞–±—ã–µ üå¶", 81: "–õ–∏–≤–Ω–∏ —É–º–µ—Ä–µ–Ω–Ω—ã–µ üåß", 82: "–õ–∏–≤–Ω–∏ —Å–∏–ª—å–Ω—ã–µ üåß",
        85: "–°–Ω–µ–≥–æ–ø–∞–¥ —Å–ª–∞–±—ã–π üå®", 86: "–°–Ω–µ–≥–æ–ø–∞–¥ —Å–∏–ª—å–Ω—ã–π üå®",
        95: "–ì—Ä–æ–∑–∞ ‚õà", 96: "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õàüßä", 99: "–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õàüßä",
    },
    "uz": {
        0: "Ochiq ‚òÄÔ∏è", 1: "Asosan ochiq üå§", 2: "Qisman bulutli ‚õÖÔ∏è", 3: "Bulutli ‚òÅÔ∏è",
        45: "Tuman üå´", 48: "Muzli tuman üå´‚ùÑÔ∏è",
        51: "Yengil mayda yomg‚Äòir üå¶", 53: "O‚Äòrtacha mayda yomg‚Äòir üå¶", 55: "Kuchli mayda yomg‚Äòir üåß",
        61: "Yengil yomg‚Äòir üå¶", 63: "O‚Äòrtacha yomg‚Äòir üåß", 65: "Kuchli yomg‚Äòir üåß",
        66: "Muzli yomg‚Äòir (yengil) üåß‚ùÑÔ∏è", 67: "Muzli yomg‚Äòir (kuchli) üåß‚ùÑÔ∏è",
        71: "Yengil qor ‚ùÑÔ∏è", 73: "O‚Äòrtacha qor ‚ùÑÔ∏è", 75: "Kuchli qor ‚ùÑÔ∏è",
        77: "Qor donachalari üå®", 80: "Yomg‚Äòir quyishi (yengil) üå¶", 81: "Yomg‚Äòir quyishi (o‚Äòrtacha) üåß", 82: "Yomg‚Äòir quyishi (kuchli) üåß",
        85: "Qor yog‚Äòishi (yengil) üå®", 86: "Qor yog‚Äòishi (kuchli) üå®",
        95: "Momaqaldiroq ‚õà", 96: "Momaqaldiroq va do‚Äòl ‚õàüßä", 99: "Kuchli momaqaldiroq va do‚Äòl ‚õàüßä",
    },
    "kk": {
        0: "–ê—Å–ø–∞–Ω –∞—à—ã“õ ‚òÄÔ∏è", 1: "–ö”©–±—ñ–Ω–µ –∞—à—ã“õ üå§", 2: "–ê—Ä–∞–ª–∞—Å –±“±–ª—Ç—Ç—ã ‚õÖÔ∏è", 3: "–ë“±–ª—Ç—Ç—ã ‚òÅÔ∏è",
        45: "–¢“±–º–∞–Ω üå´", 48: "–ú“±–∑–¥—ã —Ç“±–º–∞–Ω üå´‚ùÑÔ∏è",
        51: "“∞—Å–∞“õ –∂–∞“£–±—ã—Ä (”ô–ª—Å—ñ–∑) üå¶", 53: "“∞—Å–∞“õ –∂–∞“£–±—ã—Ä (–æ—Ä—Ç–∞—à–∞) üå¶", 55: "“∞—Å–∞“õ –∂–∞“£–±—ã—Ä (–∫“Ø—à—Ç—ñ) üåß",
        61: "–ñ–∞“£–±—ã—Ä (”ô–ª—Å—ñ–∑) üå¶", 63: "–ñ–∞“£–±—ã—Ä (–æ—Ä—Ç–∞—à–∞) üåß", 65: "–ñ–∞“£–±—ã—Ä (–∫“Ø—à—Ç—ñ) üåß",
        66: "–ú“±–∑–¥—ã –∂–∞“£–±—ã—Ä (”ô–ª—Å—ñ–∑) üåß‚ùÑÔ∏è", 67: "–ú“±–∑–¥—ã –∂–∞“£–±—ã—Ä (–∫“Ø—à—Ç—ñ) üåß‚ùÑÔ∏è",
        71: "“ö–∞—Ä (”ô–ª—Å—ñ–∑) ‚ùÑÔ∏è", 73: "“ö–∞—Ä (–æ—Ä—Ç–∞—à–∞) ‚ùÑÔ∏è", 75: "“ö–∞—Ä (–∫“Ø—à—Ç—ñ) ‚ùÑÔ∏è",
        77: "“ö–∞—Ä —Ç“Ø–π—ñ—Ä—à—ñ–∫—Ç–µ—Ä—ñ üå®", 80: "“ö“±–π—ã–Ω–¥—ã –∂–∞“£–±—ã—Ä (”ô–ª—Å—ñ–∑) üå¶", 81: "“ö“±–π—ã–Ω–¥—ã –∂–∞“£–±—ã—Ä (–æ—Ä—Ç–∞—à–∞) üåß", 82: "“ö“±–π—ã–Ω–¥—ã –∂–∞“£–±—ã—Ä (–∫“Ø—à—Ç—ñ) üåß",
        85: "“ö–∞—Ä –∂–∞—É—É (”ô–ª—Å—ñ–∑) üå®", 86: "“ö–∞—Ä –∂–∞—É—É (–∫“Ø—à—Ç—ñ) üå®",
        95: "–ù–∞–π–∑–∞“ì–∞–π ‚õà", 96: "–ù–∞–π–∑–∞“ì–∞–π, –±“±—Ä—à–∞“õ ‚õàüßä", 99: "–ö“Ø—à—Ç—ñ –Ω–∞–π–∑–∞“ì–∞–π, –±“±—Ä—à–∞“õ ‚õàüßä",
    },
}

def wmo_text(code: int, lang: str) -> str:
    return WMO.get(lang, WMO["ru"]).get(code, {
        "ru": "–ü–æ–≥–æ–¥–∞", "uz": "Ob-havo", "kk": "–ê—É–∞ —Ä–∞–π—ã"
    }[lang if lang in ("ru","uz","kk") else "ru"])


def _cleanup_weather_cache():
    now = time.time()
    for k, (ts, _) in list(WEATHER_CACHE.items()):
        if now - ts > WEATHER_TTL:
            WEATHER_CACHE.pop(k, None)


def _extract_place_from_weather_query(q: str) -> Optional[str]:
    txt = q.strip()

    # —É–±—Ä–∞—Ç—å —á–∞—Å—Ç—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ç—Ä—ë—Ö —è–∑—ã–∫–∞—Ö
    txt = re.sub(r"(—Å–µ–≥–æ–¥–Ω—è|—Å–µ–π—á–∞—Å|–∑–∞–≤—Ç—Ä–∞|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞|–ø–∂|pls|please|bugun|hozir|ertaga|iltimos|b√ºg—ñn|qaz—ñr|–µ—Ä—Ç–µ“£|”©—Ç—ñ–Ω–µ–º—ñ–Ω)",
                 "", txt, flags=re.I)

    # ¬´–ø–æ–≥–æ–¥–∞ –≤/–Ω–∞ ...¬ª, ¬´ob-havo ...¬ª, ¬´–∞—É–∞ —Ä–∞–π—ã ...¬ª
    patterns = [
        r"(?:–Ω–∞|–≤|–≤–æ|–ø–æ)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ëƒûƒüƒ∞ƒ±≈û≈ü√á√ß√ñ√∂√ú√º“ö“õ“í“ì“¢“£”ò”ô”®”©“∞“±“ö“õ“∫“ª º'\-\s]+)",
        r"(?:–ø–æ–≥–æ–¥[–∞—É—ã–µ]\s+)([A-Za-z–ê-–Ø–∞-—è–Å—ëƒûƒüƒ∞ƒ±≈û≈ü√á√ß√ñ√∂√ú√º“ö“õ“í“ì“¢“£”ò”ô”®”©“∞“±“ö“õ“∫“ª º'\-\s]+)",
        r"(?:ob[-\s]?havo|obhavo)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ëƒûƒüƒ∞ƒ±≈û≈ü√á√ß√ñ√∂√ú√º º'\-\s]+)",
        r"(?:–∞—É–∞\s*—Ä–∞–π—ã)\s+([A-Za-z–ê-–Ø–∞-—è–Å—ë“ö“õ“í“ì“¢“£”ò”ô”®”©“∞“±“ö“õ“∫“ª º'\-\s]+)",
    ]
    m = None
    for p in patterns:
        m = re.search(p, txt, flags=re.I)
        if m:
            break
    if not m:
        return None

    place = m.group(1)
    place = re.sub(r"[?!.,:;]+$", "", place).strip()
    place = re.sub(r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|—Å–µ–π—á–∞—Å|bugun|ertaga|hozir|–±“Ø–≥—ñ–Ω|–µ—Ä—Ç–µ“£|“õ–∞–∑—ñ—Ä)\b", "", place, flags=re.I).strip()
    place = re.sub(r"^(–æ—Å—Ç—Ä–æ–≤|oroli|–∞—Ä–∞–ª—ã)\s+", "", place, flags=re.I)
    return place or None

async def get_weather_text(place: str, lang: str = "ru") -> str:
    lang = lang if lang in ("ru", "uz", "kk") else "ru"

    texts = {
        "ask_place": {
            "ru": "–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥/–º–µ—Å—Ç–æ: –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ–≥–æ–¥–∞ –≤ –°—Ç–∞–º–±—É–ª–µ¬ª –∏–ª–∏ ¬´–ø–æ–≥–æ–¥–∞ –Ω–∞ –ë–∞–ª–∏¬ª.",
            "uz": "Shahar/joyni yozing: masalan, ¬´Istanbulda ob-havo¬ª yoki ¬´Balida ob-havo¬ª.",
            "kk": "“ö–∞–ª–∞–Ω—ã/–æ—Ä—ã–Ω–¥—ã –∂–∞–∑—ã“£—ã–∑: –º—ã—Å–∞–ª—ã, ¬´–°—Ç–∞–º–±“±–ª–¥–∞“ì—ã –∞—É–∞ —Ä–∞–π—ã¬ª –Ω–µ–º–µ—Å–µ ¬´–ë–∞–ª–∏–¥–µ –∞—É–∞ —Ä–∞–π—ã¬ª.",
        },
        "not_found": {
            "ru": "–ù–µ –Ω–∞—à—ë–ª –ª–æ–∫–∞—Ü–∏—é ¬´{q}¬ª. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ (–≥–æ—Ä–æ–¥/–æ—Å—Ç—Ä–æ–≤/—Å—Ç—Ä–∞–Ω–∞).",
            "uz": "¬´{q}¬ª joyi topilmadi. Boshqacha yozib ko‚Äòring (shahar/orol/mamlakat).",
            "kk": "¬´{q}¬ª –æ—Ä–Ω—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. –ë–∞—Å“õ–∞ —Ç“Ø—Ä–¥–µ –∂–∞–∑—ã“£—ã–∑ (“õ–∞–ª–∞/–∞—Ä–∞–ª/–µ–ª).",
        },
        "fetch_fail": {
            "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è ¬´{q}¬ª. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            "uz": "¬´{q}¬ª uchun ob-havo olinmadi. Keyinroq urinib ko‚Äòring.",
            "kk": "¬´{q}¬ª “Ø—à—ñ–Ω –∞—É–∞ —Ä–∞–π—ã–Ω –∞–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        },
        "label": {"ru": "–ü–æ–≥–æ–¥–∞", "uz": "Ob-havo", "kk": "–ê—É–∞ —Ä–∞–π—ã"},
        "now": {
            "ru": "–°–µ–π—á–∞—Å", "uz": "Hozir", "kk": "“ö–∞–∑—ñ—Ä",
        },
        "feels": {
            "ru": "–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫", "uz": "his qilinadi", "kk": "—Å–µ–∑—ñ–ª–µ–¥—ñ",
        },
        "humidity": {
            "ru": "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "uz": "Namlik", "kk": "–´–ª“ì–∞–ª–¥—ã–ª—ã“õ",
        },
        "wind": {
            "ru": "–ñ–µ–ª", "uz": "Shamol", "kk": "–ñ–µ–ª",
        },
        "precip_prob": {
            "ru": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è",
            "uz": "Bugun yog‚Äòingarchilik ehtimoli",
            "kk": "–ë“Ø–≥—ñ–Ω–≥—ñ –∂–∞—É—ã–Ω-—à–∞—à—ã–Ω —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã",
        },
        "retry": {
            "ru": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            "uz": "Ob-havo ma‚Äôlumotlarini olish muvaffaqiyatsiz. Birozdan so‚Äòng qayta urinib ko‚Äòring.",
            "kk": "–ê—É–∞ —Ä–∞–π—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∞–ª—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã. –ë—ñ—Ä–∞–∑–¥–∞–Ω —Å–æ“£ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.",
        },
    }

    if not place:
        return texts["ask_place"][lang]

    key = f"{lang}:{place.lower().strip()}"
    _cleanup_weather_cache()
    if key in WEATHER_CACHE:
        _, cached = WEATHER_CACHE[key]
        return cached["text"]

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            geo_r = await client.get(
                "https://geocoding-api.open-meteo.com/v1/search",
                params={"name": place, "count": 1, "language": lang},
            )
            if geo_r.status_code != 200 or not geo_r.json().get("results"):
                return texts["not_found"][lang].format(q=escape(place))

            g = geo_r.json()["results"][0]
            lat, lon = g["latitude"], g["longitude"]
            label_parts = [g.get("name")]
            if g.get("admin1"):
                label_parts.append(g["admin1"])
            if g.get("country"):
                label_parts.append(g["country"])
            label = ", ".join([p for p in label_parts if p])

            params = {
                "latitude": lat,
                "longitude": lon,
                "current": "temperature_2m,apparent_temperature,relative_humidity_2m,precipitation,weather_code,wind_speed_10m",
                "hourly": "precipitation_probability",
                "timezone": "auto",
            }
            w_r = await client.get("https://api.open-meteo.com/v1/forecast", params=params)
            if w_r.status_code != 200:
                return texts["fetch_fail"][lang].format(q=escape(label))

            data = w_r.json()
            cur = data.get("current", {})
            code = int(cur.get("weather_code", 0))
            desc = wmo_text(code, lang)
            t = cur.get("temperature_2m")
            feels = cur.get("apparent_temperature")
            rh = cur.get("relative_humidity_2m")
            wind = cur.get("wind_speed_10m")

            prob = None
            hourly = data.get("hourly", {})
            times = hourly.get("time", [])
            probs = hourly.get("precipitation_probability", [])
            if times and probs:
                today = (datetime.now(timezone.utc).astimezone()).strftime("%Y-%m-%d")
                prob = max((p for tt, p in zip(times, probs) if tt.startswith(today)), default=None)

            parts = [f"{texts['label'][lang]}: <b>{escape(label)}</b>", desc]
            if t is not None:
                tmp = f"{t:.0f}¬∞C"
                if feels is not None and abs(feels - t) >= 1:
                    tmp += f" ({texts['feels'][lang]} {feels:.0f}¬∞C)"
                parts.append(f"{texts['now'][lang]}: {tmp}")
            if rh is not None:
                parts.append(f"{texts['humidity'][lang]}: {int(rh)}%")
            if wind is not None:
                parts.append(f"{texts['wind'][lang]}: {wind:.1f} –º/—Å")
            if prob is not None:
                parts.append(f"{texts['precip_prob'][lang]}: {int(prob)}%")

            txt = " | ".join(parts)
            WEATHER_CACHE[key] = (time.time(), {"text": txt})
            return txt
    except Exception as e:
        logging.warning(f"get_weather_text failed: {e}")
        return texts["retry"][lang]

def clean_text_basic(s: Optional[str]) -> str:
    if not s:
        return "‚Äî"
    s = re.sub(r'[*_`]+', '', s)
    s = s.replace('|', ' ')
    s = re.sub(r'\s{2,}', ' ', s)
    return s.strip()


def strip_trailing_price_from_hotel(s: Optional[str]) -> Optional[str]:
    if not s:
        return s
    # —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—É—Å–æ–∫ —Å —Ü–µ–Ω–æ–π –∏ –≤–∞–ª—é—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    return re.sub(
        r'\s*[‚Äì‚Äî-]?\s*\d[\d\s.,]*(?:USD|EUR|UZS|RUB|–°–£–ú|—Å—É–º|—Ä—É–±|\$|‚Ç¨)\s*$',
        '',
        s,
        flags=re.I,
    ).strip()

def normalize_dates_for_display(s: Optional[str]) -> str:
    if not s:
        return "‚Äî"
    s = s.strip()
    m = re.fullmatch(r"(\d{1,2})\.(\d{1,2})\.(\d{2,4})\s*[‚Äì-]\s*(\d{1,2})\.(\d{1,2})\.(\d{2,4})", s)
    if not m:
        return escape(s)
    d1, m1, y1, d2, m2, y2 = m.groups()

    def _norm(d, mo, y):
        d = int(d)
        mo = int(mo)
        y = int(y)
        if y < 100:
            y += 2000 if y < 70 else 1900
        if mo > 12 and d <= 12:
            d, mo = mo, d
        return f"{d:02d}.{mo:02d}.{y:04d}"

    return f"{_norm(d1, m1, y1)}‚Äì{_norm(d2, m2, y2)}"

def normalize_currency(cur: str) -> str:
    cur = cur.strip().upper().replace("ÔºÑ", "$").replace("‚Ç¨", "EUR")
    if cur in {"$", "USD"}:
        return "USD"
    if cur in {"EUR"}:
        return "EUR"
    if cur in {"SUM", "UZ", "UZS"}:
        return "UZS"
    return cur

def localize_dt(dt: Optional[datetime]) -> str:
    if not isinstance(dt, datetime):
        return ""
    try:
        dt_local = dt if dt.tzinfo else dt.replace(tzinfo=ZoneInfo("UTC"))
        dt_local = dt_local.astimezone(TZ)
        return f"üïí {dt_local.strftime('%d.%m.%Y %H:%M')} (TST)"
    except Exception:
        return f"üïí {dt.strftime('%d.%m.%Y %H:%M')}"


CONTACT_STOP_WORDS = (
    "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤",
    "–±—Ä–æ–Ω–∏—Ä–æ–≤",
    "–∑–≤–æ–Ω–∏—Ç–µ",
    "—Ç–µ–ª:",
    "—Ç–µ–ª–µ—Ñ–æ–Ω",
    "whatsapp",
    "–≤–∞—Ü–∞–ø",
    "–º–µ–Ω–µ–¥–∂–µ—Ä",
    "–¥–∏—Ä–µ–∫—Ç",
    "–∞–¥—Ä–µ—Å",
    "@",
    "+998",
    "+7",
    "+380",
    "call-—Ü–µ–Ω—Ç—Ä",
    "–∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä",
)


def derive_hotel_from_description(desc: Optional[str]) -> Optional[str]:
    if not desc:
        return None
    for raw in desc.splitlines():
        line = raw.strip(" ‚Ä¢‚Äì‚Äî-")
        if not line or len(line) < 6:
            continue
        low = line.lower()
        if any(sw in low for sw in CONTACT_STOP_WORDS):
            break
        if re.search(r"\b(\d{3,5}\s?(usd|eur|uzs)|\d+–¥|\d+–Ω|all ?inclusive|ai|hb|bb|fb)\b", low, re.I):
            pass
        line = re.sub(r"^[\W_]{0,3}", "", line).strip()
        return line[:80]
    return None


def extract_meal(text_a: Optional[str], text_b: Optional[str] = None) -> Optional[str]:
    joined = " ".join([t or "" for t in (text_a, text_b)]).lower()
    if re.search(r"\buai\b|ultra\s*all", joined):
        return "UAI (ultra)"
    if re.search(r"\bai\b|all\s*inclusive|–≤—Å—ë –≤–∫–ª—é—á–µ–Ω–æ|–≤—Å–µ –≤–∫–ª—é—á–µ–Ω–æ", joined):
        return "AI (–≤—Å—ë –≤–∫–ª—é—á–µ–Ω–æ)"
    if re.search(r"\bhb\b|–ø–æ–ª—É–ø–∞–Ω—Å–∏", joined):
        return "HB (–ø–æ–ª—É–ø–∞–Ω—Å–∏–æ–Ω)"
    if re.search(r"\bbb\b|–∑–∞–≤—Ç—Ä–∞(–∫|–∫–∏)", joined):
        return "BB (–∑–∞–≤—Ç—Ä–∞–∫–∏)"
    if re.search(r"\bfb\b|–ø–æ–ª–Ω—ã–π\s*–ø–∞–Ω—Å", joined):
        return "FB (–ø–æ–ª–Ω—ã–π)"
    return None


# ================= –î–ë-–•–ï–õ–ü–ï–†–´ =================

import os
from urllib.parse import urlparse
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
def is_valid_url(u: str | None) -> bool:
    if not u:
        return False
    u = u.strip()
    if not u or len(u) > 512:
        return False
    p = urlparse(u)
    return p.scheme in ("http", "https") and bool(p.netloc)

async def safe_answer(msg: Message, *args, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å graceful-–¥–µ–≥—Ä–∞–¥–∞—Ü–∏–µ–π, –µ—Å–ª–∏ —Å–ª–æ–º–∞–Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞."""
    try:
        return await msg.answer(*args, **kwargs)
    except TelegramBadRequest as e:
        if "BUTTON_URL_INVALID" in str(e):
            # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≥–æ–≤–æ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            kwargs.pop("reply_markup", None)
            text = (kwargs.get("text") or args[0] if args else "") + "\n\n(–°—Å—ã–ª–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)"
            return await msg.answer(text)
        raise

# === –∑–∞–º–µ–Ω–∏—Ç–µ –≤–∞—à—É get_payme_kb –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é ===
def get_payme_kb() -> InlineKeyboardMarkup:
    PAYME_URL = os.getenv("PAYME_URL", "").strip()
    TG_SUPPORT = os.getenv("SUPPORT_USERNAME", "").lstrip("@").strip()

    rows: list[list[InlineKeyboardButton]] = []

    if is_valid_url(PAYME_URL):
        rows.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –≤ Payme", url=PAYME_URL)])

    # –∑–∞–ø–∞—Å–Ω–æ–π ¬´–∂–∏–≤–æ–π¬ª –∫–∞–Ω–∞–ª ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ —Ç–≥
    if TG_SUPPORT:
        rows.append([InlineKeyboardButton(text="üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä", url=f"https://t.me/{TG_SUPPORT}")])
    else:
        # —Å–æ–≤—Å–µ–º –æ—Ñ–ª–∞–π–Ω ‚Äî —Ö–æ—Ç—è –±—ã –∑–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ
        rows.append([InlineKeyboardButton(text="üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä (—Å–∫–æ—Ä–æ)", callback_data="noop:support")])

    return InlineKeyboardMarkup(inline_keyboard=rows)

def is_favorite(user_id: int, tour_id: int) -> bool:
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("SELECT 1 FROM favorites WHERE user_id=%s AND tour_id=%s LIMIT 1;", (user_id, tour_id))
        return cur.fetchone() is not None

def set_favorite(user_id: int, tour_id: int):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(
            """
            INSERT INTO favorites(user_id, tour_id) VALUES (%s, %s)
            ON CONFLICT (user_id, tour_id) DO NOTHING;
            """,
            (user_id, tour_id),
        )


def unset_favorite(user_id: int, tour_id: int):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("DELETE FROM favorites WHERE user_id=%s AND tour_id=%s;", (user_id, tour_id))


def create_lead(tour_id: int, phone: Optional[str], full_name: str, note: Optional[str] = None):
    try:
        with get_conn() as conn, conn.cursor() as cur:
            cur.execute(
                """
                INSERT INTO leads (full_name, phone, tour_id, note)
                VALUES (%s, %s, %s, %s)
                RETURNING id;
                """,
                (full_name, phone, tour_id, note),
            )
            row = cur.fetchone()
            return row["id"] if row else None
    except Exception as e:
        logging.error(f"create_lead failed: {e}")
        return None


def _tours_has_cols(*cols: str) -> Dict[str, bool]:
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(
            """
            SELECT column_name FROM information_schema.columns
            WHERE table_name = 'tours'
            """
        )
        have = {r["column_name"] for r in cur.fetchall()}
    return {c: (c in have) for c in cols}


async def load_recent_context(limit: int = 6) -> str:
    try:
        flags = _tours_has_cols("board", "includes", "price", "currency", "dates", "hotel", "city", "country")
        select_parts = ["country", "city", "COALESCE(hotel,'') AS hotel"]
        select_parts.append("price" if flags["price"] else "NULL::numeric AS price")
        select_parts.append("currency" if flags["currency"] else "NULL::text AS currency")
        select_parts.append("COALESCE(dates,'') AS dates" if flags["dates"] else "'' AS dates")
        select_parts.append("COALESCE(board,'') AS board" if flags["board"] else "'' AS board")
        select_parts.append("COALESCE(includes,'') AS includes" if flags["includes"] else "'' AS includes")
        sql = f"""
            SELECT {", ".join(select_parts)}
            FROM tours
            ORDER BY posted_at DESC NULLS LAST
            LIMIT %s
        """
        with get_conn() as conn, conn.cursor() as cur:
            cur.execute(sql, (limit,))
            rows = cur.fetchall()
        lines = []
        for r in rows:
            price = fmt_price(r.get("price"), r.get("currency")) if r.get("price") is not None else "—Ü–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
            hotel = (
                clean_text_basic(strip_trailing_price_from_hotel(r.get("hotel"))) if r.get("hotel") else "–ø–∞–∫–µ—Ç–Ω—ã–π —Ç—É—Ä"
            )
            parts = [
                f"{r.get('country') or '‚Äî'} ‚Äî {r.get('city') or '‚Äî'}",
                f"{hotel}",
                f"{price}",
            ]
            if r.get("dates"):
                parts.append(f"–¥–∞—Ç—ã: {normalize_dates_for_display(r.get('dates'))}")
            if r.get("board"):
                parts.append(f"–ø–∏—Ç–∞–Ω–∏–µ: {r.get('board')}")
            if r.get("includes"):
                parts.append(f"–≤–∫–ª—é—á–µ–Ω–æ: {r.get('includes')}")
            lines.append(" ‚Ä¢ ".join(parts))
        return "\n".join(lines)
    except Exception as e:
        logging.warning(f"Recent context load failed: {e}")
        return ""


def set_pending_want(user_id: int, tour_id: int):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(
            """
            INSERT INTO pending_wants(user_id, tour_id) VALUES (%s, %s)
            ON CONFLICT (user_id) DO UPDATE SET tour_id = EXCLUDED.tour_id, created_at = now();
            """,
            (user_id, tour_id),
        )


def get_pending_want(user_id: int) -> Optional[int]:
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("SELECT tour_id FROM pending_wants WHERE user_id=%s;", (user_id,))
        row = cur.fetchone()
        return row["tour_id"] if row else None


def del_pending_want(user_id: int):
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("DELETE FROM pending_wants WHERE user_id=%s;", (user_id,))

def _valid_xauth(val: str) -> bool:
    cand = set()
    mid = os.getenv("PAYME_MERCHANT_ID", "").strip()
    k_test = os.getenv("PAYME_MERCHANT_TEST_KEY", "").strip()
    k_prod = os.getenv("PAYME_MERCHANT_KEY", "").strip()
    k_raw = os.getenv("PAYME_MERCHANT_XAUTH", "").strip()
    if mid and k_test:
        cand.add("Basic " + base64.b64encode(f"{mid}:{k_test}".encode()).decode())
    if mid and k_prod:
        cand.add("Basic " + base64.b64encode(f"{mid}:{k_prod}".encode()).decode())
    if k_raw:
        cand.add(k_raw)
    return val in cand

def _payme_sandbox_ok(request) -> bool:
    """–ü—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—ã Payme –¥–∞–∂–µ –µ—Å–ª–∏ Basic –Ω–µ –¥–æ–µ—Ö–∞–ª."""
    try:
        ip = request.client.host if getattr(request, "client", None) else ""
    except Exception:
        ip = ""
    referer = request.headers.get("Referer", "")
    testop  = request.headers.get("Test-Operation", "")
    return (
        ip.startswith("185.234.113.")     # IP –ø–µ—Å–æ—á–Ω–∏—Ü—ã Payme
        or referer.startswith("http://test.paycom.uz")
        or testop == "Paycom"
    )

# ================= –ü–û–ò–°–ö –¢–£–†–û–í =================

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ –≤ —Ñ–∞–π–ª–µ ---
# from typing import Optional, List, Tuple
# from datetime import datetime, timedelta, timezone
# import logging

# –ú–∏–Ω–∏-—Å—Ç–æ—Ä–æ–∂–æ–∫ –ø–æ ¬´—è–≤–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–º¬ª —Ü–µ–Ω–∞–º (—á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å 5 USD –∑–∞ "–¥—Ä—É–≥–∞")
MIN_PRICE_BY_CURRENCY = {
    "USD": 30,   # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—ã –Ω–∏–∂–µ 30 USD
    "EUR": 30,
    "RUB": 3000,
}

# –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω (–∏ –∫–∞–∫ –æ–Ω–∏ –ª–µ–∂–∞—Ç –≤ –ë–î)
CANON_COUNTRY = {
    "–¢—É—Ä—Ü–∏—è": "–¢—É—Ä—Ü–∏—è",
    "–û–ê–≠": "–û–ê–≠",
    "–¢–∞–∏–ª–∞–Ω–¥": "–¢–∞–∏–ª–∞–Ω–¥",
    "–í—å–µ—Ç–Ω–∞–º": "–í—å–µ—Ç–Ω–∞–º",
    "–ì—Ä—É–∑–∏—è": "–ì—Ä—É–∑–∏—è",
    "–ú–∞–ª—å–¥–∏–≤—ã": "–ú–∞–ª—å–¥–∏–≤—ã",
    "–ö–∏—Ç–∞–π": "–ö–∏—Ç–∞–π",
    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏: "Turkiye": "–¢—É—Ä—Ü–∏—è", "UAE": "–û–ê–≠", ...
}

def normalize_country(name: str) -> str:
    name = (name or "").strip()
    return CANON_COUNTRY.get(name, name)

# === FETCH (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏) ===
# –¢—Ä–µ–±—É—é—Ç—Å—è: get_conn, _select_tours_clause, normalize_country, RECENT_EXPR, cutoff_utc
from typing import Optional, Tuple, List
import logging

async def fetch_tours(
    query: Optional[str] = None,
    *,
    country: Optional[str] = None,
    currency_eq: Optional[str] = None,
    max_price: Optional[float] = None,
    hours: int = 24,
    limit: int = 10,
    strict_recent: bool = True,
    # üëá —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏:
    limit_recent: Optional[int] = None,
    limit_fallback: Optional[int] = None,
) -> Tuple[List[dict], bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (rows, is_recent_window_used).
    –°–≤–µ–∂–µ—Å—Ç—å —Å—á–∏—Ç–∞–µ–º –ø–æ RECENT_EXPR (posted_at –∏ —Ç.–ø.).
    –ï—Å–ª–∏ strict_recent=False: —Å–Ω–∞—á–∞–ª–∞ H —á–∞—Å–æ–≤ ‚Üí 72—á ‚Üí –±–µ–∑ –æ–∫–Ω–∞.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã limit_recent/limit_fallback (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã) –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç –æ–±—â–∏–π limit.
    """
    try:
        where: List[str] = []
        params: List = []

        if query:
            where.append("(country ILIKE %s OR city ILIKE %s OR hotel ILIKE %s OR description ILIKE %s)")
            q = f"%{query}%"
            params += [q, q, q, q]

        if country:
            # –¥–æ–ø—É—Å–∫–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ (–¢–∞–∏–ª–∞–Ω–¥/Thailand/üáπüá≠)
            where.append("country ILIKE %s")
            params.append(f"%{normalize_country(country)}%")

        if currency_eq:
            where.append("currency = %s")
            params.append(currency_eq)

        if max_price is not None:
            where.append("price IS NOT NULL AND price <= %s")
            params.append(max_price)

        # –ª–∏–º–∏—Ç—ã —Å —É—á—ë—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        lim_recent = limit_recent if limit_recent is not None else limit
        lim_fb     = limit_fallback if limit_fallback is not None else limit

        # ORDER BY
        order_clause = (
            "ORDER BY price ASC NULLS LAST, posted_at DESC NULLS LAST"
            if max_price is not None
            else "ORDER BY posted_at DESC NULLS LAST"
        )

        select_list = _select_tours_clause()

        # -------- 1) –æ–∫–Ω–æ H —á–∞—Å–æ–≤ (recent) ----------
        recent_cond = f"{RECENT_EXPR} >= %s"
        recent_where = where + [recent_cond]
        recent_params = params + [cutoff_utc(hours)]

        sql_recent = (
            f"SELECT {select_list} FROM tours "
            + ("WHERE " + " AND ".join(recent_where) if recent_where else "")
            + f" {order_clause} LIMIT %s"
        )

        with get_conn() as conn, conn.cursor() as cur:
            cur.execute(sql_recent, recent_params + [lim_recent])
            rows = cur.fetchall()
            if rows or strict_recent:
                return rows, True

            # -------- 2) –æ–∫–Ω–æ 72 —á–∞—Å–∞ ----------
            cond72 = f"{RECENT_EXPR} >= %s"
            where72 = where + [cond72]
            params72 = params + [cutoff_utc(72)]

            sql72 = (
                f"SELECT {select_list} FROM tours "
                + ("WHERE " + " AND ".join(where72) if where72 else "")
                + f" {order_clause} LIMIT %s"
            )
            cur.execute(sql72, params72 + [lim_recent])
            rows72 = cur.fetchall()
            if rows72:
                return rows72, False

            # -------- 3) –±–µ–∑ –æ–∫–Ω–∞ (fallback) ----------
            sql_fb = (
                f"SELECT {select_list} FROM tours "
                + ("WHERE " + " AND ".join(where) if where else "")
                + f" {order_clause} LIMIT %s"
            )
            cur.execute(sql_fb, params + [lim_fb])
            return cur.fetchall(), False

    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ fetch_tours")
        return [], True

# === –ü–ê–ì–ò–ù–ê–¶–ò–Ø ===
async def fetch_tours_page(
    query: Optional[str] = None,
    *,
    country: Optional[str] = None,
    country_terms: Optional[list[str]] = None,
    any_terms: Optional[list[str]] = None,
    currency_eq: Optional[str] = None,
    max_price: Optional[float] = None,
    hours: Optional[int] = None,
    order_by_price: bool = False,
    limit: int = 10,
    offset: int = 0,
) -> List[dict]:
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è; —Å–≤–µ–∂–µ—Å—Ç—å ‚Äî –ø–æ posted_at (RECENT_EXPR).
    """
    try:
        where, params = [], []

        if query:
            where.append("(country ILIKE %s OR city ILIKE %s OR hotel ILIKE %s OR description ILIKE %s)")
            q = f"%{query}%"
            params += [q, q, q, q]

        if country_terms:
            ors = []
            for term in country_terms:
                ors.append("country ILIKE %s")
                params.append(f"%{term}%")
            where.append("(" + " OR ".join(ors) + ")")
        elif country:
            where.append("country ILIKE %s")
            params.append(f"%{normalize_country(country)}%")

        if any_terms:
            blocks = []
            for term in any_terms:
                blocks.append("(country ILIKE %s OR city ILIKE %s OR hotel ILIKE %s OR description ILIKE %s)")
                params += [f"%{term}%", f"%{term}%", f"%{term}%", f"%{term}%"]
            where.append("(" + " OR ".join(blocks) + ")")

        if currency_eq:
            where.append("currency = %s")
            params.append(currency_eq)

        if max_price is not None:
            where.append("price IS NOT NULL AND price <= %s")
            params.append(max_price)

        if hours is not None:
            where.append(f"{RECENT_EXPR} >= %s")
            params.append(cutoff_utc(hours))

        order_clause = (
            "ORDER BY price ASC NULLS LAST, posted_at DESC NULLS LAST"
            if order_by_price else
            "ORDER BY posted_at DESC NULLS LAST"
        )
        select_list = _select_tours_clause()
        where_sql = ("WHERE " + " AND ".join(where)) if where else ""
        sql = f"SELECT {select_list} FROM tours {where_sql} {order_clause} LIMIT %s OFFSET %s"

        with get_conn() as conn, conn.cursor() as cur:
            cur.execute(sql, params + [limit, offset])
            return cur.fetchall()

    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ fetch_tours_page")
        return []

# ================= GPT =================
last_gpt_call = defaultdict(float)

def get_order_safe(order_id: int) -> dict | None:
    with _pay_db() as conn, conn.cursor() as cur:
        cur.execute("SELECT * FROM orders WHERE id=%s;", (order_id,))
        return cur.fetchone()

def fmt_sub_until(user_id: int) -> str:
    with _pay_db() as conn, conn.cursor() as cur:
        cur.execute("SELECT current_period_end FROM subscriptions WHERE user_id=%s;", (user_id,))
        row = cur.fetchone()
        if not row or not row["current_period_end"]:
            return "‚Äî"
        return row["current_period_end"].astimezone(TZ).strftime("%d.%m.%Y")

async def ask_gpt(prompt: str, *, user_id: int, premium: bool = False) -> List[str]:
    now = time.monotonic()
    if now - last_gpt_call[user_id] < 12.0:
        return ["üòÆ‚Äçüí® –ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚Äî —è –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å."]
    last_gpt_call[user_id] = now

    kb_text = await load_kb_context(max_rows=80)
    recent_text = await load_recent_tours_context(max_rows=12, hours=120)

    system_text = (
        "–¢—ã ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º –∏–∑ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã TripleA. "
        "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –î–µ—Ä–∂–∏—Å—å —Ç–µ–º–∞—Ç–∏–∫–∏: —Ç—É—Ä—ã, –æ—Ç–µ–ª–∏, —Å–µ–∑–æ–Ω—ã, –≤–∏–∑—ã, —Ü–µ–Ω—ã, –ª–∞–π—Ñ—Ö–∞–∫–∏. "
        f"–°—á–∏—Ç–∞–π —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è: {datetime.now(TZ).strftime('%d.%m.%Y %H:%M %Z')}. "
        "–ï—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫–∏ ¬´–ê–ö–¢–£–ê–õ–¨–ù–´–ï –§–ê–ö–¢–´¬ª –∏/–∏–ª–∏ ¬´–°–í–ï–ñ–ò–ï –¢–£–†–´¬ª, –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–∏—Ö. "
        "–ù–µ —É–ø–æ–º–∏–Ω–∞–π –¥–∞—Ç—É —Å—Ä–µ–∑–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏; –æ—Ç–≤–µ—á–∞–π –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."
    )

    blocks = []
    if kb_text:
        blocks.append(f"–ê–ö–¢–£–ê–õ–¨–ù–´–ï –§–ê–ö–¢–´:\n{kb_text}")
    if recent_text:
        blocks.append(f"–°–í–ï–ñ–ò–ï –¢–£–†–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ):\n{recent_text}")
    user_content = "\n\n".join(blocks) + f"\n\n–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n{prompt}" if blocks else prompt

    payload = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": system_text},
            {"role": "user", "content": user_content},
        ],
        "temperature": 0.5,
        "max_tokens": 750,
    }

    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            for attempt in range(5):
                r = await client.post(
                    "https://api.openai.com/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {OPENAI_API_KEY}",
                        "Content-Type": "application/json",
                    },
                    json=payload,
                )
                if r.status_code == 200:
                    data = r.json()
                    msg = (data.get("choices") or [{}])[0].get("message", {}).get("content")
                    if not msg:
                        logging.error(f"OpenAI no choices/message: {data}")
                        break
                    answer = msg.strip()
                    hint = ""
                    if premium:
                        hint = "\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: –∫–∞–Ω–∞–ª(—ã) –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –±–∞–∑–∞ —Å–≤–µ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
                    else:
                        if _should_hint_premium(user_id):
                            hint = "\n\n‚ú® –ù—É–∂–Ω—ã –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏? –ü–æ–¥–∫–ª—é—á–∏ Premium –¥–æ—Å—Ç—É–ø TripleA."
                    answer += hint

                    MAX_LEN = 3800
                    return [answer[i : i + MAX_LEN] for i in range(0, len(answer), MAX_LEN)]

                if r.status_code in (429, 500, 502, 503, 504):
                    delay = min(20.0, (2 ** attempt) + random.random())
                    await asyncio.sleep(delay)
                    continue
                logging.error(f"OpenAI error {r.status_code}: {r.text[:400]}")
                break
    except Exception as e:
        logging.exception(f"GPT call failed: {e}")

    return [
        "‚ö†Ô∏è –ò–ò —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ‚Äî –∞ –ø–æ–∫–∞ –∑–∞–≥–ª—è–Ω–∏ –≤ ¬´üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã¬ª: —Ç–∞–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 72 —á–∞—Å–∞.",
    ]


# ================= –ö–ê–†–¢–û–ß–ö–ò/–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =================

def tour_inline_kb(tour: dict, is_fav: bool, user_id: Optional[int] = None) -> InlineKeyboardMarkup:
    lang = _lang(user_id) if user_id else DEFAULT_LANG
    tr = TRANSLATIONS[lang]
    rows = []

    # üîí —Å—Å—ã–ª–∫—É –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    url = (tour.get("source_url") or "").strip()
    if url and user_id == ADMIN_USER_ID:
        rows.append([InlineKeyboardButton(text=tr["btn.admin_open"], url=url)])

    # –∫–Ω–æ–ø–∫–∏
    ask_btn = InlineKeyboardButton(text=tr["btn.ask"], callback_data=f"ask:{tour['id']}")

    fav_btn = InlineKeyboardButton(
        text=(tr["btn.fav.rm"] if is_fav else tr["btn.fav.add"]),
        callback_data=f"fav:{'rm' if is_fav else 'add'}:{tour['id']}",
    )

    want_btn = InlineKeyboardButton(text=tr["btn.want"], callback_data=f"want:{tour['id']}")

    # –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–ø–æ–≥–æ–¥–∞"
    place = tour.get("city") or tour.get("country") or ""
    wx_btn = InlineKeyboardButton(text=tr["btn.weather"], callback_data=f"wx:{place}")

    back_btn = InlineKeyboardButton(text=tr["back"], callback_data="back_filters")

    # —Å–æ–±–∏—Ä–∞–µ–º —Ä—è–¥—ã
    rows.append([ask_btn])
    rows.append([fav_btn, want_btn])
    rows.append([wx_btn])
    rows.append([back_btn])

    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_card_text(t: dict, lang: str = "ru") -> str:
    hotel   = safe_title(t)  # ‚Üê –≤—Å—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–Ω—É—Ç—Ä–∏ safe_title
    country = (t.get("country") or "‚Äî").strip()
    city    = (t.get("city") or "‚Äî").strip()
    price   = fmt_price(t.get("price"), t.get("currency"))
    dates   = normalize_dates_for_display(t.get("dates")) if t.get("dates") else "‚Äî"
    board   = (t.get("board") or "").strip()
    inc     = (t.get("includes") or "").strip()
    when_dt = t.get("posted_at")
    when    = f"üïí {localize_dt(when_dt)}" if when_dt else ""

    lines = [
        f"üè® <b>{hotel}</b>",
        f"üìç {country} ‚Äî {city}",
        f"üíµ {price}",
        f"üóì {dates}",
    ]
    if board:
        lines.append(f"üçΩ –ü–∏—Ç–∞–Ω–∏–µ: {board}")
    if inc:
        lines.append(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {inc}")
    if when:
        lines.append(when)

    return "\n".join(lines)


def _letters_digits_ratio(s: str) -> float:
    import re
    if not s:
        return 0.0
    alnum = len(re.findall(r"[A-Za-z–ê-–Ø–∞-—è0-9]", s))
    return alnum / max(1, len(s))


def safe_title(t: dict) -> str:
    h = clean_text_basic(strip_trailing_price_from_hotel(t.get("hotel") or ""))
    if _letters_digits_ratio(h) < 0.25 or len(h.strip()) < 3:
        alt = derive_hotel_from_description(t.get("description"))
        if alt:
            h = clean_text_basic(strip_trailing_price_from_hotel(alt))
    if _letters_digits_ratio(h) < 0.25 or len(h.strip()) < 3:
        ctry = (t.get("country") or "").strip()
        city = (t.get("city") or "").strip()
        h = (f"{ctry} ‚Äî {city}".strip(" ‚Äî") or "–¢—É—Ä")
    return h

async def send_tour_card(chat_id: int, user_id: int, tour: dict):
    fav = is_favorite(user_id, tour["id"]) 
    kb = tour_inline_kb(tour, fav, user_id)
    caption = build_card_text(tour, lang=_lang(user_id))
    await bot.send_message(chat_id, caption, reply_markup=kb, disable_web_page_preview=True)

import asyncio
from typing import List

async def send_batch_cards(chat_id: int, user_id: int, rows: list[dict], token: str, next_offset: int):
    if not rows:
        return False
    for t in rows:
        await send_tour_card(chat_id, user_id, t)
        await asyncio.sleep(0)

    LAST_RESULTS[user_id] = rows
    LAST_QUERY_AT[user_id] = time.monotonic()

    await bot.send_message(
        chat_id,
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É?",
        reply_markup=more_kb(token, next_offset, user_id),
    )
    return True

# ===== –û–±—â–∏–µ —Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π =====

def _admin_user_label(user) -> str:
    if getattr(user, "username", None):
        return f"@{user.username}"
    return (f"{(user.first_name or '')} {(user.last_name or '')}".strip() or "–ì–æ—Å—Ç—å")


def _compose_tour_block(t: dict) -> tuple[str, str | None]:
    price_str = fmt_price(t.get("price"), t.get("currency"))
    hotel_text = t.get("hotel") or derive_hotel_from_description(t.get("description"))
    hotel_clean = (
        clean_text_basic(strip_trailing_price_from_hotel(hotel_text)) if hotel_text else "–ü–∞–∫–µ—Ç–Ω—ã–π —Ç—É—Ä"
    )
    dates_norm = normalize_dates_for_display(t.get("dates"))
    time_str = localize_dt(t.get("posted_at"))
    board = (t.get("board") or "").strip()
    includes = (t.get("includes") or "").strip()
    src = (t.get("source_url") or "").strip()

    lines = [
        f"üåç {safe(t.get('country'))} ‚Äî {safe(t.get('city'))}",
        f"üè® {safe(hotel_clean)}",
        f"üíµ {price_str}",
        f"üìÖ {dates_norm}",
        time_str or "",
    ]
    if board:
        lines.append(f"üçΩ –ü–∏—Ç–∞–Ω–∏–µ: {escape(board)}")
    if includes:
        lines.append(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {escape(includes)}")
    if src:
        lines.append(f'üîó <a href="{escape(src)}">–ò—Å—Ç–æ—á–Ω–∏–∫</a>')
    text = "\n".join([l for l in lines if l]).strip()
    photo = (t.get("photo_url") or "").strip() or None
    return text, photo


async def _send_to_admin_group(text: str, photo: str | None, pin: bool = False):
    chat_id = resolve_leads_chat_id()
    if not chat_id:
        logging.warning("admin notify: LEADS_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω")
        return
    kwargs = {}
    if LEADS_TOPIC_ID:
        kwargs["message_thread_id"] = LEADS_TOPIC_ID
    if photo:
        # —Ç–µ–ª–µ–≥–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏, —Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
        short = text if len(text) <= 1000 else (text[:990].rstrip() + "‚Ä¶")
        msg = await bot.send_photo(chat_id, photo=photo, caption=short, parse_mode="HTML", **kwargs)
    else:
        msg = await bot.send_message(
            chat_id, text, parse_mode="HTML", disable_web_page_preview=True, **kwargs
        )
    if pin:
        try:
            await bot.pin_chat_message(chat_id, msg.message_id, disable_notification=True)
        except Exception as e:
            logging.warning(f"pin failed: {e}")


# ===== –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è =====

async def notify_leads_group(t: dict, *, lead_id: int, user, phone: str, pin: bool = False):
    try:
        user_label = _admin_user_label(user)
        tour_block, photo = _compose_tour_block(t)
        head = f"üÜï <b>–ó–∞—è–≤–∫–∞ ‚Ññ{lead_id}</b>\nüë§ {escape(user_label)}\nüìû {escape(phone)}"
        text = f"{head}\n{tour_block}"
        await _send_to_admin_group(text, photo, pin=pin)
    except Exception as e:
        logging.error(f"notify_leads_group failed: {e}")


async def notify_question_group(t: dict, *, user, question: str, answer_key: str):
    try:
        user_label = _admin_user_label(user)
        tour_block, photo = _compose_tour_block(t)
        head = (
            f"‚ùì <b>–í–æ–ø—Ä–æ—Å –ø–æ —Ç—É—Ä—É</b>\n"
            f"üë§ –æ—Ç {escape(user_label)}\n"
            f"üìù {escape(question)}\n\n"
            f"üß© –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å <code>#{answer_key}</code>"
        )
        text = f"{head}\n\n{tour_block}"
        await _send_to_admin_group(text, photo, pin=False)
    except Exception as e:
        logging.error(f"notify_question_group failed: {e}")


def _format_q_header(qid: int) -> str:
    return f"‚ùì <b>–í–æ–ø—Ä–æ—Å –ø–æ —Ç—É—Ä—É</b>  [Q#{qid}]"


_RECENT_GREETING = defaultdict(float)


def _should_greet_once(user_id: int, cooldown: float = 3.0) -> bool:
    now = time.monotonic()
    last = _RECENT_GREETING.get(user_id, 0.0)
    if now - last >= cooldown:
        _RECENT_GREETING[user_id] = now
        return True
    return False


def _norm(s: str) -> str:
    return re.sub(r"\s+", " ", (s or "").strip().lower())


def is_menu_label(text: str, key: str) -> bool:
    variants = {_norm(TRANSLATIONS[lang][key]) for lang in SUPPORTED_LANGS}
    return _norm(text) in variants


MENU_KEYS = ("menu_find", "menu_gpt", "menu_sub", "menu_settings")


def _is_menu_text(txt: str) -> bool:
    return any(is_menu_label(txt or "", k) for k in MENU_KEYS)


# === helper: ¬´–ø—É–ª—å—Å¬ª –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ ===
async def _typing_pulse(chat_id: int):
    try:
        while True:
            await bot.send_chat_action(chat_id, "typing")
            await asyncio.sleep(4.0)
    except asyncio.CancelledError:
        pass

# ==== –Ø–ó–´–ö/LOCALE –•–ï–õ–ü–ï–†–´ ====

# –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def _lang(user_id: int | None) -> str:
    try:
        # —á–∏—Ç–∞–µ–º –∏–∑ key-value —Å—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å
        code = get_config(f"lang_{int(user_id)}", None) if user_id else None
    except Exception:
        code = None
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –æ—Ç–∫–∞—Ç –∫ –¥–µ—Ñ–æ–ª—Ç—É
    return code if code in SUPPORTED_LANGS else DEFAULT_LANG

# —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
def set_user_lang(user_id: int, lang: str) -> None:
    save = lang if lang in SUPPORTED_LANGS else DEFAULT_LANG
    set_config(f"lang_{user_id}", save)

# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ (–µ—Å–ª–∏ —Ç–≤–æ—ë t() —É–∂–µ –µ—Å—Ç—å ‚Äî –æ—Å—Ç–∞–≤—å –µ–≥–æ; –µ—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç)
def t(user_id: int | None, key: str) -> str:
    lang = _lang(user_id)
    return TRANSLATIONS.get(lang, {}).get(key, TRANSLATIONS[DEFAULT_LANG].get(key, key))

# –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

def lang_inline_kb() -> InlineKeyboardMarkup:
    # –ø–æ–¥–ø–∏—Å–∏ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ ‚Äî –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥ —Å–µ–±—è
    names = {
        "ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
        "uz": "O ªzbekcha üá∫üáø",
        "kk": "“ö–∞–∑–∞“õ—à–∞ üá∞üáø",
        # –µ—Å–ª–∏ –≤ SUPPORTED_LANGS –µ—Å—Ç—å –µ—â—ë ‚Äî –¥–æ–±–∞–≤—å —Å—é–¥–∞
    }
    rows = []
    row = []
    for code in SUPPORTED_LANGS:
        text = names.get(code, code.upper())
        row.append(InlineKeyboardButton(text=text, callback_data=f"lang:{code}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)

# –∞–ª–∏–∞—Å, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã –Ω–µ –ø–∞–¥–∞–ª–∏
def main_kb_for(user_id: int) -> ReplyKeyboardMarkup:
    return main_menu_kb(user_id)

# –µ—â—ë –æ–¥–∏–Ω –∞–ª–∏–∞—Å: –≤–µ—Ä—Å–∏—è –±–µ–∑ user_id ‚Äî –±–µ—Ä—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π)
def want_contact_kb() -> ReplyKeyboardMarkup:
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é i18n-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –Ω–æ —Å user_id=0 => DEFAULT_LANG
    return want_contact_kb_for(0)

# ================= –•–ï–ù–î–õ–ï–†–´ =================
@dp.message(Command("start"), F.chat.type == "private")
async def cmd_start(message: Message):
    uid = message.from_user.id
    if get_config(f"lang_{uid}", None):            # —è–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω
        await message.answer(t(uid, "hello"), reply_markup=main_menu_kb(message.from_user.id))
        return
    await message.answer(t(uid, "choose_lang"), reply_markup=lang_inline_kb())

@dp.message(Command("chatid"))
async def cmd_chatid(message: Message):
    await message.reply(f"chat_id: {message.chat.id}\nthread_id: {getattr(message, 'message_thread_id', None)}")

@dp.message(Command("setleadgroup"))
async def cmd_setleadgroup(message: Message):
    if message.from_user.id != ADMIN_USER_ID:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setleadgroup -100xxxxxxxxxx")
        return
    new_id = parts[1].strip()
    try:
        int(new_id)
    except Exception:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id.")
        return
    set_config("LEADS_CHAT_ID", new_id)
    await message.reply(f"LEADS_CHAT_ID –æ–±–Ω–æ–≤–ª—ë–Ω: {new_id}")

@dp.message(Command("leadstest"))
async def cmd_leadstest(message: Message):
    if message.from_user.id != ADMIN_USER_ID:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(f"SELECT {_select_tours_clause()} FROM tours ORDER BY posted_at DESC LIMIT 1;")
        t = cur.fetchone()
    if not t:
        await message.reply("–í –±–∞–∑–µ –Ω–µ—Ç —Ç—É—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞.")
        return
    fake_lead_id = 9999
    await notify_leads_group(t, lead_id=fake_lead_id, user=message.from_user, phone="+99890XXXXXXX", pin=False)
    await message.reply("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É.")


# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def entry_find_tours(message: Message):
    uid = message.from_user.id
    await message.answer(
        t(uid, "filters.title"),
        reply_markup=filters_inline_kb_for(message.from_user.id))

async def entry_gpt(message: Message):
    await message.answer("–°–ø—Ä–æ—Å–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –ø—Ä–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (–æ—Ç–µ–ª–∏, —Å–µ–∑–æ–Ω—ã, –≤–∏–∑—ã, –±—é–¥–∂–µ—Ç—ã).")


async def entry_sub(message: Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí≥ Payme (–∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)", callback_data="sub:payme:recurring"),
            ],
            [
                InlineKeyboardButton(text="–†–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Payme", callback_data="sub:payme:oneoff"),
            ],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö", callback_data="sub:info")],
        ]
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ —Ç–∞—Ä–∏—Ñ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî <b>Basic 49 000 UZS / 30 –¥–Ω–µ–π</b>):",
        reply_markup=kb,
    )


async def entry_settings(message: Message):
    uid = message.from_user.id
    await message.answer(t(uid, "choose_lang"), reply_markup=lang_inline_kb())


@dp.message(Command("language"))
@dp.message(Command("settings"))
async def cmd_language(message: Message):
    await entry_settings(message)

SETTINGS_TRIGGERS = {TRANSLATIONS[lang]["menu_settings"] for lang in SUPPORTED_LANGS}

@dp.message(F.text.in_(SETTINGS_TRIGGERS))
async def on_settings_button(message: Message):
    await entry_settings(message)

@dp.callback_query(F.data.startswith("ask:"))
async def cb_ask(call: CallbackQuery):
    try:
        tour_id = int(call.data.split(":", 1)[1])
    except Exception:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –≤–æ–ø—Ä–æ—Å–∞.", show_alert=False)
        return

    uid = call.from_user.id
    ASK_STATE[uid] = {"tour_id": tour_id, "since": time.monotonic()}

    cancel_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True,
        selective=True,
    )

    await call.message.answer(
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ù–µ –≤–∏–∂—É –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è / —Å—Ç—Ä–∞–Ω—ã\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—ã –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–µ\n"
        "‚Ä¢ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –Ω–∞ 2 –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ —Ä–µ–±—ë–Ω–∫–∞\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞¬ª.",
        reply_markup=cancel_kb,
    )
    await call.answer()


@dp.callback_query(F.data == "tours_recent")
async def cb_recent(call: CallbackQuery):
    await bot.send_chat_action(call.message.chat.id, "typing")
    rows, is_recent = await fetch_tours(None, hours=72, limit_recent=6, limit_fallback=6)
    header = "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞ 72 —á–∞—Å–∞" if is_recent else "‚ÑπÔ∏è –°–≤–µ–∂–∏—Ö 72—á –º–∞–ª–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
    await call.message.answer(f"<b>{header}</b>")

    token = _new_token()
    PAGER_STATE[token] = {
        "chat_id": call.message.chat.id,
        "query": None,
        "country": None,
        "currency_eq": None,
        "max_price": None,
        "hours": 72 if is_recent else None,
        "order_by_price": False,
        "ts": time.monotonic(),
    }

    _remember_query(call.from_user.id, "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞ 72—á")
    next_offset = len(rows)
    await send_batch_cards(call.message.chat.id, call.from_user.id, rows, token, next_offset)


@dp.callback_query(F.data.startswith("country:"))
async def cb_country(call: CallbackQuery):
    uid = call.from_user.id
    country_raw = call.data.split(":", 1)[1]
    country = normalize_country(country_raw)
    terms = country_terms_for(country)  # ‚Üê –±–µ—Ä—ë–º —Å–∏–Ω–æ–Ω–∏–º—ã (RU/EN –∏ —Ç.–¥.)
    terms_any = COUNTRY_EXPAND_ANY.get(country, [])

    token = _new_token()
    PAGER_STATE[token] = {
        "chat_id": call.message.chat.id,
        "query": None,
        "country": country,
        "currency_eq": None,
        "max_price": None,
        "hours": 24,
        "order_by_price": False,
        "ts": time.monotonic(),
    }

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ 24—á + –ø–æ –ª—é–±–æ–º—É —Å–∏–Ω–æ–Ω–∏–º—É
    rows = await fetch_tours_page(country_terms=terms, hours=24, limit=6, offset=0)
    if not rows:
        await call.message.answer(
            f"–ó–∞ 24 —á–∞—Å–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ ¬´{country}¬ª –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ç—É—Ä–æ–≤.",
            reply_markup=filters_inline_kb_for(uid),
        )
        await call.answer()
        return

    await send_batch_cards(call.message.chat.id, uid, rows, token, len(rows))

    kb_more = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t(uid, "more.next"),
                              callback_data=f"more:{token}:{len(rows)}")],
        [InlineKeyboardButton(text=t(uid, "back"), callback_data="back_filters")],
    ])
    await call.message.answer(t(uid, "more.title"), reply_markup=kb_more)
    await call.answer()

@dp.callback_query(F.data.startswith("sub:"))
async def cb_sub(call: CallbackQuery):
    _, provider, kind = call.data.split(":", 2)
    plan_code = "basic_m"

    # —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    order_id = create_order(call.from_user.id, provider=provider, plan_code=plan_code, kind=kind)

    order = get_order_safe(order_id) or {}
    # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –≤ orders.amount —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—É–º–º–∞ –í –¢–ò–ô–ò–ù–ê–•
    amount_tiyin = int(order.get("amount") or 4900000)  # fallback –Ω–∞ 49 000 UZS

    if provider == "payme":
        mid = PAYME_MERCHANT_ID
        if not mid:
            await call.message.answer("‚ö†Ô∏è PAYME_MERCHANT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ ENV.")
            await call.answer()
            return
        url = build_payme_checkout_url(mid, amount_tiyin, order_id, "ru")
    else:
        url = build_checkout_link(provider, order_id, plan_code)

    txt = (
        f"üîê –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n"
        f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: <b>{'Click' if provider=='click' else 'Payme'}</b>\n"
        f"–¢–∞—Ä–∏—Ñ: <b>Basic</b> (30 –¥–Ω–µ–π)\n\n"
        "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å. –û–∫–Ω–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä—è–º–æ –≤ Telegram."
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –æ–ø–ª–∞—Ç—É", url=url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
        ]
    )
    await call.message.answer(txt, reply_markup=kb)
    await call.answer()

@dp.callback_query(F.data == "sub:info")
async def cb_sub_info(call: CallbackQuery):
    await call.message.answer(
        "–¢–∞—Ä–∏—Ñ—ã:\n"
        "‚Ä¢ Basic ‚Äî 49 000 UZS/–º–µ—Å: –¥–æ—Å—Ç—É–ø –∫ —Å–≤–µ–∂–∏–º —Ç—É—Ä–∞–º –∏ —É–º–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º\n"
        "‚Ä¢ Pro ‚Äî 99 000 UZS/–º–µ—Å: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n\n"
        "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Click/Payme. –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
    )
    await call.answer()

@dp.callback_query(F.data.startswith("budget:"))
async def cb_budget(call: CallbackQuery):
    uid = call.from_user.id
    _, cur, limit_s = call.data.split(":")
    cur = normalize_currency(cur)
    limit_val = int(limit_s)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    await call.message.answer(
        f"<b>üí∏ –ë—é–¥–∂–µ—Ç: ‚â§ {limit_val} {cur}</b>\n"
        f"–í —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏—â—É —Å–≤–µ–∂–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞‚Ä¶"
    )

    # 1) –ü—Ä–æ–±—É–µ–º –∑–∞ 24 —á–∞—Å–∞, —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–∞–ª—é—Ç–µ
    token = _new_token()
    PAGER_STATE[token] = {
        "chat_id": call.message.chat.id,
        "query": None,
        "country": None,
        "currency_eq": cur,
        "max_price": limit_val,
        "hours": 24,
        "order_by_price": True,
        "ts": time.monotonic(),
    }
    rows = await fetch_tours_page(
        country=None, currency_eq=cur, max_price=limit_val,
        hours=24, limit=6, offset=0, order_by_price=True,
    )

    # 2) –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —Ä–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –¥–æ 5 —Å—É—Ç–æ–∫ (120 —á), –≤—Å—ë –µ—â—ë –≤ –Ω—É–∂–Ω–æ–π –≤–∞–ª—é—Ç–µ
    if not rows:
        token = _new_token()
        PAGER_STATE[token] = {
            "chat_id": call.message.chat.id,
            "query": None,
            "country": None,
            "currency_eq": cur,
            "max_price": limit_val,
            "hours": 120,
            "order_by_price": True,
            "ts": time.monotonic(),
        }
        rows = await fetch_tours_page(
            country=None, currency_eq=cur, max_price=limit_val,
            hours=120, limit=6, offset=0, order_by_price=True,
        )

    # 3) –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ ‚Äî 5 —Å—É—Ç–æ–∫, –ª—é–±–∞—è –≤–∞–ª—é—Ç–∞ (–Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Ü–µ–Ω–µ)
    if not rows:
        token = _new_token()
        PAGER_STATE[token] = {
            "chat_id": call.message.chat.id,
            "query": None,
            "country": None,
            "currency_eq": None,
            "max_price": limit_val,
            "hours": 120,
            "order_by_price": True,
            "ts": time.monotonic(),
        }
        rows = await fetch_tours_page(
            country=None, currency_eq=None, max_price=limit_val,
            hours=120, limit=6, offset=0, order_by_price=True,
        )
        if rows:
            await call.message.answer(
                "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑ –±–∞–∑—ã."
            )

    if not rows:
        await call.message.answer(
            f"–í –ø—Ä–µ–¥–µ–ª–∞—Ö –±—é–¥–∂–µ—Ç–∞ ‚â§ {limit_val} {cur} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—É—Ç–æ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.",
            reply_markup=filters_inline_kb_for(uid),
        )
        await call.answer()
        return

    await send_batch_cards(call.message.chat.id, uid, rows, token, len(rows))
    await call.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É?",
                              reply_markup=more_kb(token, len(rows), uid))
    await call.answer()

@dp.callback_query(F.data == "sort:price_asc")
async def cb_sort_price_asc(call: CallbackQuery):
    await bot.send_chat_action(call.message.chat.id, "typing")
    rows = await fetch_tours_page(hours=72, order_by_price=True, limit=6, offset=0)
    await call.message.answer("<b>‚ÜïÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞ 72—á ‚Äî –¥–µ—à–µ–≤–ª–µ ‚Üí –¥–æ—Ä–æ–∂–µ</b>")

    token = _new_token()
    PAGER_STATE[token] = {
        "chat_id": call.message.chat.id,
        "query": None,
        "country": None,
        "currency_eq": None,
        "max_price": None,
        "hours": 72,
        "order_by_price": True,
        "ts": time.monotonic(),
    }

    _remember_query(call.from_user.id, "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞ 72—á (—Å–æ—Ä—Ç. –ø–æ —Ü–µ–Ω–µ)")
    await send_batch_cards(call.message.chat.id, call.from_user.id, rows, token, len(rows))

@dp.callback_query(F.data.startswith("more:"))
async def cb_more(call: CallbackQuery):
    try:
        _, token, offset_str = call.data.split(":", 2)
        offset = int(offset_str)
    except Exception:
        await call.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ü•≤", show_alert=False)
        return

    _cleanup_pager_state()
    state = PAGER_STATE.get(token)
    if not state or state.get("chat_id") != call.message.chat.id:
        await call.answer("–≠—Ç–∞ –ø–æ–¥–±–æ—Ä–∫–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=False)
        return

    hours = state.get("hours") or (24 if state.get("country") else 72)
    country = normalize_country(state["country"]) if state.get("country") else None

    rows = await fetch_tours_page(
        query=state.get("query"),
        country=country,
        currency_eq=state.get("currency_eq"),
        max_price=state.get("max_price"),
        hours=hours,  # ‚Üê –≤—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ
        order_by_price=state.get("order_by_price", False),
        limit=6,
        offset=offset,
    )
    if not rows:
        await call.answer("–≠—Ç–æ –≤—Å—ë –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚ú®", show_alert=False)
        return

    _touch_state(token)
    await send_batch_cards(call.message.chat.id, call.from_user.id, rows, token, offset + len(rows))



@dp.callback_query(F.data.startswith("wx:"))
async def cb_weather(call: CallbackQuery):
    uid = call.from_user.id
    place = (call.data.split(":", 1)[1] or "").strip() or "–¢–∞—à–∫–µ–Ω—Ç"
    await call.answer("‚è≥")
    txt = await get_weather_text(place)
    await call.message.answer(txt, disable_web_page_preview=True)

@dp.callback_query(F.data.startswith("fav:add:"))
async def cb_fav_add(call: CallbackQuery):
    try:
        tour_id = int(call.data.split(":")[2])
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", show_alert=False)
        return
    set_favorite(call.from_user.id, tour_id)
    await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è", show_alert=False)
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(f"SELECT {_select_tours_clause()} FROM tours WHERE id=%s;", (tour_id,))
        t = cur.fetchone()
    if t:
        await call.message.edit_reply_markup(reply_markup=tour_inline_kb(t, True, call.from_user.id))


@dp.callback_query(F.data.startswith("fav:rm:"))
async def cb_fav_rm(call: CallbackQuery):
    try:
        tour_id = int(call.data.split(":")[2])
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", show_alert=False)
        return
    unset_favorite(call.from_user.id, tour_id)
    await call.answer("–£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ü§ç", show_alert=False)
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(f"SELECT {_select_tours_clause()} FROM tours WHERE id=%s;", (tour_id,))
        t = cur.fetchone()
    if t:
        # –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–¥–æ–±–∞–≤–∏—Ç—å¬ª, —Ç.–µ. is_fav=False
        await call.message.edit_reply_markup(reply_markup=tour_inline_kb(t, False, call.from_user.id))

from aiogram.types import CallbackQuery, ReplyKeyboardRemove

@dp.callback_query(F.data.startswith("lang:"))
async def cb_lang(call: CallbackQuery):
    uid = call.from_user.id
    lang = call.data.split(":", 1)[1]

    # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫
    set_user_lang(uid, lang)

    # 2) –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ò–ù–õ–ê–ô–ù-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–µ—Å–ª–∏ —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç ¬´–ø–æ–¥–±–æ—Ä¬ª)
    edited_inline = False
    try:
        await call.message.edit_reply_markup(reply_markup=filters_inline_kb_for(uid))
        edited_inline = True
    except Exception:
        pass  # –Ω–µ —Ç–æ—Ç —ç–∫—Ä–∞–Ω ‚Äî –æ–∫

    # 3) –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç—É—Ä–∞ ‚Äî –æ–±–Ω–æ–≤–∏–º –µ—ë —Ç–µ–∫—Å—Ç/–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –Ω–æ–≤—ã–π —è–∑—ã–∫
    try:
        last_tours = LAST_RESULTS.get(uid, [])
    except Exception:
        last_tours = []
    if last_tours:
        tour = last_tours[0]
        caption = build_card_text(tour, lang=lang)
        fav = is_favorite(uid, tour["id"])
        kb = tour_inline_kb(tour, fav, uid)
        try:
            await call.message.edit_text(caption, reply_markup=kb)
        except Exception:
            try:
                await call.message.edit_caption(caption, reply_markup=kb)
            except Exception:
                pass  # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—à–ª—ë–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –Ω–∏–∂–µ

    # 4) –í–°–ï–ì–î–ê –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∏–Ω–∞—á–µ –º–µ–Ω—é –Ω–µ —Å–º–µ–Ω–∏—Ç —è–∑—ã–∫)
    try:
        await bot.send_message(uid, "‚Ä¶", reply_markup=ReplyKeyboardRemove())
    except Exception:
        pass

    await bot.send_message(
        uid,
        t(uid, "hello_again"),
        reply_markup=main_menu_kb(uid)  # <-- –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ: —Å–≤–µ–∂–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )

    # 5) –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await call.answer(t(uid, "lang_saved") if (edited_inline or last_tours) else t(uid, "lang_saved"))

@dp.callback_query(F.data.startswith("want:"))
async def cb_want(call: CallbackQuery):
    try:
        tour_id = int(call.data.split(":")[1])
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ –∑–∞—è–≤–∫–∏.", show_alert=False)
        return

    uid = call.from_user.id
    if user_has_leads(uid) and not user_has_subscription(uid):
        await call.message.answer(
            "‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –±—ã–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞.\n"
            "–î–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üîî",
             reply_markup=get_payme_kb(),
        )
        await call.answer()
        return

    WANT_STATE[uid] = {"tour_id": tour_id}
    try:
        set_pending_want(uid, tour_id)
    except Exception as e:
        logging.warning(f"set_pending_want failed: {e}")

    await call.message.answer("–û–∫–µ–π! –û—Ç–ø—Ä–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∑–∞–ª—Å—è üëá", reply_markup=want_contact_kb())
    await call.answer()


# === –ü–û–ì–û–î–ê: –∫–æ–º–∞–Ω–¥—ã/—Ç—Ä–∏–≥–≥–µ—Ä—ã ===
@dp.message(Command("weather"))
async def cmd_weather(message: Message):
    uid = message.from_user.id
    lang = _lang(uid)

    ask = (message.text or "").partition(" ")[2].strip()
    place = ask or None  # –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∂—ë—Å—Ç–∫–æ ¬´–¢–∞—à–∫–µ–Ω—Ç¬ª, –ø—É—Å—Ç—å –ø–∞—Ä—Å–∏—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏–º —è–≤–Ω–µ–µ

    await message.answer(TRANSLATIONS[lang].get("weather.loading", "–°–µ–∫—É–Ω–¥—É, —É—Ç–æ—á–Ω—è—é –ø–æ–≥–æ–¥—É‚Ä¶"))

    txt = await get_weather_text(place, lang=lang)  # <- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º lang
    await message.answer(txt, disable_web_page_preview=True)


# –¢—Ä–∏–≥–≥–µ—Ä –ø–æ —Å–ª–æ–≤–∞–º ¬´–ø–æ–≥–æ–¥–∞ / ob-havo / –∞—É–∞ —Ä–∞–π—ã¬ª –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
@dp.message(F.text.regexp(r"(?iu)\b(–ø–æ–≥–æ–¥|ob[-\s]?havo|–∞—É–∞\s*—Ä–∞–π—ã)\b"))
async def handle_weather(message: Message):
    uid = message.from_user.id
    lang = _lang(uid)

    place = _extract_place_from_weather_query(message.text or "")
    txt = await get_weather_text(place, lang=lang)
    await message.answer(txt, disable_web_page_preview=True)

@dp.message(F.chat.type == "private", F.contact)
async def on_contact(message: Message):
    st = WANT_STATE.pop(message.from_user.id, None)
    if not st:
        logging.info(f"Contact came without pending want (user_id={message.from_user.id})")
        await message.answer(
            "–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–¥–±–æ—Ä, –Ω–∞–∂–º–∏ ¬´üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã¬ª.",
            reply_markup=main_kb_for(message.from_user.id)
        )
        return

    phone = message.contact.phone_number
    tour_id = st["tour_id"]

    full_name = (getattr(message.from_user, "full_name", "") or "").strip()
    if not full_name:
        parts = [(message.from_user.first_name or ""), (message.from_user.last_name or "")]
        full_name = (
            " ".join(p for p in parts if p).strip()
            or (f"@{message.from_user.username}" if message.from_user.username else "Telegram user")
        )

    lead_id = create_lead(tour_id, phone, full_name, note="from contact share")

    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(
            f"""
            SELECT {_select_tours_clause()}
            FROM tours WHERE id=%s;
        """,
            (tour_id,),
        )
        t = cur.fetchone()

    if t and lead_id:
        await notify_leads_group(t, lead_id=lead_id, user=message.from_user, phone=phone, pin=False)
        append_lead_to_sheet(lead_id, message.from_user, phone, t)
        await message.answer(
            f"–ü—Ä–∏–Ω—è—Ç–æ! –ó–∞—è–≤–∫–∞ ‚Ññ{lead_id}. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è üìû",
            reply_markup=main_kb_for(message.from_user.id)
        )
    else:
        await message.answer(
            "–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=main_kb_for(message.from_user.id)
        )


@dp.callback_query(F.data == "noop")
async def cb_noop(call: CallbackQuery):
    await call.answer("–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã ü§ù", show_alert=False)


@dp.callback_query(F.data == "back_filters")
async def back_filters(call: CallbackQuery):
    lang = _lang(call.from_user.id)
    await call.message.edit_text(
        TRANSLATIONS[lang]["filters.title"],
        reply_markup=filters_inline_kb_for(call.from_user.id)
    )
    await call.answer()

@dp.callback_query(F.data == "back_main")
async def cb_back_main(call: CallbackQuery):
    await call.message.answer(t(call.from_user.id, "hello"), reply_markup=main_kb_for(call.from_user.id))
    

# —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ASK_STATE
@dp.message(F.chat.type == "private", F.text, lambda m: m.from_user.id in ASK_STATE)
async def on_question_text(message: Message):
    st = ASK_STATE.get(message.from_user.id)
    txt = (message.text or "").strip()

    if txt.lower() in {"–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞"} or txt.startswith("‚ùå"):
        ASK_STATE.pop(message.from_user.id, None)
        await message.answer("–û–∫, –≤–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_kb_for(message.from_user.id))
        return

    tour_id = st.get("tour_id")
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute(f"SELECT {_select_tours_clause()} FROM tours WHERE id=%s;", (tour_id,))
        t = cur.fetchone()

    if not t:
        ASK_STATE.pop(message.from_user.id, None)
        await message.answer(
            "–ù–µ –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–æ—á–∫—É —Ç—É—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.",
            reply_markup=main_kb_for(message.from_user.id),
        )
        return

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, –∫–æ–º—É —Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç
    answer_key = secrets.token_urlsafe(4)  # –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª—é—á
    ANSWER_MAP[answer_key] = {"user_id": message.from_user.id, "tour_id": tour_id}

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É (–û–î–ò–ù –≤—ã–∑–æ–≤, —Å –∫–ª—é—á–æ–º!)
    await notify_question_group(t, user=message.from_user, question=txt, answer_key=answer_key)

    ASK_STATE.pop(message.from_user.id, None)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ–¥–∞–ª –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏ üì¨",
        reply_markup=main_kb_for(message.from_user.id),
    )

@dp.message(F.text.func(_is_menu_text))
async def on_menu_buttons(message: Message):
    uid = message.from_user.id
    txt = (message.text or "").strip()

    if is_menu_label(txt, "menu_find"):
        await entry_find_tours(message)
        return

    if is_menu_label(txt, "menu_gpt"):
        if not user_has_subscription(uid):
            await safe_answer(
                message,
                "ü§ñ GPT –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n–ü–æ–¥–∫–ª—é—á–∏ –µ—ë –∑–¥–µ—Å—å:",
                reply_markup=get_payme_kb(),
            )
            return
        await entry_gpt(message)
        return

    if is_menu_label(txt, "menu_sub"):
        await entry_sub(message)
        return

    if is_menu_label(txt, "menu_settings"):
        await entry_settings(message)
        return
        
from aiogram import F
from aiogram.types import CallbackQuery

@dp.callback_query(F.data.startswith("noop:"))
async def noop(cb: CallbackQuery):
    await cb.answer("–°—Å—ã–ª–∫–∞ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", show_alert=True)

# --- –°–º–∞—Ä—Ç-—Ä–æ—É—Ç–µ—Ä —Ç–µ–∫—Å—Ç–∞
@dp.message(F.chat.type == "private", F.text)
async def smart_router(message: Message):
    user_text = (message.text or "").strip()

    # –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ç
    if any(is_menu_label(user_text, k) for k in ("menu_find", "menu_gpt", "menu_sub", "menu_settings")):
        return

    # –ø—É–ª—å—Å ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    pulse = asyncio.create_task(_typing_pulse(message.chat.id))
    try:
        # –±—ã—Å—Ç—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —Ñ—Ä–∞–∑–∞–º ¬´—Å—Å—ã–ª–∫–∞/–∏—Å—Ç–æ—á–Ω–∏–∫¬ª
        if re.search(r"\b((–¥–∞–π\s+)?—Å—Å—ã–ª–∫\w*|–∏—Å—Ç–æ—á–Ω–∏–∫\w*|link)\b", user_text, flags=re.I):
            last = LAST_RESULTS.get(message.from_user.id) or []
            premium_users = {123456789}
            is_premium = message.from_user.id in premium_users

            if not last:
                guess = _guess_query_from_link_phrase(user_text) or LAST_QUERY_TEXT.get(message.from_user.id)
                if guess:
                    rows, _is_recent = await fetch_tours(guess, hours=168, limit_recent=6, limit_fallback=6)
                    if rows:
                        LAST_RESULTS[message.from_user.id] = rows
                        last = rows

            if not last:
                q_hint = LAST_QUERY_TEXT.get(message.from_user.id)
                hint_txt = (f"–ü–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–ø—Ä–æ—Å—É ¬´{escape(q_hint)}¬ª –Ω–∏—á–µ–≥–æ —Å–≤–µ–∂–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª."
                            if q_hint else "–ù–µ –≤–∏–∂—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.")
                await message.answer(
                    f"{hint_txt} –ù–∞–∂–º–∏ ¬´üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã¬ª –∏ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —Ç–æ–≥–¥–∞ –ø—Ä–∏—à–ª—é –∏—Å—Ç–æ—á–Ω–∏–∫.",
                    reply_markup=filters_inline_kb(),
                )
                return

            shown = 0
            for trow in last[:3]:
                src = (trow.get("source_url") or "").strip()
                if is_premium and src:
                    await message.answer(
                        f'üîó –ò—Å—Ç–æ—á–Ω–∏–∫: <a href="{escape(src)}">–ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É</a>',
                        disable_web_page_preview=True,
                    )
                else:
                    ch = (trow.get("source_chat") or "").lstrip("@")
                    when = localize_dt(trow.get("posted_at"))
                    label = f"–ò—Å—Ç–æ—á–Ω–∏–∫: {escape(ch) or '—Ç—É—Ä-–∫–∞–Ω–∞–ª'}, {when or '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}"
                    hint = " ‚Ä¢ –í Premium –ø–æ–∫–∞–∂—É –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É."
                    await message.answer(f"{label}{hint}")
                shown += 1

            if shown == 0:
                await message.answer("–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã.")
            return

        # –ø–æ–≥–æ–¥–∞ (–±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç)
        if re.search(r"\b–ø–æ–≥–æ–¥", user_text, flags=re.I):
            place = _extract_place_from_weather_query(user_text)
            await message.answer("–°–µ–∫—É–Ω–¥—É, —É—Ç–æ—á–Ω—è—é –ø–æ–≥–æ–¥—É‚Ä¶")
            reply = await get_weather_text(place or "")
            await message.answer(reply, disable_web_page_preview=True)
            return

        # ===== ¬´–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ/—Å–≤–µ–∂–∏–µ/–≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã¬ª =====
        m_recent = re.search(r"\b(–∞–∫—Ç—É–∞–ª—å–Ω\w*|—Å–≤–µ–∂\w*|–≥–æ—Ä—è—â\w*|–ø–æ—Å–ª–µ–¥–Ω\w*)\s+(—Ç—É—Ä—ã|–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏\w*)\b", user_text, flags=re.I)
        m_72 = re.search(r"\b(72\s*—á|–∑–∞\s*72\s*—á–∞—Å\w*|–∑–∞\s*3\s*–¥–Ω\w*)\b", user_text, flags=re.I)
        m_sort_price = re.search(r"\b(–¥–µ—à–µ–≤–ª–µ|–¥–µ—à—ë–≤—ã–µ|–ø–æ\s*—Ü–µ–Ω–µ|—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫\w+\s*–ø–æ\s*—Ü–µ–Ω–µ)\b", user_text, flags=re.I)

        if m_recent or m_72:
            rows = await fetch_tours_page(hours=72, order_by_price=bool(m_sort_price), limit=6, offset=0)
            header = "üî• –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞ 72 —á–∞—Å–∞" + (" ‚Äî –¥–µ—à–µ–≤–ª–µ ‚Üí –¥–æ—Ä–æ–∂–µ" if m_sort_price else "")
            await message.answer(f"<b>{header}</b>")

            token = _new_token()
            PAGER_STATE[token] = {
                "chat_id": message.chat.id, "query": None, "country": None, "currency_eq": None,
                "max_price": None, "hours": 72, "order_by_price": bool(m_sort_price), "ts": time.monotonic(),
            }
            await send_batch_cards(message.chat.id, message.from_user.id, rows, token, len(rows))
            return

        # –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–º—ã—Å–ª–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã ‚Üí –ø–æ–¥–±–æ—Ä —Ç—É—Ä–æ–≤
        m_interest = re.search(r"^(?:–º–Ω–µ\s+)?(.+?)\s+–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç(?:\s*!)?$", user_text, flags=re.I)
        if m_interest or (len(user_text) <= 30):
            q_raw = m_interest.group(1) if m_interest else user_text
            q = _guess_query_from_link_phrase(q_raw) or q_raw

            queries = _expand_query(q)
            rows_all: List[dict] = []
            for qx in queries:
                rows, _is_recent = await fetch_tours(qx, hours=72, limit_recent=6, limit_fallback=0)
                if rows:
                    rows_all.extend(rows)

            if not rows_all:
                rows_all, _ = await fetch_tours(q, hours=168, limit_recent=0, limit_fallback=6)

            # –¥–µ–¥—É–ø –ø–æ id
            seen = set()
            rows_all = [r for r in rows_all if not (r.get("id") in seen or seen.add(r.get("id")))]

            if rows_all:
                _remember_query(message.from_user.id, q)
                await message.answer(f"<b>–ù–∞—à—ë–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: {escape(q)}</b>")
                token = _new_token()
                PAGER_STATE[token] = {
                    "chat_id": message.chat.id, "query": q, "country": None, "currency_eq": None,
                    "max_price": None, "hours": 72, "order_by_price": False, "ts": time.monotonic(),
                }
                await send_batch_cards(message.chat.id, message.from_user.id, rows_all[:6], token, len(rows_all[:6]))
                return

        # —á—É—Ç—å –¥–ª–∏–Ω–Ω–µ–µ ‚Äî –ø—Ä–æ–±—É–µ–º ¬´72—á¬ª –ø–æ —Ñ—Ä–∞–∑–µ
        if len(user_text) <= 40:
            rows, is_recent = await fetch_tours(user_text, hours=72)
            if rows:
                _remember_query(message.from_user.id, user_text)
                header = "üî• –ù–∞—à—ë–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞ 72 —á–∞—Å–∞:" if is_recent else "‚ÑπÔ∏è –°–≤–µ–∂–∏—Ö 72—á –Ω–µ—Ç ‚Äî –≤–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
                await message.answer(f"<b>{header}</b>")
                token = _new_token()
                PAGER_STATE[token] = {
                    "chat_id": message.chat.id, "query": user_text, "country": None, "currency_eq": None,
                    "max_price": None, "hours": 72 if is_recent else None, "order_by_price": False, "ts": time.monotonic(),
                }
                await send_batch_cards(message.chat.id, message.from_user.id, rows, token, len(rows))
                return

        # fallback ‚Üí –±–µ–∑ GPT (–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏)
        await message.answer(
            "–ü–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ù–∞–∂–º–∏ ¬´üéí –ù–∞–π—Ç–∏ —Ç—É—Ä—ã¬ª –∏–ª–∏ ¬´ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å GPT¬ª (–Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞).",
            reply_markup=main_kb_for(message.from_user.id),
        )
        return

    finally:
        pulse.cancel()

# ---- helpers ----
def _extract_answer_key_from_message(msg: Message) -> Optional[str]:
    """–ò—â–µ–º #–∫–ª—é—á –≤ —Å–∞–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏/–∏–ª–∏ –≤ —Ç–æ–º, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ (text/caption)."""
    def _find(s: Optional[str]) -> Optional[str]:
        if not s:
            return None
        m = re.search(r"#([A-Za-z0-9_\-]{5,})", s)
        return m.group(1) if m else None

    # 1) –ø—ã—Ç–∞–µ–º—Å—è –≤ —Å–∞–º–æ–º –æ—Ç–≤–µ—Ç–µ
    key = _find(getattr(msg, "text", None)) or _find(getattr(msg, "caption", None))
    if key:
        return key

    # 2) –ø—Ä–æ–±—É–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–µ–ª–∞–ª–∏ reply
    r = getattr(msg, "reply_to_message", None)
    if r:
        return _find(getattr(r, "text", None)) or _find(getattr(r, "caption", None))
    return None

# –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –∏–∑ –≥—Ä—É–ø–ø—ã: –î–û–õ–ñ–ï–ù –±—ã—Ç—å reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–∫–ª—é—á –º–æ–∂–Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å)
@dp.message(F.reply_to_message)
async def on_admin_group_answer(message: Message):
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É/—Ç–æ–ø–∏–∫
    if message.chat.id != resolve_leads_chat_id():
        return
    if LEADS_TOPIC_ID and getattr(message, "message_thread_id", None) != LEADS_TOPIC_ID:
        return

    key = _extract_answer_key_from_message(message)
    if not key:
        # —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≥—Ä—É–ø–ø—É ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –Ω–∞ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    route = ANSWER_MAP.pop(key, None)
    if not route:
        await message.reply("–ö–ª—é—á –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        return

    user_id = route["user_id"]

    # —Å–∞–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    text_raw = (message.text or message.caption or "").strip()
    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Å—ë-—Ç–∞–∫–∏ –¥–æ–ø–∏—Å–∞–ª #–∫–ª—é—á ‚Äî —É–±–µ—Ä—ë–º –µ–≥–æ –∏–∑ —Ç–µ–ª–∞
    text_to_user = re.sub(r"#([A-Za-z0-9_\-]{5,})\s*", "", text_raw, count=1).strip()
    if not text_to_user:
        await message.reply("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    try:
        await bot.send_message(
            user_id,
            f"üì© –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{escape(text_to_user)}",
            disable_web_page_preview=True,
        )
        await message.reply("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ")
    except Exception as e:
        logging.error("forward answer failed: %s", e)
        await message.reply("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# ================= WEBHOOK =================
@app.get("/")
async def root():
    return {"status": "ok", "message": "TripleA Travel Bot is running!"}

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        await asyncio.sleep(0)
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)
    return JSONResponse({"status": "ok"})


# ================= START/STOP =================
@app.on_event("startup")
async def on_startup():
    try:
        init_db()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ init_db(): {e}")

    try:
        ensure_orders_columns()
    except Exception as e:
        logging.error(f"orders ensure failed: {e}")

    try:
        ensure_pending_wants_table()
        ensure_leads_schema()
        ensure_favorites_schema()
        ensure_questions_schema()
    except Exception as e:
        logging.error(f"Schema ensure failed: {e}")

    try:
        gc = _get_gs_client()
        if not gc:
            logging.info("GS warmup skipped: client is None (–Ω–µ—Ç –∫—Ä–µ–¥–æ–≤ –∏–ª–∏ ID)")
        else:
            sid = SHEETS_SPREADSHEET_ID or "(empty)"
            logging.info(f"GS warmup: trying open spreadsheet id='{sid}'")
            sh = gc.open_by_key(SHEETS_SPREADSHEET_ID)
            logging.info(f"GS warmup: opened spreadsheet title='{sh.title}'")
            try:
                titles = [ws.title for ws in sh.worksheets()]
                logging.info(f"GS warmup: worksheets={titles}")
            except Exception as e_list:
                logging.warning(f"GS: cannot list worksheets: {e_list}")
            header = [
                "created_utc",
                "lead_id",
                "username",
                "full_name",
                "phone",
                "country",
                "city",
                "hotel",
                "price",
                "currency",
                "dates",
                "source_url",
                "posted_local",
                "board",
                "includes",
            ]
            ws = _ensure_ws(sh, os.getenv("WORKSHEET_NAME", "–ó–∞—è–≤–∫–∏"), header)
            _ensure_header(ws, header)
            logging.info(f"‚úÖ GS warmup: –ª–∏—Å—Ç '{ws.title}' –≥–æ—Ç–æ–≤ (rows={ws.row_count}, cols={ws.col_count})")
    except gspread.SpreadsheetNotFound as e:
        logging.error(
            f"GS warmup failed: spreadsheet not found by id='{SHEETS_SPREADSHEET_ID}': {e}"
        )
    except gspread.exceptions.APIError as e:
        logging.error(f"GS warmup failed (APIError): {e}")
    except Exception as e:
        logging.error(f"GS warmup failed (generic): {e}")

    try:
        with get_conn() as conn, conn.cursor() as cur:
            cur.execute("ALTER TABLE IF EXISTS tours ADD COLUMN IF NOT EXISTS board TEXT;")
            cur.execute("ALTER TABLE IF EXISTS tours ADD COLUMN IF NOT EXISTS includes TEXT;")
    except Exception as e:
        logging.warning(f"Ensure tours columns failed: {e}")

    try:
        with get_conn() as conn, conn.cursor() as cur:
            info = conn.info
            logging.info(
                f"üóÑ DB DSN: host={info.host} db={info.dbname} user={info.user} port={info.port}"
            )
            cur.execute(
                """
                SELECT column_name
                FROM information_schema.columns
                WHERE table_name = 'tours'
                ORDER BY ordinal_position
                """
            )
            cols = [r["column_name"] for r in cur.fetchall()]
            global SCHEMA_COLS
            SCHEMA_COLS = set(cols)
            logging.info(f"üéØ –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ tours: {cols}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–æ–Ω–æ–∫: {e}")

    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logging.warning("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –±–æ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç –∞–ø–¥–µ–π—Ç—ã.")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()

# ====== Payme JSON-RPC helpers ======
def _now_ms() -> int:
    return int(time.time() * 1000)

def _rpc_ok(rpc_id, payload: dict):
    return {"jsonrpc": "2.0", "id": rpc_id, "result": payload}

def _rpc_err(rpc_id, code: int, ru: str, uz: str | None = None, en: str | None = None, data: str | None = None):
    return {
        "jsonrpc": "2.0",
        "id": rpc_id,
        "error": {
            "code": code,
            "message": {"ru": ru, "uz": uz or ru, "en": en or ru},
            **({"data": data} if data else {}),
        },
    }

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
def _payme_auth_ok_from_header(header_val: str | None) -> bool:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º Basic <base64(login:password)>, –≥–¥–µ login –º–æ–∂–µ—Ç –±—ã—Ç—å:
      ‚Ä¢ 'Paycom' (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Merchant API)
      ‚Ä¢ PAYME_MERCHANT_ID (—Ä–∞–∑—Ä–µ—à–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ)
    password –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–ª–∏ –±–æ–µ–≤—ã–º –∫–ª—é—á–æ–º.
    """
    if not header_val or not header_val.startswith("Basic "):
        return False

    # –ü–æ–∑–≤–æ–ª—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å XAUTH –∏–∑ ENV
    xauth_raw = (os.getenv("PAYME_MERCHANT_XAUTH") or "").strip()
    if xauth_raw and header_val.strip() == xauth_raw:
        return True

    try:
        raw = base64.b64decode(header_val.split(" ", 1)[1]).decode("utf-8")
    except Exception:
        return False

    login, _, pwd = raw.partition(":")
    if not pwd:
        return False

    allowed_logins = {"Paycom"}
    mid = (os.getenv("PAYME_MERCHANT_ID") or "").strip()
    if mid:
        allowed_logins.add(mid)

    keys = {
        (os.getenv("PAYME_MERCHANT_TEST_KEY") or "").strip(),
        (os.getenv("PAYME_MERCHANT_KEY") or "").strip(),
    }
    keys.discard("")

    return (login in allowed_logins) and (pwd in keys)

def _payme_auth_check(headers: dict) -> bool:
    # –ü–µ—Å–æ—á–Ω–∏—Ü–∞ —à–ª—ë—Ç Authorization, –∏–Ω–æ–≥–¥–∞ X-Auth
    auth = headers.get("Authorization") or headers.get("authorization")
    xauth = headers.get("X-Auth") or headers.get("x-auth")
    return _payme_auth_ok_from_header(auth) or _payme_auth_ok_from_header(xauth)

# --- –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–æ–º/—Å—É–º–º–æ–π ---
def _get_order(order_id: int) -> dict | None:
    with _pay_db() as conn, conn.cursor() as cur:
        cur.execute("SELECT * FROM orders WHERE id=%s;", (order_id,))
        return cur.fetchone()

def _order_amount_tiyin(o: dict) -> int | None:
    val = o.get("amount")
    if val is None:
        return None
    try:
        return int(val)
    except Exception:
        try:
            return int(float(val))
        except Exception:
            return None

# --- In-memory —Ä–µ–µ—Å—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Å–æ—á–Ω–∏—Ü—ã) ---
# –ö–ª—é—á: payme_transaction_id (str)
# –ó–Ω–∞—á–µ–Ω–∏–µ:
# { "order_id": int, "amount": int, "state": int,
#   "create_time": int, "perform_time": int, "cancel_time": int,
#   "reason": int }
TRX_STORE: dict[str, dict] = {}

def _trx_from_db(trx_id: str) -> dict | None:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î (–µ—Å–ª–∏ –±—ã–ª–æ).
    """
    try:
        with _pay_db() as conn, conn.cursor() as cur:
            cur.execute("""
                SELECT id AS order_id, amount, status,
                       EXTRACT(EPOCH FROM created_at)*1000 AS create_time,
                       EXTRACT(EPOCH FROM perform_time)*1000 AS perform_time,
                       EXTRACT(EPOCH FROM cancel_time)*1000 AS cancel_time,
                       COALESCE(reason, 0) AS reason
                FROM orders
                WHERE provider_trx_id=%s
                LIMIT 1;
            """, (trx_id,))
            r = cur.fetchone()
            if not r:
                return None
            st_map = {"new": 0, "created": 1, "paid": 2, "canceled": -1, "canceled_after_perform": -2}
            data = {
                "order_id": int(r["order_id"]),
                "amount": _order_amount_tiyin(r) or 0,
                "state": st_map.get((r["status"] or "").strip(), 0),
                "create_time": int(r["create_time"] or 0),
                "perform_time": int(r["perform_time"] or 0),
                "cancel_time": int(r["cancel_time"] or 0),
                "reason": int(r["reason"] or 0),
            }
            TRX_STORE[trx_id] = data
            return data
    except Exception:
        return None

# ---- –º–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è order_id/amount ----
@app.api_route("/payme/mock/new", methods=["GET"])
@app.api_route("/payme/mock/new/{amount}", methods=["GET"])
async def payme_mock_new(amount: int = 4900000):
    oid = create_order(ADMIN_USER_ID or 0, provider="payme", plan_code="basic_m", kind="merchant")
    with _pay_db() as conn, conn.cursor() as cur:
        try:
            cur.execute("UPDATE orders SET amount=%s WHERE id=%s", (amount, oid))
        except Exception:
            logging.exception("mock new: set amount failed")
    return {"order_id": oid, "amount": amount}

# ---- –æ—Å–Ω–æ–≤–Ω–æ–π JSON-RPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----
from fastapi import Header
from fastapi.responses import JSONResponse

@app.post("/payme/merchant")
async def payme_merchant(request: Request, x_auth: str | None = Header(default=None)):
    body    = await request.json()
    req_id  = body.get("id")
    method  = (body.get("method") or "").strip()
    params  = body.get("params") or {}
    account = params.get("account") or {}

    auth_ok = _payme_auth_check(request.headers)
    if not auth_ok:
        return JSONResponse(_rpc_err(req_id, -32504, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"))

    amount_in = params.get("amount")
    trx_id_in = params.get("id")
    order_id  = account.get("order_id")

    logging.info("[Payme] method=%s order_id=%s amount_in=%s auth_ok=%s",
                 method, order_id, amount_in, True)

    # --- –ü–†–ï-–ó–ê–ì–†–£–ó–ö–ê –ó–ê–ö–ê–ó–ê (–û–¢–î–ï–õ–¨–ù–´–ô –ë–õ–û–ö, –ù–ï –ß–ê–°–¢–¨ –°–í–ò–ß–ê!) ---
    order = None
    if method in {"CheckPerformTransaction", "CreateTransaction"}:
        try:
            if order_id is not None:
                order = _get_order(int(order_id))
        except Exception:
            order = None

    # ================== METHOD SWITCH ==================
    if method == "CheckPerformTransaction":
        if not order:
            return JSONResponse(_rpc_err(req_id, -31050, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"))
        expected = _order_amount_tiyin(order)
        if expected is None:
            return JSONResponse(_rpc_err(req_id, -31008, "–°—É–º–º–∞ –≤ –∑–∞–∫–∞–∑–µ –Ω–µ –∑–∞–¥–∞–Ω–∞"))
        try:
            sent = int(amount_in)
        except Exception:
            return JSONResponse(_rpc_err(req_id, -31001, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"))
        if sent != expected:
            logging.warning("[Payme] amount mismatch: sent=%s expected=%s order_id=%s", sent, expected, order_id)
            return JSONResponse(_rpc_err(req_id, -31001, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"))
        return JSONResponse(_rpc_ok(req_id, {"allow": True}))
    
    elif method == "CreateTransaction":
        payme_trx = str(trx_id_in or "").strip()
        client_ms = int(params.get("time") or 0)   # –í–ê–ñ–ù–û: –≤—Ä–µ–º—è –æ—Ç Paycom
        if not payme_trx or client_ms <= 0:
            return JSONResponse(_rpc_err(req_id, -32602, "Invalid params"))
    
        # 1) –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        snap = TRX_STORE.get(payme_trx) or _trx_from_db(payme_trx)
        if snap:
            try:
                sent = int(amount_in)
            except Exception:
                return JSONResponse(_rpc_err(req_id, -31001, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"))
            if snap.get("amount") not in (None, sent):
                return JSONResponse(_rpc_err(req_id, -31001, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"))
            return JSONResponse(_rpc_ok(req_id, {
                "create_time": int(snap.get("create_time") or 0),
                "transaction": payme_trx,
                "state": 2 if int(snap.get("state") or 1) == 2 else 1
            }))
    
        # 2) –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞/—Å—É–º–º—ã
        if not order:
            return JSONResponse(_rpc_err(req_id, -31050, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"))
    
        order_status = (order.get("status") or "").strip().lower()
        if order_status in {"paid", "canceled", "canceled_after_perform"}:
            return JSONResponse(_rpc_err(req_id, -31099, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"))
    
        expected = _order_amount_tiyin(order)
        if expected is None:
            return JSONResponse(_rpc_err(req_id, -31008, "–°—É–º–º–∞ –≤ –∑–∞–∫–∞–∑–µ –Ω–µ –∑–∞–¥–∞–Ω–∞"))
    
        try:
            sent = int(amount_in)
        except Exception:
            return JSONResponse(_rpc_err(req_id, -31001, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"))
    
        if sent != expected:
            logging.warning(f"[Payme] Create mismatch: sent={sent} expected={expected} order_id={order_id}")
            return JSONResponse(_rpc_err(req_id, -31001, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"))
    
        # 3) –∑–∞–ø–∏—Å—å trx ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º created_at –∏–∑ client_ms (params.time)
        create_time = int(params.get("time") or 0)
        if create_time <= 0:
            return JSONResponse(_rpc_err(req_id, -32602, "Invalid params"))
        
        try:
            with _pay_db() as conn, conn.cursor(row_factory=dict_row) as cur:
                cur.execute("SELECT provider_trx_id FROM orders WHERE id=%s;", (int(order_id),))
                row = cur.fetchone()
                if row and row.get("provider_trx_id") and row["provider_trx_id"] != payme_trx:
                    return JSONResponse(_rpc_err(req_id, -31099, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞"))
        
                cur.execute(
                    """
                    UPDATE orders
                       SET provider_trx_id=%s,
                           status=%s,
                           created_at = COALESCE(created_at, to_timestamp(%s/1000.0))
                     WHERE id=%s
                    """,
                    (payme_trx, "created", create_time, int(order_id)),
                )
                # ‚Üê —á–∏—Ç–∞–µ–º create_ms –∏–∑ –ë–î —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –≤–µ–∑–¥–µ –±—ã–ª –û–î–ò–ù–ê–ö–û–í–´–ô int
                cur.execute(
                    """
                    SELECT ROUND(EXTRACT(EPOCH FROM created_at) * 1000)::BIGINT AS create_ms
                      FROM orders
                     WHERE provider_trx_id=%s
                     LIMIT 1
                    """,
                    (payme_trx,),
                )
                row2 = cur.fetchone()
                db_create_ms = int(row2["create_ms"] or create_time)
                conn.commit()
        except Exception:
            logging.exception("[Payme] DB error in CreateTransaction")
            return JSONResponse(_rpc_err(req_id, -32400, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (create)"))
        
        # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Ä–æ–≤–Ω–æ —ç—Ç–∏–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º
        TRX_STORE[payme_trx] = {
            "order_id": int(order_id),
            "amount": sent,
            "state": 1,
            "create_time": db_create_ms,
            "perform_time": 0,
            "cancel_time": 0,
            "reason": None,
        }
        
        return JSONResponse(_rpc_ok(req_id, {
            "create_time": db_create_ms,
            "transaction": payme_trx,
            "state": 1
        }))

    
    # -------- PerformTransaction --------
    elif method == "PerformTransaction":
        payme_trx = str(trx_id_in or "").strip()
        trx = _trx_from_db(payme_trx) or TRX_STORE.get(payme_trx)
        if not trx:
            return JSONResponse(_rpc_err(req_id, -31003, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
    
        if int(trx.get("state") or 1) == 2:
            return JSONResponse(_rpc_ok(req_id, {
                "perform_time": int(trx.get("perform_time") or 0),
                "transaction": payme_trx,
                "state": 2
            }))
    
        perform_ms = _now_ms()
        try:
            with _pay_db() as conn, conn.cursor() as cur:
                cur.execute(
                    "UPDATE orders SET status=%s, perform_time=to_timestamp(%s/1000.0) WHERE provider_trx_id=%s;",
                    ("paid", perform_ms, payme_trx)
                )
                conn.commit()
        except Exception:
            logging.exception("[Payme] DB error in PerformTransaction")
            return JSONResponse(_rpc_err(req_id, -32400, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (perform)"))
    
        trx.update({"state": 2, "perform_time": perform_ms})
        TRX_STORE[payme_trx] = trx
    
        logging.info(f"[Payme] PerformTransaction OK trx_id={payme_trx}")
        return JSONResponse(_rpc_ok(req_id, {
            "perform_time": perform_ms,
            "transaction": payme_trx,
            "state": 2
        }))
    
    # -------- CancelTransaction --------
    elif method == "CancelTransaction":
        payme_trx = str(trx_id_in or "").strip()
        if not payme_trx:
            return JSONResponse(_rpc_err(req_id, -31003, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
    
        cancel_reason = params.get("reason")
        try:
            cancel_reason = int(cancel_reason) if cancel_reason is not None else None
        except Exception:
            cancel_reason = None
    
        try:
            trx = _trx_from_db(payme_trx) or TRX_STORE.get(payme_trx)
            if not trx:
                return JSONResponse(_rpc_err(req_id, -31003, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
    
            cur_state     = int(trx.get("state", 1))
            create_time   = int(trx.get("create_time", 0)) or _now_ms()
            perform_time  = int(trx.get("perform_time", 0))
            cancel_time   = int(trx.get("cancel_time", 0))
            stored_reason = trx.get("reason")
    
            # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            if cur_state == -1:
                return JSONResponse(_rpc_ok(req_id, {
                    "cancel_time": cancel_time,
                    "transaction": payme_trx,
                    "state": -1,
                    "reason": stored_reason,
                }))
    
            new_state = -1
            new_status_db = "canceled_after_perform" if (cur_state == 2 or perform_time > 0) else "canceled"
    
            if not cancel_time:
                cancel_time = _now_ms()
    
            with _pay_db() as conn, conn.cursor(row_factory=dict_row) as cur:
                cur.execute("SELECT id, status FROM orders WHERE provider_trx_id=%s LIMIT 1;", (payme_trx,))
                row = cur.fetchone()
                if row:
                    prev_status = (row["status"] or "").strip().lower()
                    if prev_status != new_status_db:
                        cur.execute(
                            """
                            UPDATE orders
                               SET status=%s,
                                   cancel_time=to_timestamp(%s/1000.0),
                                   reason=%s
                             WHERE id=%s
                            """,
                            (new_status_db, cancel_time, cancel_reason, row["id"])
                        )
                conn.commit()
    
            trx = {
                "create_time": create_time,
                "perform_time": perform_time,
                "cancel_time": cancel_time,
                "state": new_state,                 # —Ç–æ–ª—å–∫–æ -1
                "reason": cancel_reason if cancel_reason is not None else stored_reason,
            }
            TRX_STORE[payme_trx] = trx
    
            return JSONResponse(_rpc_ok(req_id, {
                "cancel_time": cancel_time,
                "transaction": payme_trx,
                "state": -1,
                "reason": trx["reason"],
            }))
    
        except Exception:
            logging.exception("[Payme] CancelTransaction error")
            return JSONResponse(_rpc_err(req_id, -32400, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (cancel)"))
    
    elif method == "CheckTransaction":
        try:
            payme_trx = str(params.get("id") or "").strip()
            if not payme_trx:
                return JSONResponse(_rpc_err(req_id, -32602, "Invalid params"))
    
            # 1) –ü–ï–†–í–´–ú –¥–µ–ª–æ–º ‚Äî –∫—ç—à (–∏–¥–µ–Ω—Ç–∏—á–µ–Ω –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏)
            trx = TRX_STORE.get(payme_trx)
            if trx:
                payload = {
                    "create_time": int(trx.get("create_time") or 0),
                    "perform_time": int(trx.get("perform_time") or 0),
                    "cancel_time": int(trx.get("cancel_time") or 0),
                    "transaction": payme_trx,
                    "state": int(trx.get("state") or 1),
                }
                if payload["state"] < 0:
                    payload["reason"] = int(trx.get("reason") or 0)
                return JSONResponse(_rpc_ok(req_id, payload))
    
            # 2) –§–æ–ª–±—ç–∫ ‚Äî –ë–î (–∫—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞)
            with _pay_db() as conn, conn.cursor(row_factory=dict_row) as cur:
                cur.execute("""
                    SELECT
                        ROUND(EXTRACT(EPOCH FROM created_at) * 1000)::BIGINT AS create_ms,
                        ROUND(EXTRACT(EPOCH FROM perform_time) * 1000)::BIGINT AS perform_ms,
                        ROUND(EXTRACT(EPOCH FROM cancel_time)  * 1000)::BIGINT AS cancel_ms,
                        status,
                        COALESCE(reason,0) AS reason
                      FROM orders
                     WHERE provider='payme' AND provider_trx_id=%s
                     LIMIT 1
                """, (payme_trx,))
                r = cur.fetchone()
    
            if not r:
                return JSONResponse(_rpc_err(req_id, -31003, "Transaction not found"))
    
            s = (r["status"] or "").strip().lower()
            state = 2 if s in ("paid", "performed", "done") else (-1 if s in ("canceled_after_perform","refunded","canceled") else 1)
    
            payload = {
                "create_time": int(r.get("create_ms") or 0),
                "perform_time": int(r.get("perform_ms") or 0),
                "cancel_time": int(r.get("cancel_ms") or 0),
                "transaction": payme_trx,
                "state": state,
            }
            if state < 0:
                payload["reason"] = int(r.get("reason") or 0)
    
            return JSONResponse(_rpc_ok(req_id, payload))
    
        except Exception:
            logging.exception("[Payme] CheckTransaction fatal")
            return JSONResponse(_rpc_err(req_id, -32400, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (check)"))
    
    # -------- GetStatement --------
    elif method == "GetStatement":
        if not (auth_ok or _payme_sandbox_ok(request)):
            return JSONResponse(_rpc_err(req_id, -32504, "Insufficient privileges"))
    
        try:
            frm = int(params.get("from"))
            to  = int(params.get("to"))
        except Exception:
            return JSONResponse(_rpc_err(req_id, -32602, "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (from/to)"))
    
        if to < frm:
            frm, to = to, frm
    
        def _state_from_status(status: str) -> int:
            s = (status or "").strip().lower()
            if s in ("paid", "performed", "done"): return 2
            if s in ("canceled_after_perform", "refunded", "canceled"): return -1
            return 1
    
        txs = []
        for trx_id, t in (TRX_STORE or {}).items():
            ctime = int(t.get("create_time") or 0)
            if frm <= ctime <= to:
                state = int(t.get("state") or 1)
                item = {
                    "id": trx_id,
                    "time": ctime,
                    "amount": int(t.get("amount") or 0),
                    "account": {"order_id": str(t.get("order_id", ""))},
                    "create_time": ctime,
                    "perform_time": int(t.get("perform_time") or 0),
                    "cancel_time": int(t.get("cancel_time") or 0),
                    "transaction": trx_id,
                    "state": state,
                }
                if state < 0:
                    item["reason"] = int(t.get("reason") or 0)
                txs.append(item)
    
        try:
            with _pay_db() as conn, conn.cursor(row_factory=dict_row) as cur:
                cur.execute(
                    """
                    SELECT provider_trx_id,
                           id AS order_id,
                           amount,
                           status,
                           EXTRACT(EPOCH FROM created_at)*1000 AS create_ms,
                           EXTRACT(EPOCH FROM perform_time)*1000 AS perform_ms,
                           EXTRACT(EPOCH FROM cancel_time)*1000  AS cancel_ms,
                           COALESCE(reason,0) AS reason
                      FROM orders
                     WHERE provider='payme'
                       AND provider_trx_id IS NOT NULL
                       AND EXTRACT(EPOCH FROM created_at)*1000 BETWEEN %s AND %s
                    """,
                    (frm, to),
                )
                seen = {x["id"] for x in txs}
                for r in cur.fetchall():
                    trx_id = r["provider_trx_id"]
                    if trx_id in seen:
                        continue
                    state = _state_from_status(r["status"])
                    item = {
                        "id": trx_id,
                        "time": int(r["create_ms"] or 0),
                        "amount": int(r["amount"] or 0),
                        "account": {"order_id": str(r["order_id"])},
                        "create_time": int(r["create_ms"] or 0),
                        "perform_time": int(r["perform_ms"] or 0),
                        "cancel_time": int(r["cancel_ms"] or 0),
                        "transaction": trx_id,
                        "state": state,
                    }
                    if state < 0:
                        item["reason"] = int(r["reason"] or 0)
                    txs.append(item)
            conn.commit()
        except Exception:
            logging.exception("[Payme] DB error in GetStatement")
            return JSONResponse(_rpc_err(req_id, -32400, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (getStatement)"))
    
        logging.info("[Payme] GetStatement OUT: %d tx(s)", len(txs))
        return JSONResponse(_rpc_ok(req_id, {"transactions": txs}))
    
    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥
    return JSONResponse(_rpc_err(req_id, -32601, "–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"))

# ---- callback (–∫–∞–∫ –±—ã–ª–æ) ----
@app.post("/payme/callback")
async def payme_cb(request: Request):
    form = dict(await request.form())
    ok, msg, order_id, trx = payme_handle_callback(form, dict(request.headers))
    if ok and order_id:
        try:
            activate_after_payment(order_id)
            o = get_order_safe(order_id)
            if o:
                await bot.send_message(
                    o["user_id"], f"‚úîÔ∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {fmt_sub_until(o['user_id'])}"
                )
        except Exception:
            pass
    return JSONResponse({"status": "ok" if ok else "error", "message": msg})

@app.get("/pay/success")
async def pay_success():
    return JSONResponse(
        {"status": "ok", "html": "<h3>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç–∞ ‚ú®</h3>"}
    )


@app.get("/pay/cancel")
async def pay_cancel():
    return JSONResponse({"status": "canceled", "html": "<h3>–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–∑ –±–æ—Ç–∞.</h3>"})
