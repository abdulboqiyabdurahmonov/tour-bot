import os
import logging
import asyncio
import httpx
from datetime import datetime, timedelta

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from psycopg import connect
from psycopg.rows import dict_row

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO)

# ============ ENV ============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = FastAPI()

# ============ –ë–î ============
def get_conn():
    return connect(DATABASE_URL, autocommit=True)

def init_db():
    with get_conn() as conn, conn.cursor() as cur:
        cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            is_premium BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT NOW()
        );
        """)
        cur.execute("""
        CREATE TABLE IF NOT EXISTS tours (
            id SERIAL PRIMARY KEY,
            country TEXT,
            city TEXT,
            hotel TEXT,
            price NUMERIC,
            currency TEXT,
            dates TEXT,
            description TEXT,
            source_url TEXT,
            posted_at TIMESTAMP DEFAULT NOW()
        );
        """)

async def is_premium(user_id: int):
    init_db()
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute("SELECT is_premium FROM users WHERE user_id = %s", (user_id,))
        row = cur.fetchone()
        if not row:
            cur.execute(
                "INSERT INTO users (user_id, is_premium) VALUES (%s, %s)",
                (user_id, False)
            )
            return False
        return row["is_premium"]

# üîé –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤
def search_tours(query: str):
    with get_conn() as conn, conn.cursor(row_factory=dict_row) as cur:
        cur.execute("""
            SELECT *
            FROM tours
            WHERE (
                country ILIKE %(q)s
                OR city ILIKE %(q)s
                OR description ILIKE %(q)s
            )
            ORDER BY posted_at DESC
            LIMIT 10
        """, {"q": f"%{query}%"})
        return cur.fetchall()

# üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
def format_tour(tour: dict) -> str:
    parts = []
    if tour.get("country") or tour.get("city"):
        parts.append(f"üåç {tour.get('country','')} {tour.get('city','')}")
    if tour.get("hotel"):
        parts.append(f"üè® {tour['hotel']}")
    if tour.get("price"):
        parts.append(f"üíµ {tour['price']} {tour.get('currency','')}")
    if tour.get("dates"):
        parts.append(f"üìÖ {tour['dates']}")
    if tour.get("description"):
        desc = tour['description'][:200] + "..." if len(tour['description']) > 200 else tour['description']
        parts.append(f"üìù {desc}")
    if tour.get("source_url"):
        parts.append(f"[–ò—Å—Ç–æ—á–Ω–∏–∫]({tour['source_url']})")

    return "\n".join(parts)

# ============ –ú–ï–ù–Æ ============
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç –ù–∞–π—Ç–∏ —Ç—É—Ä", callback_data="find_tour")],
        [InlineKeyboardButton(text="üî• –î–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã", callback_data="cheap_tours")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")],
        [InlineKeyboardButton(text="üí∞ –ü—Ä–∞–π—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="price")],
    ])

def back_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu")]
    ])

# ============ OPENAI ============
async def ask_gpt(prompt: str) -> str:
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "–¢—ã —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ç—É—Ä–æ–≤. –î–µ—Ä–∂–∏—Å—å —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.3
    }
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"]

# ============ –ü–†–û–ì–†–ï–°–° ============
async def show_progress(chat_id: int, bot: Bot):
    steps = [
        "ü§î –î—É–º–∞—é...",
        "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
        "üìä –°—Ä–∞–≤–Ω–∏–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã...",
        "‚úÖ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..."
    ]
    msg = await bot.send_message(chat_id, steps[0])
    for step in steps[1:]:
        await asyncio.sleep(2)
        try:
            await bot.edit_message_text(step, chat_id, msg.message_id)
        except Exception:
            pass
    return msg

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π —Ç—É—Ä-–±–æ—Ç ü§ñ\n\n"
        "–ú—ã —á–∞—Å—Ç—å **—ç–∫–æ—Å–∏—Å—Ç–µ–º—ã TripleA** üöÄ\n\n"
        "–ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ üèñÔ∏è\n\n"
        "–í—ã–±–∏—Ä–∞–π –æ–ø—Ü–∏—é –Ω–∏–∂–µ –∏ –ø–æ–≥–Ω–∞–ª–∏! üëá",
        parse_mode="Markdown",
        reply_markup=main_menu(),
    )

# ‚úàÔ∏è –ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ
@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    query = message.text.replace("/search", "").strip()
    if not query:
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/search –ê–Ω—Ç–∞–ª—å—è`\n`/search –î—É–±–∞–π`")
        return

    tours = search_tours(query)
    if not tours:
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for t in tours:
        text = format_tour(t)
        kb = None
        if t.get("source_url"):
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=t["source_url"])
            )
        await message.answer(text, reply_markup=kb, disable_web_page_preview=True, parse_mode="Markdown")

# üí¨ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Üí –ø–æ–∏—Å–∫
@dp.message()
async def handle_plain_text(message: types.Message):
    query = message.text.strip()

    progress_msg = await show_progress(message.chat.id, bot)

    tours = search_tours(query)

    if not tours:
        reply = await ask_gpt(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä: {query}. "
            f"–ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç, –¥–∞–π —Å–æ–≤–µ—Ç –∫—É–¥–∞ –ª–µ—Ç–µ—Ç—å –≤ —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."
        )
        await bot.edit_message_text(
            text=reply,
            chat_id=message.chat.id,
            message_id=progress_msg.message_id
        )
        return

    for t in tours:
        text = format_tour(t)
        kb = None
        if t.get("source_url"):
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç", url=t["source_url"])
            )
        await bot.send_message(message.chat.id, text, reply_markup=kb, parse_mode="Markdown", disable_web_page_preview=True)

    try:
        await bot.delete_message(message.chat.id, progress_msg.message_id)
    except Exception:
        pass

# ============ CALLBACKS ============
@dp.callback_query(F.data == "menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá", reply_markup=main_menu())

@dp.callback_query(F.data == "about")
async def about(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üåê –ú—ã ‚Äî —á–∞—Å—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã **TripleA**.\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ü§ñ\n"
        "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç—É—Ä—ã üèùÔ∏è\n"
        "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ üöÄ",
        parse_mode="Markdown",
        reply_markup=back_menu(),
    )

@dp.callback_query(F.data == "price")
async def price(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ TripleA Travel:\n\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî —Ü–µ–Ω—ã –±–µ–∑ –æ—Ç–µ–ª–µ–π\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º ‚Äî –æ—Ç–µ–ª–∏, —Å—Å—ã–ª–∫–∏ –∏ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã\n\n"
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º —Å–∫–æ—Ä–æ üîë",
        reply_markup=back_menu(),
    )

@dp.callback_query(F.data == "find_tour")
async def find_tour(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=back_menu()
    )

@dp.callback_query(F.data == "cheap_tours")
async def cheap_tours(callback: types.CallbackQuery):
    tours = search_tours("")[:5]
    if not tours:
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–µ—à—ë–≤—ã—Ö —Ç—É—Ä–æ–≤.", reply_markup=back_menu())
        return

    text = "\n".join([
        f"{t['country']} {t['city'] or ''} ‚Äî {t['price']} {t['currency']}"
        for t in tours
    ])

    await callback.message.edit_text(
        f"üî• –°–≤–µ–∂–∏–µ –¥–µ—à—ë–≤—ã–µ —Ç—É—Ä—ã:\n\n{text}",
        reply_markup=back_menu()
    )

# ============ FASTAPI ============
@app.on_event("startup")
async def on_startup():
    init_db()
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω")

@app.post("/webhook")
async def webhook_handler(request: Request):
    update = types.Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}

# ====== HEALTH CHECK + ROOT ======
@app.get("/healthz", include_in_schema=False)
@app.head("/healthz", include_in_schema=False)
async def health_check():
    return JSONResponse(content={"status": "ok"})

@app.get("/", include_in_schema=False)
@app.head("/", include_in_schema=False)
async def root():
    return JSONResponse(content={"status": "ok"})
