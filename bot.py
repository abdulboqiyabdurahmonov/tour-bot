import os
import logging
import asyncio
import httpx

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# ================= –õ–û–ì–ò =================
logging.basicConfig(level=logging.INFO)

# ================= ENV =================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SEARCH_API = os.getenv("SEARCH_API", "https://collector.onrender.com/search")

WEBHOOK_HOST = os.getenv("WEBHOOK_URL", "https://tour-bot-rxi8.onrender.com")  # –¥–æ–º–µ–Ω Render
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ================= –ë–û–¢ =================
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="Markdown")
)
dp = Dispatcher()
app = FastAPI()


# ================= API –ø–æ–∏—Å–∫ =================
async def fetch_tours(query: str):
    """–ò—â–µ–º —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —á–µ—Ä–µ–∑ collector API"""
    try:
        async with httpx.AsyncClient(timeout=20.0) as client:
            resp = await client.get(SEARCH_API, params={"q": query})
            if resp.status_code == 200:
                return resp.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ fetch_tours: {e}")
    return []


# ================= GPT =================
async def ask_gpt(prompt: str, premium: bool = False) -> list[str]:
    """GPT –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ —Ç–µ–º–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENAI_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "gpt-4o-mini",
                    "messages": [
                        {"role": "system", "content": (
                            "–¢—ã ‚Äî AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º –∏–∑ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã TripleA. "
                            "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. "
                            "–°–æ–≤–µ—Ç—ã, —Ç—É—Ä—ã, –æ—Ç–µ–ª–∏, –ª–∞–π—Ñ—Ö–∞–∫–∏, –ø–æ–≥–æ–¥–∞, —Ü–µ–Ω—ã, –∫—É–ª—å—Ç—É—Ä–∞. "
                            "–ù–µ —É—Ö–æ–¥–∏ –æ—Ç —Ç–µ–º–∞—Ç–∏–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π."
                        )},
                        {"role": "user", "content": prompt},
                    ],
                    "temperature": 0.7,
                },
            )

        data = response.json()
        answer = data["choices"][0]["message"]["content"].strip()

        # –î–æ–ø. –ª–æ–≥–∏–∫–∞ Free / Premium
        if premium:
            answer += "\n\nüîó *–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—É—Ä–∞:* [–ü–µ—Ä–µ–π—Ç–∏](https://t.me/triplea_channel)"
        else:
            answer += "\n\n‚ú® –•–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—É—Ä–æ–≤? –ü–æ–¥–∫–ª—é—á–∏ Premium –¥–æ—Å—Ç—É–ø TripleA."

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (Telegram –ª–∏–º–∏—Ç ~4096)
        MAX_LEN = 3800
        if len(answer) > MAX_LEN:
            return [answer[i:i+MAX_LEN] for i in range(0, len(answer), MAX_LEN)]
        return [answer]

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return ["‚ö†Ô∏è –£–ø—Å! –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."]


# ================= –•–ï–ù–î–õ–ï–†–´ =================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    intro = (
        "üåç –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *TripleA Travel Bot* ‚úàÔ∏è\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ *–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã, —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤*.\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å:\n"
        "‚Ä¢ –¢—É—Ä –≤ –¢—É—Ä—Ü–∏—é –≤ —Å–µ–Ω—Ç—è–±—Ä–µ\n"
        "‚Ä¢ –ü–æ–≥–æ–¥–∞ –≤ –ë–∞–ª–∏ –≤ –æ–∫—Ç—è–±—Ä–µ\n"
        "‚Ä¢ –õ—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –≤ –î—É–±–∞–µ\n\n"
        "‚ú® –î–æ—Å—Ç—É–ø–Ω–æ: –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç—É—Ä–∞–º\n"
        "üîí Premium: –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—É—Ä–∞\n\n"
        "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üòä"
    )
    await message.answer(intro)


@dp.message(F.text)
async def handle_message(message: Message):
    user_text = message.text.strip()

    # 1) –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã –≤ –±–∞–∑–µ
    tours = await fetch_tours(user_text)
    if tours:
        reply = "üî• –ù–∞—à—ë–ª —Å–≤–µ–∂–∏–µ —Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n\n"
        for t in tours:
            reply += (
                f"üåç {t.get('country') or '–°—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ‚Äî {t.get('city') or '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üè® {t.get('hotel') or '–û—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üíµ {t.get('price')} {t.get('currency')}\n"
                f"üìÖ {t.get('dates') or '–î–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
                f"üîó [–ò—Å—Ç–æ—á–Ω–∏–∫]({t.get('source_url')})\n\n"
            )
        await message.answer(reply)
        return

    # 2) –ï—Å–ª–∏ –Ω–µ—Ç —Ç—É—Ä–æ–≤ ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º GPT
    premium_users = {123456789}
    is_premium = message.from_user.id in premium_users
    replies = await ask_gpt(user_text, premium=is_premium)
    for part in replies:
        await message.answer(part)


# ================= WEBHOOK =================
@app.get("/")
async def root():
    return {"status": "ok", "message": "TripleA Travel Bot is running!"}


@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        await asyncio.sleep(0)
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)

    return JSONResponse({"status": "ok"})


@app.on_event("startup")
async def on_startup():
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logging.warning("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –±–æ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç –∞–ø–¥–µ–π—Ç—ã.")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
