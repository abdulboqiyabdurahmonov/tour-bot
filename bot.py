import os
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

import openai

# –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
from db_init import init_db, save_user, save_request, search_tours

# ============ –õ–û–ì–ò ============
logging.basicConfig(level=logging.INFO)

# ============ ENV ============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not WEBHOOK_URL or not OPENAI_API_KEY:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode="Markdown")
)
dp = Dispatcher()
app = FastAPI()
openai.api_key = OPENAI_API_KEY

# ============ GPT ============
async def ask_gpt(user_text: str, tours=None, premium=False):
    context = "–¢—ã —Ç—Ä–µ–≤–µ–ª-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç —Ç—É—Ä, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ —Ç—É—Ä—ã."

    if tours:
        tours_text = "\n\n".join([
            f"üè® {t['hotel'] or '–û—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω'} | {t['city']}, {t['country']}\n"
            f"üíµ {t['price']} {t['currency']} | üìÖ {t['dates'] or '–¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"{t['description'][:120]}..."
            + (f"\nüîó https://t.me/{t['source_chat']}/{t['message_id']}" if premium else "")
            for t in tours
        ])
        user_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç—É—Ä: {user_text}\n\n–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{tours_text}"

    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": context},
            {"role": "user", "content": user_text}
        ],
        max_tokens=500,
        temperature=0.7
    )
    return response.choices[0].message["content"]

# ============ –•–ï–ù–î–õ–ï–†–´ ============
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    save_user(message.from_user)
    name = message.from_user.first_name or "–¥—Ä—É–≥"
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, *{name}*!\n\n"
        "–Ø —Ç–≤–æ–π —Ç—Ä–µ–≤–µ–ª-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–∏—à–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–µ—Ö–∞—Ç—å, –∞ —è –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ —Ç—É—Ä—ã ‚úàÔ∏èüå¥\n\n"
        "_–ü—Ä–∏–º–µ—Ä: '–•–æ—á—É —Ç—É—Ä –≤ –ù—è—á–∞–Ω–≥ –Ω–∞ –æ–∫—Ç—è–±—Ä—å'_"
    )

@dp.message()
async def handle_message(message: types.Message):
    user_text = message.text.strip()
    user_id = message.from_user.id

    tours = search_tours(user_text)
    premium = False  # TODO: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏

    reply = await ask_gpt(user_text, tours, premium)

    save_request(user_id, user_text, reply)

    await message.answer(reply)

# ============ FASTAPI ============
@app.on_event("startup")
async def on_startup():
    init_db()
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")
    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –±–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω, –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        return JSONResponse(content={"ok": True})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return JSONResponse(content={"ok": False})

@app.get("/")
async def root():
    return {"status": "ok", "message": "ü§ñ Tour Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"}
